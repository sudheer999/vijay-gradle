/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.ExitFinanceNocDao;
import com.dikshatech.portal.dto.ExitFinanceNoc;
import com.dikshatech.portal.dto.ExitFinanceNocPk;
import com.dikshatech.portal.exceptions.ExitFinanceNocDaoException;

public class ExitFinanceNocDaoImpl extends AbstractDAO implements ExitFinanceNocDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger						= Logger.getLogger(ExitFinanceNocDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT					= "SELECT ID, EXIT_ID, STATUS_ID, SALARY_FROM, SALARY_TO, PERDIEM_FROM, PERDIEM_TO, LWP_FROM, LWP_TO, PENDING, SALARY_RECOVER, AGREEMENT_RECOVER, DUE, DUE_ACCOUNT, CHARGED_AMOUNT, CHARGED_ACCOUNT, CHARGED_ON, REMARKS, SUBMITTED_ON FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT					= "INSERT INTO " + getTableName() + " ( ID, EXIT_ID, STATUS_ID, SALARY_FROM, SALARY_TO, PERDIEM_FROM, PERDIEM_TO, LWP_FROM, LWP_TO, PENDING, SALARY_RECOVER, AGREEMENT_RECOVER, DUE, DUE_ACCOUNT, CHARGED_AMOUNT, CHARGED_ACCOUNT, CHARGED_ON, REMARKS, SUBMITTED_ON ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE					= "UPDATE " + getTableName()
																		+ " SET ID = ?, EXIT_ID = ?, STATUS_ID = ?, SALARY_FROM = ?, SALARY_TO = ?, PERDIEM_FROM = ?, PERDIEM_TO = ?, LWP_FROM = ?, LWP_TO = ?, PENDING = ?, SALARY_RECOVER = ?, AGREEMENT_RECOVER = ?, DUE = ?, DUE_ACCOUNT = ?, CHARGED_AMOUNT = ?, CHARGED_ACCOUNT = ?, CHARGED_ON = ?, REMARKS = ?, SUBMITTED_ON = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE					= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID					= 1;
	/**
	 * Index of column EXIT_ID
	 */
	protected static final int		COLUMN_EXIT_ID				= 2;
	/**
	 * Index of column STATUS_ID
	 */
	protected static final int		COLUMN_STATUS_ID			= 3;
	/**
	 * Index of column SALARY_FROM
	 */
	protected static final int		COLUMN_SALARY_FROM			= 4;
	/**
	 * Index of column SALARY_TO
	 */
	protected static final int		COLUMN_SALARY_TO			= 5;
	/**
	 * Index of column PERDIEM_FROM
	 */
	protected static final int		COLUMN_PERDIEM_FROM			= 6;
	/**
	 * Index of column PERDIEM_TO
	 */
	protected static final int		COLUMN_PERDIEM_TO			= 7;
	/**
	 * Index of column LWP_FROM
	 */
	protected static final int		COLUMN_LWP_FROM				= 8;
	/**
	 * Index of column LWP_TO
	 */
	protected static final int		COLUMN_LWP_TO				= 9;
	/**
	 * Index of column PENDING
	 */
	protected static final int		COLUMN_PENDING				= 10;
	/**
	 * Index of column SALARY_RECOVER
	 */
	protected static final int		COLUMN_SALARY_RECOVER		= 11;
	/**
	 * Index of column AGREEMENT_RECOVER
	 */
	protected static final int		COLUMN_AGREEMENT_RECOVER	= 12;
	/**
	 * Index of column DUE
	 */
	protected static final int		COLUMN_DUE					= 13;
	/**
	 * Index of column DUE_ACCOUNT
	 */
	protected static final int		COLUMN_DUE_ACCOUNT			= 14;
	/**
	 * Index of column CHARGED_AMOUNT
	 */
	protected static final int		COLUMN_CHARGED_AMOUNT		= 15;
	/**
	 * Index of column CHARGED_ACCOUNT
	 */
	protected static final int		COLUMN_CHARGED_ACCOUNT		= 16;
	/**
	 * Index of column CHARGED_ON
	 */
	protected static final int		COLUMN_CHARGED_ON			= 17;
	/**
	 * Index of column REMARKS
	 */
	protected static final int		COLUMN_REMARKS				= 18;
	/**
	 * Index of column SUBMITTED_ON
	 */
	protected static final int		COLUMN_SUBMITTED_ON			= 19;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS			= 19;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID				= 1;

	/**
	 * Inserts a new row in the EXIT_FINANCE_NOC table.
	 */
	public ExitFinanceNocPk insert(ExitFinanceNoc dto) throws ExitFinanceNocDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getExitId());
			stmt.setInt(index++, dto.getStatusId());
			stmt.setDate(index++, dto.getSalaryFrom() == null ? null : new java.sql.Date(dto.getSalaryFrom().getTime()));
			stmt.setDate(index++, dto.getSalaryTo() == null ? null : new java.sql.Date(dto.getSalaryTo().getTime()));
			stmt.setDate(index++, dto.getPerdiemFrom() == null ? null : new java.sql.Date(dto.getPerdiemFrom().getTime()));
			stmt.setDate(index++, dto.getPerdiemTo() == null ? null : new java.sql.Date(dto.getPerdiemTo().getTime()));
			stmt.setDate(index++, dto.getLwpFrom() == null ? null : new java.sql.Date(dto.getLwpFrom().getTime()));
			stmt.setDate(index++, dto.getLwpTo() == null ? null : new java.sql.Date(dto.getLwpTo().getTime()));
			stmt.setFloat(index++, dto.getPending());
			stmt.setFloat(index++, dto.getSalaryRecover());
			stmt.setFloat(index++, dto.getAgreementRecover());
			stmt.setFloat(index++, dto.getDue());
			stmt.setString(index++, dto.getDueAccount());
			stmt.setFloat(index++, dto.getChargedAmount());
			stmt.setString(index++, dto.getChargedAccount());
			stmt.setDate(index++, dto.getChargedOn() == null ? null : new java.sql.Date(dto.getChargedOn().getTime()));
			stmt.setString(index++, dto.getRemarks());
			stmt.setTimestamp(index++, dto.getSubmittedOn() == null ? null : new java.sql.Timestamp(dto.getSubmittedOn().getTime()));
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitFinanceNocDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the EXIT_FINANCE_NOC table.
	 */
	public void update(ExitFinanceNocPk pk, ExitFinanceNoc dto) throws ExitFinanceNocDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getExitId());
			stmt.setInt(index++, dto.getStatusId());
			stmt.setDate(index++, dto.getSalaryFrom() == null ? null : new java.sql.Date(dto.getSalaryFrom().getTime()));
			stmt.setDate(index++, dto.getSalaryTo() == null ? null : new java.sql.Date(dto.getSalaryTo().getTime()));
			stmt.setDate(index++, dto.getPerdiemFrom() == null ? null : new java.sql.Date(dto.getPerdiemFrom().getTime()));
			stmt.setDate(index++, dto.getPerdiemTo() == null ? null : new java.sql.Date(dto.getPerdiemTo().getTime()));
			stmt.setDate(index++, dto.getLwpFrom() == null ? null : new java.sql.Date(dto.getLwpFrom().getTime()));
			stmt.setDate(index++, dto.getLwpTo() == null ? null : new java.sql.Date(dto.getLwpTo().getTime()));
			stmt.setFloat(index++, dto.getPending());
			stmt.setFloat(index++, dto.getSalaryRecover());
			stmt.setFloat(index++, dto.getAgreementRecover());
			stmt.setFloat(index++, dto.getDue());
			stmt.setString(index++, dto.getDueAccount());
			stmt.setFloat(index++, dto.getChargedAmount());
			stmt.setString(index++, dto.getChargedAccount());
			stmt.setDate(index++, dto.getChargedOn() == null ? null : new java.sql.Date(dto.getChargedOn().getTime()));
			stmt.setString(index++, dto.getRemarks());
			stmt.setTimestamp(index++, dto.getSubmittedOn() == null ? null : new java.sql.Timestamp(dto.getSubmittedOn().getTime()));
			stmt.setInt(20, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitFinanceNocDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the EXIT_FINANCE_NOC table.
	 */
	public void delete(ExitFinanceNocPk pk) throws ExitFinanceNocDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitFinanceNocDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the EXIT_FINANCE_NOC table that matches the specified primary-key value.
	 */
	public ExitFinanceNoc findByPrimaryKey(ExitFinanceNocPk pk) throws ExitFinanceNocDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the EXIT_FINANCE_NOC table that match the criteria 'ID = :id'.
	 */
	public ExitFinanceNoc findByPrimaryKey(int id) throws ExitFinanceNocDaoException {
		ExitFinanceNoc ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the EXIT_FINANCE_NOC table that match the criteria ''.
	 */
	public ExitFinanceNoc[] findAll() throws ExitFinanceNocDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the EXIT_FINANCE_NOC table that match the criteria 'EXIT_ID = :exitId'.
	 */
	public ExitFinanceNoc findWhereExitIdEquals(int exitId) throws ExitFinanceNocDaoException {
		ExitFinanceNoc ret[] = findByDynamicSelect(SQL_SELECT + " WHERE EXIT_ID = ?", new Object[] { new Integer(exitId) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Method 'ExitFinanceNocDaoImpl'
	 */
	public ExitFinanceNocDaoImpl() {}

	/**
	 * Method 'ExitFinanceNocDaoImpl'
	 * 
	 * @param userConn
	 */
	public ExitFinanceNocDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "EXIT_FINANCE_NOC";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected ExitFinanceNoc fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			ExitFinanceNoc dto = new ExitFinanceNoc();
			populateDto(dto, rs);
			return dto;
		}
		return null;
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected ExitFinanceNoc[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<ExitFinanceNoc> resultList = new ArrayList<ExitFinanceNoc>();
		while (rs.next()){
			ExitFinanceNoc dto = new ExitFinanceNoc();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		ExitFinanceNoc ret[] = new ExitFinanceNoc[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ExitFinanceNoc dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setExitId(rs.getInt(COLUMN_EXIT_ID));
		dto.setStatusId(rs.getInt(COLUMN_STATUS_ID));
		dto.setSalaryFrom(rs.getDate(COLUMN_SALARY_FROM));
		dto.setSalaryTo(rs.getDate(COLUMN_SALARY_TO));
		dto.setPerdiemFrom(rs.getDate(COLUMN_PERDIEM_FROM));
		dto.setPerdiemTo(rs.getDate(COLUMN_PERDIEM_TO));
		dto.setLwpFrom(rs.getDate(COLUMN_LWP_FROM));
		dto.setLwpTo(rs.getDate(COLUMN_LWP_TO));
		dto.setPending(rs.getFloat(COLUMN_PENDING));
		dto.setSalaryRecover(rs.getFloat(COLUMN_SALARY_RECOVER));
		dto.setAgreementRecover(rs.getFloat(COLUMN_AGREEMENT_RECOVER));
		dto.setDue(rs.getFloat(COLUMN_DUE));
		dto.setDueAccount(rs.getString(COLUMN_DUE_ACCOUNT));
		dto.setChargedAmount(rs.getFloat(COLUMN_CHARGED_AMOUNT));
		dto.setChargedAccount(rs.getString(COLUMN_CHARGED_ACCOUNT));
		dto.setChargedOn(rs.getDate(COLUMN_CHARGED_ON));
		dto.setRemarks(rs.getString(COLUMN_REMARKS));
		dto.setSubmittedOn(rs.getTimestamp(COLUMN_SUBMITTED_ON));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ExitFinanceNoc dto) {}

	/**
	 * Returns all rows from the EXIT_FINANCE_NOC table that match the specified arbitrary SQL statement
	 */
	public ExitFinanceNoc[] findByDynamicSelect(String sql, Object[] sqlParams) throws ExitFinanceNocDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitFinanceNocDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the EXIT_FINANCE_NOC table that match the specified arbitrary SQL statement
	 */
	public ExitFinanceNoc[] findByDynamicWhere(String sql, Object[] sqlParams) throws ExitFinanceNocDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitFinanceNocDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
