/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.common.utils.DesEncrypterDecrypter;
import com.dikshatech.portal.dao.PerdiemInAdvanceDao;
import com.dikshatech.portal.dto.PerdiemInAdvance;
import com.dikshatech.portal.dto.PerdiemInAdvancePk;
import com.dikshatech.portal.exceptions.PerdiemInAdvanceDaoException;

public class PerdiemInAdvanceDaoImpl extends AbstractDAO implements PerdiemInAdvanceDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger				= Logger.getLogger(PerdiemInAdvanceDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT			= "SELECT ID, TOTAL, TERM_DEDUCTIONS, CREATED_ON, NUMBER_OF_MONTHS, TERMS, BALANCE_AMOUNT, PAID_AMOUNT FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT			= "INSERT INTO " + getTableName() + " ( ID, TOTAL, TERM_DEDUCTIONS, CREATED_ON, NUMBER_OF_MONTHS, TERMS, BALANCE_AMOUNT, PAID_AMOUNT) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE			= "UPDATE " + getTableName() + " SET ID = ?, TOTAL = ?, TERM_DEDUCTIONS = ?, CREATED_ON = ? , NUMBER_OF_MONTHS = ?, TERMS  = ?,  BALANCE_AMOUNT=?, PAID_AMOUNT=? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE			= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID			= 1;
	/**
	 * Index of column TOTAL
	 */
	protected static final int		COLUMN_TOTAL		= 2;
	/**
	 * Index of column MONTHLY
	 */
	protected static final int		COLUMN_TERM_DEDUCTIONS		= 3;
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_CREATED_ON	= 4;
	
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_NUMBER_OF_MONTHS	= 5;
	
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_TERMS	= 6;
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_BALANCE_AMOUNT	= 7;
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_PAID_AMOUNT	= 8;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS	= 8;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID		= 1;

	/**
	 * Inserts a new row in the PERDIEM_IN_ADVANCE table.
	 */
	public PerdiemInAdvancePk insert(PerdiemInAdvance dto) throws PerdiemInAdvanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT);
			int index = 1;
			if (dto.getId() != null){
				stmt.setInt(index++, dto.getId().intValue());
			} else{
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getTotal()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getMonthly()));
			stmt.setTimestamp(index++, new java.sql.Timestamp(new Date().getTime()));
			stmt.setString(index++, dto.getNumber_of_months());
			stmt.setString(index++, dto.getTerms());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAdvanceBal()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAdvancePaid()));
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PerdiemInAdvanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the PERDIEM_IN_ADVANCE table.
	 */
	public void update(PerdiemInAdvancePk pk, PerdiemInAdvance dto) throws PerdiemInAdvanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			if (dto.getId() != null){
				stmt.setInt(index++, dto.getId().intValue());
			} else{
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getTotal()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getMonthly()));
			stmt.setTimestamp(index++, new java.sql.Timestamp(new Date().getTime()));
			stmt.setString(index++, dto.getNumber_of_months());
			stmt.setString(index++, dto.getTerms());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAdvanceBal()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAdvancePaid()));
			
			if (pk.getId() != null){
				stmt.setInt(9, pk.getId().intValue());
			} else{
				stmt.setNull(9, java.sql.Types.INTEGER);
			}
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PerdiemInAdvanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the PERDIEM_IN_ADVANCE table.
	 */
	public void delete(PerdiemInAdvancePk pk) throws PerdiemInAdvanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			if (pk.getId() != null){
				stmt.setInt(1, pk.getId().intValue());
			} else{
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PerdiemInAdvanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the PERDIEM_IN_ADVANCE table that matches the specified primary-key value.
	 */
	public PerdiemInAdvance findByPrimaryKey(PerdiemInAdvancePk pk) throws PerdiemInAdvanceDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the PERDIEM_IN_ADVANCE table that match the criteria 'ID = :id'.
	 */
	public PerdiemInAdvance findByPrimaryKey(Integer id) throws PerdiemInAdvanceDaoException {
		PerdiemInAdvance ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { id });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the PERDIEM_IN_ADVANCE table that match the criteria ''.
	 */
	public PerdiemInAdvance[] findAll() throws PerdiemInAdvanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Method 'PerdiemInAdvanceDaoImpl'
	 */
	public PerdiemInAdvanceDaoImpl() {}

	/**
	 * Method 'PerdiemInAdvanceDaoImpl'
	 * 
	 * @param userConn
	 */
	public PerdiemInAdvanceDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "PERDIEM_IN_ADVANCE";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected PerdiemInAdvance fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			PerdiemInAdvance dto = new PerdiemInAdvance();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected PerdiemInAdvance[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<PerdiemInAdvance> resultList = new ArrayList<PerdiemInAdvance>();
		while (rs.next()){
			PerdiemInAdvance dto = new PerdiemInAdvance();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		PerdiemInAdvance ret[] = new PerdiemInAdvance[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PerdiemInAdvance dto, ResultSet rs) throws SQLException {
		dto.setId(new Integer(rs.getInt(COLUMN_ID)));
		dto.setTotal(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_TOTAL)));
		dto.setMonthly(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_TERM_DEDUCTIONS)));
		dto.setCreatedOn(rs.getTimestamp(COLUMN_CREATED_ON));
		dto.setNumber_of_months(rs.getString(COLUMN_NUMBER_OF_MONTHS));
		dto.setTerms(rs.getString(COLUMN_TERMS));
		dto.setAdvanceBal(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_BALANCE_AMOUNT)));
		dto.setAdvancePaid(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_PAID_AMOUNT)));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PerdiemInAdvance dto) {}

	/**
	 * Returns all rows from the PERDIEM_IN_ADVANCE table that match the specified arbitrary SQL statement
	 */
	public PerdiemInAdvance[] findByDynamicSelect(String sql, Object[] sqlParams) throws PerdiemInAdvanceDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PerdiemInAdvanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the PERDIEM_IN_ADVANCE table that match the specified arbitrary SQL statement
	 */
	public PerdiemInAdvance[] findByDynamicWhere(String sql, Object[] sqlParams) throws PerdiemInAdvanceDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PerdiemInAdvanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
