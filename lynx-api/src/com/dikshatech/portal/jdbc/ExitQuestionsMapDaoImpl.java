/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.ExitQuestionsMapDao;
import com.dikshatech.portal.dto.ExitQuestions;
import com.dikshatech.portal.dto.ExitQuestionsMap;
import com.dikshatech.portal.exceptions.ExitQuestionsMapDaoException;

public class ExitQuestionsMapDaoImpl extends AbstractDAO implements ExitQuestionsMapDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(ExitQuestionsMapDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT EXIT_QUESTION_ID, EXIT_ID, ANSWER FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( EXIT_QUESTION_ID, EXIT_ID, ANSWER ) VALUES ( ?, ?, ? )";
	/**
	 * Index of column EXIT_QUESTION_ID
	 */
	protected static final int		COLUMN_EXIT_QUESTION_ID	= 1;
	/**
	 * Index of column EXIT_ID
	 */
	protected static final int		COLUMN_EXIT_ID			= 2;
	/**
	 * Index of column ANSWER
	 */
	protected static final int		COLUMN_ANSWER			= 3;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 3;

	/**
	 * Inserts a new row in the EXIT_QUESTIONS_MAP table.
	 */
	public void insert(ExitQuestionsMap dto) throws ExitQuestionsMapDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT);
			int index = 1;
			stmt.setInt(index++, dto.getExitQuestionId());
			stmt.setInt(index++, dto.getExitId());
			stmt.setString(index++, dto.getAnswer());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			reset(dto);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitQuestionsMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria ''.
	 */
	public ExitQuestionsMap[] findAll() throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT, null);
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria 'EXIT_QUESTION_ID = :exitQuestionId'.
	 */
	public ExitQuestionsMap[] findByExitQuestions(Integer exitQuestionId) throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXIT_QUESTION_ID = ?", new Object[] { exitQuestionId });
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria 'EXIT_ID = :exitId'.
	 */
	public ExitQuestionsMap[] findByExitEmployee(Integer exitId) throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXIT_ID = ?", new Object[] { exitId });
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria 'EXIT_QUESTION_ID = :exitQuestionId'.
	 */
	public ExitQuestionsMap[] findWhereExitQuestionIdEquals(Integer exitQuestionId) throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXIT_QUESTION_ID = ? ORDER BY EXIT_QUESTION_ID", new Object[] { exitQuestionId });
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria 'EXIT_ID = :exitId'.
	 */
	public ExitQuestionsMap[] findWhereExitIdEquals(Integer exitId) throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXIT_ID = ? ORDER BY EXIT_ID", new Object[] { exitId });
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the criteria 'ANSWER = :answer'.
	 */
	public ExitQuestionsMap[] findWhereAnswerEquals(String answer) throws ExitQuestionsMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ANSWER = ? ORDER BY ANSWER", new Object[] { answer });
	}

	/**
	 * Method 'ExitQuestionsMapDaoImpl'
	 */
	public ExitQuestionsMapDaoImpl() {}

	/**
	 * Method 'ExitQuestionsMapDaoImpl'
	 * 
	 * @param userConn
	 */
	public ExitQuestionsMapDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "EXIT_QUESTIONS_MAP";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected ExitQuestionsMap fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			ExitQuestionsMap dto = new ExitQuestionsMap();
			populateDto(dto, rs);
			return dto;
		}
		return null;
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected ExitQuestionsMap[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<ExitQuestionsMap> resultList = new ArrayList<ExitQuestionsMap>();
		while (rs.next()){
			ExitQuestionsMap dto = new ExitQuestionsMap();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		ExitQuestionsMap ret[] = new ExitQuestionsMap[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ExitQuestionsMap dto, ResultSet rs) throws SQLException {
		dto.setExitQuestionId(rs.getInt(COLUMN_EXIT_QUESTION_ID));
		dto.setExitId(rs.getInt(COLUMN_EXIT_ID));
		dto.setAnswer(rs.getString(COLUMN_ANSWER));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ExitQuestionsMap dto) {}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the specified arbitrary SQL statement
	 */
	public ExitQuestionsMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws ExitQuestionsMapDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitQuestionsMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the specified arbitrary SQL statement
	 */
	public ExitQuestionsMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws ExitQuestionsMapDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ExitQuestionsMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the EXIT_QUESTIONS_MAP table that match the specified arbitrary SQL statement
	 */
	public ExitQuestions[] getQuestionsWithAnswers(int exitId) {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT E.*,ANSWER FROM EXIT_QUESTIONS E LEFT OUTER JOIN  EXIT_QUESTIONS_MAP EQM ON EQM.EXIT_QUESTION_ID=E.ID AND EQM.EXIT_ID=?";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setInt(1, exitId);
			// bind parameters
			rs = stmt.executeQuery();
			// fetch the results
			Collection<ExitQuestions> resultList = new ArrayList<ExitQuestions>();
			while (rs.next())
				resultList.add(new ExitQuestions(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4)));
			ExitQuestions ret[] = new ExitQuestions[resultList.size()];
			resultList.toArray(ret);
			return ret;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			return new ExitQuestions[] {};
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
