/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.RollOnDao;
import com.dikshatech.portal.dto.RollOn;
import com.dikshatech.portal.dto.RollOnPk;
import com.dikshatech.portal.exceptions.RollOnDaoException;

public class RollOnDaoImpl extends AbstractDAO implements RollOnDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(RollOnDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, EMP_ID, START_DATE, END_DATE, REPORT_DT, REPORT_TM, PERDIEM, CH_CODE_ID, PAYMENT_TERM, CURRENCY, CURRENT, RAISED_BY, MESSAGE_BODY, ESRQM_ID, CREATE_DATE, TRAVEL_REQ_FLAG, NOTIFIERS, COMMENTS, PROJECT_TYPE,ROLL_OFF_DATE FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, EMP_ID, START_DATE, END_DATE, REPORT_DT, REPORT_TM, PERDIEM, CH_CODE_ID, PAYMENT_TERM, CURRENCY, CURRENT, RAISED_BY, MESSAGE_BODY, ESRQM_ID, CREATE_DATE, TRAVEL_REQ_FLAG, NOTIFIERS, COMMENTS, PROJECT_TYPE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, EMP_ID = ?, START_DATE = ?, END_DATE = ?, REPORT_DT = ?, REPORT_TM = ?, PERDIEM = ?, CH_CODE_ID = ?, PAYMENT_TERM = ?, CURRENCY = ?, CURRENT = ?, RAISED_BY = ?, MESSAGE_BODY = ?, ESRQM_ID = ?, CREATE_DATE = ?, TRAVEL_REQ_FLAG = ?, NOTIFIERS = ?, COMMENTS = ? ,PROJECT_TYPE=? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column EMP_ID
	 */
	protected static final int		COLUMN_EMP_ID			= 2;
	/**
	 * Index of column START_DATE
	 */
	protected static final int		COLUMN_START_DATE		= 3;
	/**
	 * Index of column END_DATE
	 */
	protected static final int		COLUMN_END_DATE			= 4;
	/**
	 * Index of column REPORT_DT
	 */
	protected static final int		COLUMN_REPORT_DT		= 5;
	/**
	 * Index of column REPORT_TM
	 */
	protected static final int		COLUMN_REPORT_TM		= 6;
	/**
	 * Index of column PERDIEM
	 */
	protected static final int		COLUMN_PERDIEM			= 7;
	/**
	 * Index of column CH_CODE_ID
	 */
	protected static final int		COLUMN_CH_CODE_ID		= 8;
	/**
	 * Index of column PAYMENT_TERM
	 */
	protected static final int		COLUMN_PAYMENT_TERM		= 9;
	/**
	 * Index of column CURRENCY
	 */
	protected static final int		COLUMN_CURRENCY			= 10;
	/**
	 * Index of column CURRENT
	 */
	protected static final int		COLUMN_CURRENT			= 11;
	/**
	 * Index of column RAISED_BY
	 */
	protected static final int		COLUMN_RAISED_BY		= 12;
	/**
	 * Index of column MESSAGE_BODY
	 */
	protected static final int		COLUMN_MESSAGE_BODY		= 13;
	/**
	 * Index of column ESRQM_ID
	 */
	protected static final int		COLUMN_ESRQM_ID			= 14;
	/**
	 * Index of column CREATE_DATE
	 */
	protected static final int		COLUMN_CREATE_DATE		= 15;
	/**
	 * Index of column TRAVEL_REQ_FLAG
	 */
	protected static final int		COLUMN_TRAVEL_REQ_FLAG	= 16;
	/**
	 * Index of column NOTIFIERS
	 */
	protected static final int		COLUMN_NOTIFIERS		= 17;
	protected static final int		COLUMN_COMMENTS			= 18;
	protected static final int		COLUMN_PROJECT_TYPE		= 19;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 19;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the ROLL_ON table.
	 */
	public RollOnPk insert(RollOn dto) throws RollOnDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getEmpId());
			stmt.setDate(index++, dto.getStartDate() == null ? null : new java.sql.Date(dto.getStartDate().getTime()));
			stmt.setDate(index++, dto.getEndDate() == null ? null : new java.sql.Date(dto.getEndDate().getTime()));
			stmt.setDate(index++, dto.getReportDt() == null ? null : new java.sql.Date(dto.getReportDt().getTime()));
			stmt.setTime(index++, dto.getReportTm() == null ? null : new java.sql.Time(dto.getReportTm().getTime()));
			stmt.setString(index++, dto.getPerdiem());
			if (dto.isChCodeIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getChCodeId());
			}
			stmt.setString(index++, dto.getPaymentTerm());
			stmt.setString(index++, dto.getCurrency());
			stmt.setShort(index++, dto.getCurrent());
			stmt.setInt(index++, dto.getRaisedBy());
			stmt.setString(index++, dto.getMessageBody());
			stmt.setInt(index++, dto.getEsrqmId());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isTravelReqFlagNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getTravelReqFlag());
			}
			stmt.setString(index++, dto.getNotifiers());
			stmt.setString(index++, dto.getComments());
			stmt.setString(index++, dto.getProjectType());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new RollOnDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the ROLL_ON table.
	 */
	public void update(RollOnPk pk, RollOn dto) throws RollOnDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getEmpId());
			stmt.setDate(index++, dto.getStartDate() == null ? null : new java.sql.Date(dto.getStartDate().getTime()));
			stmt.setDate(index++, dto.getEndDate() == null ? null : new java.sql.Date(dto.getEndDate().getTime()));
			stmt.setDate(index++, dto.getReportDt() == null ? null : new java.sql.Date(dto.getReportDt().getTime()));
			stmt.setTime(index++, dto.getReportTm() == null ? null : new java.sql.Time(dto.getReportTm().getTime()));
			stmt.setString(index++, dto.getPerdiem());
			if (dto.isChCodeIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getChCodeId());
			}
			stmt.setString(index++, dto.getPaymentTerm());
			stmt.setString(index++, dto.getCurrency());
			stmt.setShort(index++, dto.getCurrent());
			stmt.setInt(index++, dto.getRaisedBy());
			stmt.setString(index++, dto.getMessageBody());
			stmt.setInt(index++, dto.getEsrqmId());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isTravelReqFlagNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getTravelReqFlag());
			}
			stmt.setString(index++, dto.getNotifiers());
			stmt.setString(index++, dto.getComments());
			stmt.setString(index++, dto.getProjectType());
			stmt.setInt(20, pk.getId());
			
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new RollOnDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the ROLL_ON table.
	 */
	public void delete(RollOnPk pk) throws RollOnDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new RollOnDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the ROLL_ON table that matches the specified primary-key value.
	 */
	public RollOn findByPrimaryKey(RollOnPk pk) throws RollOnDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'ID = :id'.
	 */
	public RollOn findByPrimaryKey(int id) throws RollOnDaoException {
		RollOn ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria ''.
	 */
	public RollOn[] findAll() throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'ID = :id'.
	 */
	public RollOn[] findWhereIdEquals(int id) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'EMP_ID = :empId'.
	 */
	public RollOn[] findWhereEmpIdEquals(int empId) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EMP_ID = ? ORDER BY EMP_ID", new Object[] { new Integer(empId) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'START_DATE = :startDate'.
	 */
	public RollOn[] findWhereStartDateEquals(Date startDate) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE START_DATE = ? ORDER BY START_DATE", new Object[] { startDate == null ? null : new java.sql.Date(startDate.getTime()) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'END_DATE = :endDate'.
	 */
	public RollOn[] findWhereEndDateEquals(Date endDate) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE END_DATE = ? ORDER BY END_DATE", new Object[] { endDate == null ? null : new java.sql.Date(endDate.getTime()) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'REPORT_DT = :reportDt'.
	 */
	public RollOn[] findWhereReportDtEquals(Date reportDt) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORT_DT = ? ORDER BY REPORT_DT", new Object[] { reportDt == null ? null : new java.sql.Date(reportDt.getTime()) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'REPORT_TM = :reportTm'.
	 */
	public RollOn[] findWhereReportTmEquals(Date reportTm) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORT_TM = ? ORDER BY REPORT_TM", new Object[] { reportTm == null ? null : new java.sql.Time(reportTm.getTime()) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'PERDIEM = :perdiem'.
	 */
	public RollOn[] findWherePerdiemEquals(String perdiem) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PERDIEM = ? ORDER BY PERDIEM", new Object[] { perdiem });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'CH_CODE_ID = :chCodeId'.
	 */
	public RollOn[] findWhereChCodeIdEquals(int chCodeId) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CH_CODE_ID = ? ORDER BY CH_CODE_ID", new Object[] { new Integer(chCodeId) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'PAYMENT_TERM = :paymentTerm'.
	 */
	public RollOn[] findWherePaymentTermEquals(String paymentTerm) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PAYMENT_TERM = ? ORDER BY PAYMENT_TERM", new Object[] { paymentTerm });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'CURRENCY = :currency'.
	 */
	public RollOn[] findWhereCurrencyEquals(String currency) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CURRENCY = ? ORDER BY CURRENCY", new Object[] { currency });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'CURRENT = :current'.
	 */
	public RollOn[] findWhereCurrentEquals(short current) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CURRENT = ? ORDER BY CURRENT", new Object[] { new Short(current) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'RAISED_BY = :raisedBy'.
	 */
	public RollOn[] findWhereRaisedByEquals(String raisedBy) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE RAISED_BY = ? ORDER BY RAISED_BY", new Object[] { raisedBy });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public RollOn[] findWhereMessageBodyEquals(String messageBody) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'ESRQM_ID = :esrqmId'.
	 */
	public RollOn[] findWhereEsrqmIdEquals(int esrqmId) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ESRQM_ID = ? ORDER BY ESRQM_ID", new Object[] { new Integer(esrqmId) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public RollOn[] findWhereCreateDateEquals(Date createDate) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate == null ? null : new java.sql.Timestamp(createDate.getTime()) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'TRAVEL_REQ_FLAG = :travelReqFlag'.
	 */
	public RollOn[] findWhereTravelReqFlagEquals(int travelReqFlag) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TRAVEL_REQ_FLAG = ? ORDER BY TRAVEL_REQ_FLAG", new Object[] { new Integer(travelReqFlag) });
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the criteria 'NOTIFIERS = :notifiers'.
	 */
	public RollOn[] findWhereNotifiersEquals(String notifiers) throws RollOnDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NOTIFIERS = ? ORDER BY NOTIFIERS", new Object[] { notifiers });
	}

	/**
	 * Method 'RollOnDaoImpl'
	 */
	public RollOnDaoImpl() {}

	/**
	 * Method 'RollOnDaoImpl'
	 * 
	 * @param userConn
	 */
	public RollOnDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "ROLL_ON";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected RollOn fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			RollOn dto = new RollOn();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected RollOn[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<RollOn> resultList = new ArrayList<RollOn>();
		while (rs.next()){
			RollOn dto = new RollOn();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		RollOn ret[] = new RollOn[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RollOn dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setEmpId(rs.getInt(COLUMN_EMP_ID));
		dto.setStartDate(rs.getDate(COLUMN_START_DATE));
		dto.setEndDate(rs.getDate(COLUMN_END_DATE));
		dto.setReportDt(rs.getDate(COLUMN_REPORT_DT));
		dto.setReportTm(rs.getTime(COLUMN_REPORT_TM));
		dto.setPerdiem(rs.getString(COLUMN_PERDIEM));
		dto.setChCodeId(rs.getInt(COLUMN_CH_CODE_ID));
		if (rs.wasNull()){
			dto.setChCodeIdNull(true);
		}
		dto.setPaymentTerm(rs.getString(COLUMN_PAYMENT_TERM));
		dto.setCurrency(rs.getString(COLUMN_CURRENCY));
		dto.setCurrent(rs.getShort(COLUMN_CURRENT));
		dto.setRaisedBy(rs.getInt(COLUMN_RAISED_BY));
		dto.setMessageBody(rs.getString(COLUMN_MESSAGE_BODY));
		dto.setEsrqmId(rs.getInt(COLUMN_ESRQM_ID));
		dto.setCreateDate(rs.getTimestamp(COLUMN_CREATE_DATE));
		dto.setTravelReqFlag(rs.getInt(COLUMN_TRAVEL_REQ_FLAG));	
		if (rs.wasNull()){
			dto.setTravelReqFlagNull(true);
		}
		dto.setNotifiers(rs.getString(COLUMN_NOTIFIERS));
		try{
			dto.setComments(rs.getString(COLUMN_COMMENTS));
			dto.setProjectType(rs.getString(COLUMN_PROJECT_TYPE));
			dto.setRollOffDate(rs.getDate(20));
		} catch (Exception e){}
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RollOn dto) {}

	/**
	 * Returns all rows from the ROLL_ON table that match the specified arbitrary SQL statement
	 */
	public RollOn[] findByDynamicSelect(String sql, Object[] sqlParams) throws RollOnDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new RollOnDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the ROLL_ON table that match the specified arbitrary SQL statement
	 */
	public RollOn[] findByDynamicWhere(String sql, Object[] sqlParams) throws RollOnDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new RollOnDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public boolean inactiveRollOnData(int userId) {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		boolean isDone = false;
		String SQL = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			SQL = "UPDATE ROLL_ON SET ROLL_OFF_DATE=NOW(),CURRENT=0 WHERE CURRENT=1 AND EMP_ID=" + userId + "";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();
			isDone = true;
		} catch (Exception e){
			e.printStackTrace();
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return isDone;
	}
	/*@Override
	public int findLastRolledOn(int userId){

		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String SQL = null;
		int id = 0 ;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			SQL = "SELECT ID FROM ROLL_ON WHERE EMP_ID="+userId+" ORDER BY ID DESC LIMIT 0,1";
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
			stmt = conn.prepareStatement(SQL);
			rs = stmt.executeQuery(SQL);
			rs.next();
			id=rs.getInt("ID");						
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		}
		return id;
	}*/
}
