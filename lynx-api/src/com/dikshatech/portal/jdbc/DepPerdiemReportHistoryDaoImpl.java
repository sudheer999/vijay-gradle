/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.common.utils.DesEncrypterDecrypter;
import com.dikshatech.portal.dao.DepPerdiemReportHistoryDao;
import com.dikshatech.portal.dto.DepPerdiemReportHistory;
import com.dikshatech.portal.dto.DepPerdiemReportHistoryPk;
import com.dikshatech.portal.exceptions.DepPerdiemReportHistoryDaoException;

public class DepPerdiemReportHistoryDaoImpl extends AbstractDAO implements DepPerdiemReportHistoryDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger		= Logger.getLogger(DepPerdiemReportHistoryDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT	= "SELECT ID, REP_ID, PAYABLE_DAYS, PERDIEM, CURRENCY_TYPE, AMOUNT, AMOUNT_INR, TOTAL, MODIFIED_BY, MODIFIED_ON, COMMENTS, TYPE FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT	= "INSERT INTO " + getTableName() + " ( ID, REP_ID, PAYABLE_DAYS, PERDIEM, CURRENCY_TYPE, AMOUNT, AMOUNT_INR, TOTAL, MODIFIED_BY, MODIFIED_ON, COMMENTS, TYPE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE	= "UPDATE " + getTableName() + " SET ID = ?, REP_ID = ?, PAYABLE_DAYS = ?, PERDIEM = ?, CURRENCY_TYPE = ?, AMOUNT = ?, AMOUNT_INR = ? ,TOTAL = ? MODIFIED_BY = ?, MODIFIED_ON = ?, COMMENTS = ?, TYPE = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE	= "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/**
	 * Inserts a new row in the dep_perdiem_report_history table.
	 */
	public DepPerdiemReportHistoryPk insert(DepPerdiemReportHistory dto) throws DepPerdiemReportHistoryDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getRepId());
			stmt.setFloat(index++, dto.getPayableDays());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getPerdiem()));
			stmt.setShort(index++, dto.getCurrencyType());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAmount()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAmountInr()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getTotal()));
			stmt.setString(index++, dto.getModifiedBy());
			stmt.setTimestamp(index++, dto.getModifiedOn() == null ? null : new java.sql.Timestamp(dto.getModifiedOn().getTime()));
			stmt.setString(index++, dto.getComments());
			stmt.setShort(index++, dto.getType());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DepPerdiemReportHistoryDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the dep_perdiem_report_history table.
	 */
	public void update(DepPerdiemReportHistoryPk pk, DepPerdiemReportHistory dto) throws DepPerdiemReportHistoryDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getRepId());
			stmt.setFloat(index++, dto.getPayableDays());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getPerdiem()));
			stmt.setShort(index++, dto.getCurrencyType());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAmount()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getAmountInr()));
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getTotal()));
			stmt.setShort(index++, dto.getCurrencyType());
			stmt.setString(index++, dto.getModifiedBy());
			stmt.setTimestamp(index++, dto.getModifiedOn() == null ? null : new java.sql.Timestamp(dto.getModifiedOn().getTime()));
			stmt.setString(index++, dto.getComments());
			stmt.setShort(index++, dto.getType());
			stmt.setInt(index++, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DepPerdiemReportHistoryDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the dep_perdiem_report_history table.
	 */
	public void delete(DepPerdiemReportHistoryPk pk) throws DepPerdiemReportHistoryDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DepPerdiemReportHistoryDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the dep_perdiem_report_history table that matches the specified primary-key value.
	 */
	public DepPerdiemReportHistory findByPrimaryKey(DepPerdiemReportHistoryPk pk) throws DepPerdiemReportHistoryDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the criteria 'ID = :id'.
	 */
	public DepPerdiemReportHistory findByPrimaryKey(int id) throws DepPerdiemReportHistoryDaoException {
		DepPerdiemReportHistory ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the criteria ''.
	 */
	public DepPerdiemReportHistory[] findAll() throws DepPerdiemReportHistoryDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the criteria 'REP_ID = :repId'.
	 */
	public DepPerdiemReportHistory[] findByDepPerdiemReport(int repId) throws DepPerdiemReportHistoryDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REP_ID = ? ORDER BY ID DESC", new Object[] { new Integer(repId) });
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the criteria 'REP_ID = :repId'.
	 */
	public DepPerdiemReportHistory[] findWhereRepIdEquals(int repId) throws DepPerdiemReportHistoryDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REP_ID = ? ORDER BY REP_ID", new Object[] { new Integer(repId) });
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the criteria 'IS_DELETED = :isDeleted'.
	 */
	public DepPerdiemReportHistory[] findWhereIsDeletedEquals(short isDeleted) throws DepPerdiemReportHistoryDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE IS_DELETED = ? ORDER BY IS_DELETED", new Object[] { new Short(isDeleted) });
	}

	/**
	 * Method 'DepPerdiemReportHistoryDaoImpl'
	 */
	public DepPerdiemReportHistoryDaoImpl() {}

	/**
	 * Method 'DepPerdiemReportHistoryDaoImpl'
	 * 
	 * @param userConn
	 */
	public DepPerdiemReportHistoryDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "DEP_PERDIEM_REPORT_HISTORY";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected DepPerdiemReportHistory fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			DepPerdiemReportHistory dto = new DepPerdiemReportHistory();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected DepPerdiemReportHistory[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<DepPerdiemReportHistory> resultList = new ArrayList<DepPerdiemReportHistory>();
		while (rs.next()){
			DepPerdiemReportHistory dto = new DepPerdiemReportHistory();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		DepPerdiemReportHistory ret[] = new DepPerdiemReportHistory[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DepPerdiemReportHistory dto, ResultSet rs) throws SQLException {
		int index = 1;
		dto.setId(rs.getInt(index++));
		dto.setRepId(rs.getInt(index++));
		dto.setPayableDays(rs.getFloat(index++));
		try{
			int columnid = index++;
			dto.setPerdiem(new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(columnid)))));
		} catch (Exception e){}
		dto.setCurrencyType(rs.getShort(index++));
		try{
			int columnid = index++;
			dto.setAmount(new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(columnid)))));
		} catch (Exception e){}
		try{
			int columnid = index++;
			dto.setAmountInr(new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(columnid)))));
		} catch (Exception e){}
		try{
			int columnid = index++;
			dto.setTotal(new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(columnid)))));
		} catch (Exception e){}
		dto.setModifiedBy(rs.getString(index++));
		dto.setModifiedOn(rs.getTimestamp(index++));
		dto.setComments(rs.getString(index++));
		dto.setType(rs.getShort(index++));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DepPerdiemReportHistory dto) {}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the specified arbitrary SQL statement
	 */
	public DepPerdiemReportHistory[] findByDynamicSelect(String sql, Object[] sqlParams) throws DepPerdiemReportHistoryDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DepPerdiemReportHistoryDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the dep_perdiem_report_history table that match the specified arbitrary SQL statement
	 */
	public DepPerdiemReportHistory[] findByDynamicWhere(String sql, Object[] sqlParams) throws DepPerdiemReportHistoryDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DepPerdiemReportHistoryDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
