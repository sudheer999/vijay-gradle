/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class FbpDetailsDaoImpl extends AbstractDAO implements FbpDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( FbpDetailsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, FBP_ID, FBP, ELIGIBLE_AMT, USED_AMT, UNUSED_AMT FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, FBP_ID, FBP, ELIGIBLE_AMT, USED_AMT, UNUSED_AMT ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, FBP_ID = ?, FBP = ?, ELIGIBLE_AMT = ?, USED_AMT = ?, UNUSED_AMT = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column FBP_ID
	 */
	protected static final int COLUMN_FBP_ID = 2;

	/** 
	 * Index of column FBP
	 */
	protected static final int COLUMN_FBP = 3;

	/** 
	 * Index of column ELIGIBLE_AMT
	 */
	protected static final int COLUMN_ELIGIBLE_AMT = 4;

	/** 
	 * Index of column USED_AMT
	 */
	protected static final int COLUMN_USED_AMT = 5;

	/** 
	 * Index of column UNUSED_AMT
	 */
	protected static final int COLUMN_UNUSED_AMT = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the FBP_DETAILS table.
	 */
	public FbpDetailsPk insert(FbpDetails dto) throws FbpDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isFbpIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFbpId() );
			}
		
			stmt.setString( index++, dto.getFbp() );
			stmt.setString( index++, dto.getEligibleAmt() );
			stmt.setString( index++, dto.getUsedAmt() );
			stmt.setString( index++, dto.getUnusedAmt() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the FBP_DETAILS table.
	 */
	public void update(FbpDetailsPk pk, FbpDetails dto) throws FbpDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isFbpIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFbpId() );
			}
		
			stmt.setString( index++, dto.getFbp() );
			stmt.setString( index++, dto.getEligibleAmt() );
			stmt.setString( index++, dto.getUsedAmt() );
			stmt.setString( index++, dto.getUnusedAmt() );
			stmt.setInt( 7, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the FBP_DETAILS table.
	 */
	public void delete(FbpDetailsPk pk) throws FbpDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the FBP_DETAILS table that matches the specified primary-key value.
	 */
	public FbpDetails findByPrimaryKey(FbpDetailsPk pk) throws FbpDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'ID = :id'.
	 */
	public FbpDetails findByPrimaryKey(int id) throws FbpDetailsDaoException
	{
		FbpDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria ''.
	 */
	public FbpDetails[] findAll() throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'FBP_ID = :fbpId'.
	 */
	public FbpDetails[] findByFbpReq(int fbpId) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FBP_ID = ?", new Object[] {  new Integer(fbpId) } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'ID = :id'.
	 */
	public FbpDetails[] findWhereIdEquals(int id) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'FBP_ID = :fbpId'.
	 */
	public FbpDetails[] findWhereFbpIdEquals(int fbpId) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FBP_ID = ? ORDER BY FBP_ID", new Object[] {  new Integer(fbpId) } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'FBP = :fbp'.
	 */
	public FbpDetails[] findWhereFbpEquals(String fbp) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FBP = ? ORDER BY FBP", new Object[] { fbp } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'ELIGIBLE_AMT = :eligibleAmt'.
	 */
	public FbpDetails[] findWhereEligibleAmtEquals(String eligibleAmt) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ELIGIBLE_AMT = ? ORDER BY ELIGIBLE_AMT", new Object[] { eligibleAmt } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'USED_AMT = :usedAmt'.
	 */
	public FbpDetails[] findWhereUsedAmtEquals(String usedAmt) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USED_AMT = ? ORDER BY USED_AMT", new Object[] { usedAmt } );
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the criteria 'UNUSED_AMT = :unusedAmt'.
	 */
	public FbpDetails[] findWhereUnusedAmtEquals(String unusedAmt) throws FbpDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNUSED_AMT = ? ORDER BY UNUSED_AMT", new Object[] { unusedAmt } );
	}

	/**
	 * Method 'FbpDetailsDaoImpl'
	 * 
	 */
	public FbpDetailsDaoImpl()
	{
	}

	/**
	 * Method 'FbpDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public FbpDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "FBP_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected FbpDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			FbpDetails dto = new FbpDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected FbpDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<FbpDetails> resultList = new ArrayList<FbpDetails>();
		while (rs.next()) {
			FbpDetails dto = new FbpDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		FbpDetails ret[] = new FbpDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(FbpDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setFbpId( rs.getInt( COLUMN_FBP_ID ) );
		if (rs.wasNull()) {
			dto.setFbpIdNull( true );
		}
		
		dto.setFbp( rs.getString( COLUMN_FBP ) );
		dto.setEligibleAmt( rs.getString( COLUMN_ELIGIBLE_AMT ) );
		dto.setUsedAmt( rs.getString( COLUMN_USED_AMT ) );
		dto.setUnusedAmt( rs.getString( COLUMN_UNUSED_AMT ) );
	}
	
	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(FbpDetails dto)
	{
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the specified arbitrary SQL statement
	 */
	public FbpDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws FbpDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the FBP_DETAILS table that match the specified arbitrary SQL statement
	 */
	public FbpDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws FbpDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	@Override
	public FbpDetails[] findByFbpReq(String sql, Object[] sqlParams) throws FbpDetailsDaoException {
		// declare variables
				final boolean isConnSupplied = (userConn != null);
				Connection conn = null;
				PreparedStatement stmt = null;
				ResultSet rs = null;
				
				try {
					// get the user-specified connection or get a connection from the ResourceManager
					conn = isConnSupplied ? userConn : ResourceManager.getConnection();
				
					// construct the SQL statement
					final String SQL = sql;
				
				
					if (logger.isDebugEnabled()) {
						logger.debug( "Executing " + SQL);
					}
				
					// prepare statement
					stmt = conn.prepareStatement( SQL );
					stmt.setMaxRows( maxRows );
				
					// bind parameters
					for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
						stmt.setObject( i+1, sqlParams[i] );
					}
				
				
					rs = stmt.executeQuery();
				
					// fetch the results
					return fetchMultiResults(rs);
				}
				catch (Exception _e) {
					logger.error( "Exception: " + _e.getMessage(), _e );
					throw new FbpDetailsDaoException( "Exception: " + _e.getMessage(), _e );
				}
				finally {
					ResourceManager.close(rs);
					ResourceManager.close(stmt);
					if (!isConnSupplied) {
						ResourceManager.close(conn);
					}
				
				}
	}
	

}