/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.RegionsDao;
import com.dikshatech.portal.dto.Regions;
import com.dikshatech.portal.dto.RegionsPk;
import com.dikshatech.portal.exceptions.RegionsDaoException;

public class RegionsDaoImpl extends AbstractDAO implements RegionsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( RegionsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, COMPANY_ID, REG_NAME, REF_ABBREVIATION, PARENT_ID, CREATE_DATE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, COMPANY_ID, REG_NAME, REF_ABBREVIATION, PARENT_ID, CREATE_DATE ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, COMPANY_ID = ?, REG_NAME = ?, REF_ABBREVIATION = ?, PARENT_ID = ?, CREATE_DATE = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column COMPANY_ID
	 */
	protected static final int COLUMN_COMPANY_ID = 2;

	/** 
	 * Index of column REG_NAME
	 */
	protected static final int COLUMN_REG_NAME = 3;

	/** 
	 * Index of column REF_ABBREVIATION
	 */
	protected static final int COLUMN_REF_ABBREVIATION = 4;

	/** 
	 * Index of column PARENT_ID
	 */
	protected static final int COLUMN_PARENT_ID = 5;

	/** 
	 * Index of column CREATE_DATE
	 */
	protected static final int COLUMN_CREATE_DATE = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the REGIONS table.
	 */
	public RegionsPk insert(Regions dto) throws RegionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getCompanyId() );
			stmt.setString( index++, dto.getRegName() );
			stmt.setString( index++, dto.getRefAbbreviation() );
			if (dto.isParentIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getParentId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the REGIONS table.
	 */
	public void update(RegionsPk pk, Regions dto) throws RegionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getCompanyId() );
			stmt.setString( index++, dto.getRegName() );
			stmt.setString( index++, dto.getRefAbbreviation() );
			if (dto.isParentIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getParentId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			stmt.setInt( 7, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the REGIONS table.
	 */
	public void delete(RegionsPk pk) throws RegionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the REGIONS table that matches the specified primary-key value.
	 */
	public Regions findByPrimaryKey(RegionsPk pk) throws RegionsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'ID = :id'.
	 */
	public Regions findByPrimaryKey(int id) throws RegionsDaoException
	{
		Regions ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria ''.
	 */
	public Regions[] findAll() throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'COMPANY_ID = :companyId'.
	 */
	public Regions[] findByCompany(int companyId) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPANY_ID = ?", new Object[] {  new Integer(companyId) } );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'ID = :id'.
	 */
	public Regions[] findWhereIdEquals(int id) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'COMPANY_ID = :companyId'.
	 */
	public Regions[] findWhereCompanyIdEquals(int companyId) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPANY_ID = ? ORDER BY COMPANY_ID", new Object[] {  new Integer(companyId) } );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'REG_NAME = :regName'.
	 */
	public Regions findWhereRegNameEquals(String regName) throws RegionsDaoException
	{
		Regions ret[] = findByDynamicSelect( SQL_SELECT + " WHERE REG_NAME = ?", new Object[] { regName } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'REF_ABBREVIATION = :refAbbreviation'.
	 */
	public Regions[] findWhereRefAbbreviationEquals(String refAbbreviation) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REF_ABBREVIATION = ? ORDER BY REF_ABBREVIATION", new Object[] { refAbbreviation } );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'PARENT_ID = :parentId'.
	 */
	public Regions[] findWhereParentIdEquals(int parentId) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARENT_ID = ? ORDER BY PARENT_ID", new Object[] {  new Integer(parentId) } );
	}

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Regions[] findWhereCreateDateEquals(Date createDate) throws RegionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate==null ? null : new java.sql.Timestamp( createDate.getTime() ) } );
	}
	
	
	

	/**
	 * Method 'RegionsDaoImpl'
	 * 
	 */
	public RegionsDaoImpl()
	{
	}

	/**
	 * Method 'RegionsDaoImpl'
	 * 
	 * @param userConn
	 */
	public RegionsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "REGIONS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Regions fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Regions dto = new Regions();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Regions[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Regions> resultList = new ArrayList<Regions>();
		while (rs.next()) {
			Regions dto = new Regions();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Regions ret[] = new Regions[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	

	

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Regions dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setCompanyId( rs.getInt( COLUMN_COMPANY_ID ) );
		dto.setRegName( rs.getString( COLUMN_REG_NAME ) );
		dto.setRefAbbreviation( rs.getString( COLUMN_REF_ABBREVIATION ) );
		dto.setParentId( rs.getInt( COLUMN_PARENT_ID ) );
		if (rs.wasNull()) {
			dto.setParentIdNull( true );
		}
		
		dto.setCreateDate( rs.getTimestamp(COLUMN_CREATE_DATE ) );
	}
	
	
	


	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Regions dto)
	{
	}

	/** 
	 * Returns all rows from the REGIONS table that match the specified arbitrary SQL statement
	 */
	public Regions[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegionsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the REGIONS table that match the specified arbitrary SQL statement
	 */
	public Regions[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegionsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public Regions findByLevelId(int levelId) throws RegionsDaoException
	{
		Regions ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = (SELECT REGION_ID FROM DIVISON D LEFT JOIN LEVELS L ON L.DIVISION_ID =  D.ID WHERE L.ID = ?)", new Object[] { levelId } );
		return ret.length==0 ? null : ret[0];
	}

	@Override
	public int getRegionId(int userId) throws Exception {
		String regionIdQuery = "SELECT REGION_ID FROM DIVISON D WHERE D.ID =(SELECT DIVISION_ID FROM LEVELS L WHERE L.ID=(" +
		"SELECT LEVEL_ID FROM PROFILE_INFO PI WHERE PI.ID=(SELECT PROFILE_ID FROM USERS U WHERE U.ID="+userId+")))";
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + regionIdQuery);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( regionIdQuery );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			if(rs.next()){
				return rs.getInt("REGION_ID");
			}
			
			return 0;
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RegionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}		
	}


	
	

}
