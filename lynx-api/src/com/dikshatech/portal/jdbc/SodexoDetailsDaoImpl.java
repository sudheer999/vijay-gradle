/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.SodexoDetailsDao;
import com.dikshatech.portal.dto.SodexoDetails;
import com.dikshatech.portal.dto.SodexoDetailsPk;
import com.dikshatech.portal.exceptions.SodexoDetailsDaoException;

public class SodexoDetailsDaoImpl extends AbstractDAO implements SodexoDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( SodexoDetailsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, REQUESTOR_ID, AMOUNT_ELIGIBLE, AMOUNT_AVAILED, REQUESTED_ON, STATUS, SR_TYPE, DELIVERY_ADDRESS, ADDRESS_HTML, ADDRESS_FLAG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, REQUESTOR_ID, AMOUNT_ELIGIBLE, AMOUNT_AVAILED, REQUESTED_ON, STATUS, SR_TYPE, DELIVERY_ADDRESS, ADDRESS_HTML, ADDRESS_FLAG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, REQUESTOR_ID = ?, AMOUNT_ELIGIBLE = ?, AMOUNT_AVAILED = ?, REQUESTED_ON = ?, STATUS = ?, SR_TYPE = ?, DELIVERY_ADDRESS = ?, ADDRESS_HTML = ?, ADDRESS_FLAG = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column REQUESTOR_ID
	 */
	protected static final int COLUMN_REQUESTOR_ID = 2;

	/** 
	 * Index of column AMOUNT_ELIGIBLE
	 */
	protected static final int COLUMN_AMOUNT_ELIGIBLE = 3;

	/** 
	 * Index of column AMOUNT_AVAILED
	 */
	protected static final int COLUMN_AMOUNT_AVAILED = 4;

	/** 
	 * Index of column REQUESTED_ON
	 */
	protected static final int COLUMN_REQUESTED_ON = 5;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 6;

	/** 
	 * Index of column SR_TYPE
	 */
	protected static final int COLUMN_SR_TYPE = 7;

	/** 
	 * Index of column DELIVERY_ADDRESS
	 */
	protected static final int COLUMN_DELIVERY_ADDRESS = 8;

	/** 
	 * Index of column ADDRESS_HTML
	 */
	protected static final int COLUMN_ADDRESS_HTML = 9;

	/** 
	 * Index of column ADDRESS_FLAG
	 */
	protected static final int COLUMN_ADDRESS_FLAG = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the SODEXO_DETAILS table.
	 */
	public SodexoDetailsPk insert(SodexoDetails dto) throws SodexoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isRequestorIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequestorId() );
			}
		
			if (dto.isAmountEligibleNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAmountEligible() );
			}
		
			if (dto.isAmountAvailedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAmountAvailed() );
			}
		
			stmt.setTimestamp(index++, dto.getRequestedOn()==null ? null : new java.sql.Timestamp( dto.getRequestedOn().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			stmt.setString( index++, dto.getSrType() );
			stmt.setString( index++, dto.getDeliveryAddress() );
			stmt.setString( index++, dto.getAddressHtml() );
			if (dto.isAddressFlagNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAddressFlag() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SODEXO_DETAILS table.
	 */
	public void update(SodexoDetailsPk pk, SodexoDetails dto) throws SodexoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isRequestorIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequestorId() );
			}
		
			if (dto.isAmountEligibleNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAmountEligible() );
			}
		
			if (dto.isAmountAvailedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAmountAvailed() );
			}
		
			stmt.setTimestamp(index++, dto.getRequestedOn()==null ? null : new java.sql.Timestamp( dto.getRequestedOn().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			stmt.setString( index++, dto.getSrType() );
			stmt.setString( index++, dto.getDeliveryAddress() );
			stmt.setString( index++, dto.getAddressHtml() );
			if (dto.isAddressFlagNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAddressFlag() );
			}
		
			stmt.setInt( 11, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SODEXO_DETAILS table.
	 */
	public void delete(SodexoDetailsPk pk) throws SodexoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SODEXO_DETAILS table that matches the specified primary-key value.
	 */
	public SodexoDetails findByPrimaryKey(SodexoDetailsPk pk) throws SodexoDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SodexoDetails findByPrimaryKey(int id) throws SodexoDetailsDaoException
	{
		SodexoDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria ''.
	 */
	public SodexoDetails[] findAll() throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SodexoDetails[] findWhereIdEquals(int id) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'REQUESTOR_ID = :requestorId'.
	 */
	public SodexoDetails[] findWhereRequestorIdEquals(int requestorId) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTOR_ID = ? ORDER BY REQUESTOR_ID", new Object[] {  new Integer(requestorId) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'AMOUNT_ELIGIBLE = :amountEligible'.
	 */
	public SodexoDetails[] findWhereAmountEligibleEquals(int amountEligible) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AMOUNT_ELIGIBLE = ? ORDER BY AMOUNT_ELIGIBLE", new Object[] {  new Integer(amountEligible) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'AMOUNT_AVAILED = :amountAvailed'.
	 */
	public SodexoDetails[] findWhereAmountAvailedEquals(int amountAvailed) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AMOUNT_AVAILED = ? ORDER BY AMOUNT_AVAILED", new Object[] {  new Integer(amountAvailed) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'REQUESTED_ON = :requestedOn'.
	 */
	public SodexoDetails[] findWhereRequestedOnEquals(Date requestedOn) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTED_ON = ? ORDER BY REQUESTED_ON", new Object[] { requestedOn==null ? null : new java.sql.Timestamp( requestedOn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'STATUS = :status'.
	 */
	public SodexoDetails[] findWhereStatusEquals(int status) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] {  new Integer(status) } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'SR_TYPE = :srType'.
	 */
	public SodexoDetails[] findWhereSrTypeEquals(String srType) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SR_TYPE = ? ORDER BY SR_TYPE", new Object[] { srType } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'DELIVERY_ADDRESS = :deliveryAddress'.
	 */
	public SodexoDetails[] findWhereDeliveryAddressEquals(String deliveryAddress) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DELIVERY_ADDRESS = ? ORDER BY DELIVERY_ADDRESS", new Object[] { deliveryAddress } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'ADDRESS_HTML = :addressHtml'.
	 */
	public SodexoDetails[] findWhereAddressHtmlEquals(String addressHtml) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADDRESS_HTML = ? ORDER BY ADDRESS_HTML", new Object[] { addressHtml } );
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the criteria 'ADDRESS_FLAG = :addressFlag'.
	 */
	public SodexoDetails[] findWhereAddressFlagEquals(int addressFlag) throws SodexoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADDRESS_FLAG = ? ORDER BY ADDRESS_FLAG", new Object[] {  new Integer(addressFlag) } );
	}

	/**
	 * Method 'SodexoDetailsDaoImpl'
	 * 
	 */
	public SodexoDetailsDaoImpl()
	{
	}

	/**
	 * Method 'SodexoDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public SodexoDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SODEXO_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SodexoDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SodexoDetails dto = new SodexoDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SodexoDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<SodexoDetails> resultList = new ArrayList<SodexoDetails>();
		while (rs.next()) {
			SodexoDetails dto = new SodexoDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SodexoDetails ret[] = new SodexoDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SodexoDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setRequestorId( rs.getInt( COLUMN_REQUESTOR_ID ) );
		if (rs.wasNull()) {
			dto.setRequestorIdNull( true );
		}
		
		dto.setAmountEligible( rs.getInt( COLUMN_AMOUNT_ELIGIBLE ) );
		if (rs.wasNull()) {
			dto.setAmountEligibleNull( true );
		}
		
		dto.setAmountAvailed( rs.getInt( COLUMN_AMOUNT_AVAILED ) );
		if (rs.wasNull()) {
			dto.setAmountAvailedNull( true );
		}
		
		dto.setRequestedOn( rs.getTimestamp(COLUMN_REQUESTED_ON ) );
		dto.setStatus( rs.getInt( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
		dto.setSrType( rs.getString( COLUMN_SR_TYPE ) );
		dto.setDeliveryAddress( rs.getString( COLUMN_DELIVERY_ADDRESS ) );
		dto.setAddressHtml( rs.getString( COLUMN_ADDRESS_HTML ) );
		dto.setAddressFlag( rs.getInt( COLUMN_ADDRESS_FLAG ) );
		if (rs.wasNull()) {
			dto.setAddressFlagNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SodexoDetails dto)
	{
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SodexoDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws SodexoDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SODEXO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SodexoDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws SodexoDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	@Override
	public SodexoDetails[] findByDynamicWhereIn(String sql) throws SodexoDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters not required in this case 
					
			
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SodexoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
	}

}
