/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.EducationInfoDao;
import com.dikshatech.portal.dto.EducationInfo;
import com.dikshatech.portal.dto.EducationInfoPk;
import com.dikshatech.portal.exceptions.EducationInfoDaoException;

public class EducationInfoDaoImpl extends AbstractDAO implements EducationInfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( EducationInfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, DEGREE_COURSE, TYPE, SUBJECT_MAJOR, START_DATE, YEAR_PASSING, STUD_ID_NO_ENROLL_NO, COLLEGE_UNIVERSITY, GRADE_PERCENTAGE, GRADUTION_DATE, CANDIDATE_ID, USER_ID, SEQUENCE, MODIFIED_BY FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, DEGREE_COURSE, TYPE, SUBJECT_MAJOR, START_DATE, YEAR_PASSING, STUD_ID_NO_ENROLL_NO, COLLEGE_UNIVERSITY, GRADE_PERCENTAGE, GRADUTION_DATE, CANDIDATE_ID, USER_ID, SEQUENCE, MODIFIED_BY ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, DEGREE_COURSE = ?, TYPE = ?, SUBJECT_MAJOR = ?, START_DATE = ?, YEAR_PASSING = ?, STUD_ID_NO_ENROLL_NO = ?, COLLEGE_UNIVERSITY = ?, GRADE_PERCENTAGE = ?, GRADUTION_DATE = ?, CANDIDATE_ID = ?, USER_ID = ?, SEQUENCE = ?, MODIFIED_BY=? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column DEGREE_COURSE
	 */
	protected static final int COLUMN_DEGREE_COURSE = 2;

	/** 
	 * Index of column TYPE
	 */
	protected static final int COLUMN_TYPE = 3;

	/** 
	 * Index of column SUBJECT_MAJOR
	 */
	protected static final int COLUMN_SUBJECT_MAJOR = 4;

	/** 
	 * Index of column START_DATE
	 */
	protected static final int COLUMN_START_DATE = 5;

	/** 
	 * Index of column YEAR_PASSING
	 */
	protected static final int COLUMN_YEAR_PASSING = 6;

	/** 
	 * Index of column STUD_ID_NO_ENROLL_NO
	 */
	protected static final int COLUMN_STUD_ID_NO_ENROLL_NO = 7;

	/** 
	 * Index of column COLLEGE_UNIVERSITY
	 */
	protected static final int COLUMN_COLLEGE_UNIVERSITY = 8;

	/** 
	 * Index of column GRADE_PERCENTAGE
	 */
	protected static final int COLUMN_GRADE_PERCENTAGE = 9;

	/** 
	 * Index of column GRADUTION_DATE
	 */
	protected static final int COLUMN_GRADUTION_DATE = 10;

	/** 
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 11;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 12;

	/** 
	 * Index of column SEQUENCE
	 */
	protected static final int COLUMN_SEQUENCE = 13;
	/** 
	 * Index of column MODIFIED_BY
	 */
	protected static final int COLUMN_MODIFIED_BY = 14;
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the EDUCATION_INFO table.
	 */
	public EducationInfoPk insert(EducationInfo dto) throws EducationInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getDegreeCourse() );
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getSubjectMajor() );
			stmt.setString( index++, dto.getStartDate() );
			if (dto.isYearPassingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getYearPassing() );
			}
		
			stmt.setString( index++, dto.getStudIdNoEnrollNo() );
			stmt.setString( index++, dto.getCollegeUniversity() );
			stmt.setString( index++, dto.getGradePercentage() );
			stmt.setString( index++, dto.getGradutionDate() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
			stmt.setInt( index++, dto.getModifiedBy());
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new EducationInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the EDUCATION_INFO table.
	 */
	public void update(EducationInfoPk pk, EducationInfo dto) throws EducationInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getDegreeCourse() );
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getSubjectMajor() );
			stmt.setString( index++, dto.getStartDate() );
			if (dto.isYearPassingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getYearPassing() );
			}
		
			stmt.setString( index++, dto.getStudIdNoEnrollNo() );
			stmt.setString( index++, dto.getCollegeUniversity() );
			stmt.setString( index++, dto.getGradePercentage() );
			stmt.setString( index++, dto.getGradutionDate() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
			stmt.setInt( index++, dto.getModifiedBy());
			stmt.setInt( 15, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new EducationInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the EDUCATION_INFO table.
	 */
	public void delete(EducationInfoPk pk) throws EducationInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new EducationInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the EDUCATION_INFO table that matches the specified primary-key value.
	 */
	public EducationInfo findByPrimaryKey(EducationInfoPk pk) throws EducationInfoDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'ID = :id'.
	 */
	public EducationInfo findByPrimaryKey(int id) throws EducationInfoDaoException
	{
		EducationInfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria ''.
	 */
	public EducationInfo[] findAll() throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'ID = :id'.
	 */
	public EducationInfo[] findWhereIdEquals(int id) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'DEGREE_COURSE = :degreeCourse'.
	 */
	public EducationInfo[] findWhereDegreeCourseEquals(String degreeCourse) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEGREE_COURSE = ? ORDER BY DEGREE_COURSE", new Object[] { degreeCourse } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'TYPE = :type'.
	 */
	public EducationInfo[] findWhereTypeEquals(String type) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TYPE = ? ORDER BY TYPE", new Object[] { type } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'SUBJECT_MAJOR = :subjectMajor'.
	 */
	public EducationInfo[] findWhereSubjectMajorEquals(String subjectMajor) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBJECT_MAJOR = ? ORDER BY SUBJECT_MAJOR", new Object[] { subjectMajor } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'START_DATE = :startDate'.
	 */
	public EducationInfo[] findWhereStartDateEquals(String startDate) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE START_DATE = ? ORDER BY START_DATE", new Object[] { startDate } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'YEAR_PASSING = :yearPassing'.
	 */
	public EducationInfo[] findWhereYearPassingEquals(int yearPassing) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE YEAR_PASSING = ? ORDER BY YEAR_PASSING", new Object[] {  new Integer(yearPassing) } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'STUD_ID_NO_ENROLL_NO = :studIdNoEnrollNo'.
	 */
	public EducationInfo[] findWhereStudIdNoEnrollNoEquals(String studIdNoEnrollNo) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STUD_ID_NO_ENROLL_NO = ? ORDER BY STUD_ID_NO_ENROLL_NO", new Object[] { studIdNoEnrollNo } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'COLLEGE_UNIVERSITY = :collegeUniversity'.
	 */
	public EducationInfo[] findWhereCollegeUniversityEquals(String collegeUniversity) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COLLEGE_UNIVERSITY = ? ORDER BY COLLEGE_UNIVERSITY", new Object[] { collegeUniversity } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'GRADE_PERCENTAGE = :gradePercentage'.
	 */
	public EducationInfo[] findWhereGradePercentageEquals(String gradePercentage) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GRADE_PERCENTAGE = ? ORDER BY GRADE_PERCENTAGE", new Object[] { gradePercentage } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'GRADUTION_DATE = :gradutionDate'.
	 */
	public EducationInfo[] findWhereGradutionDateEquals(String gradutionDate) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GRADUTION_DATE = ? ORDER BY GRADUTION_DATE", new Object[] { gradutionDate } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public EducationInfo[] findWhereCandidateIdEquals(int candidateId) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID", new Object[] {  new Integer(candidateId) } );
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the criteria 'USER_ID = :userId'.
	 */
	public EducationInfo[] findWhereUserIdEquals(int userId) throws EducationInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/**
	 * Method 'EducationInfoDaoImpl'
	 * 
	 */
	public EducationInfoDaoImpl()
	{
	}

	/**
	 * Method 'EducationInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public EducationInfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "EDUCATION_INFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected EducationInfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			EducationInfo dto = new EducationInfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected EducationInfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<EducationInfo> resultList = new ArrayList<EducationInfo>();
		while (rs.next()) {
			EducationInfo dto = new EducationInfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		EducationInfo ret[] = new EducationInfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(EducationInfo dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setDegreeCourse( rs.getString( COLUMN_DEGREE_COURSE ) );
		dto.setType( rs.getString( COLUMN_TYPE ) );
		dto.setSubjectMajor( rs.getString( COLUMN_SUBJECT_MAJOR ) );
		dto.setStartDate( rs.getString( COLUMN_START_DATE ) );
		dto.setYearPassing( rs.getInt( COLUMN_YEAR_PASSING ) );
		if (rs.wasNull()) {
			dto.setYearPassingNull( true );
		}
		
		dto.setStudIdNoEnrollNo( rs.getString( COLUMN_STUD_ID_NO_ENROLL_NO ) );
		dto.setCollegeUniversity( rs.getString( COLUMN_COLLEGE_UNIVERSITY ) );
		dto.setGradePercentage( rs.getString( COLUMN_GRADE_PERCENTAGE ) );
		dto.setGradutionDate( rs.getString( COLUMN_GRADUTION_DATE ) );
		dto.setCandidateId( rs.getInt( COLUMN_CANDIDATE_ID ) );
		dto.setSequence( rs.getInt( COLUMN_SEQUENCE ) );
		if (rs.wasNull()) {
			dto.setCandidateIdNull( true );
		}
		
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
		if (rs.wasNull()) {
			dto.setUserIdNull( true );
		}
		dto.setModifiedBy( rs.getInt( COLUMN_MODIFIED_BY ));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(EducationInfo dto)
	{
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the specified arbitrary SQL statement
	 */
	public EducationInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws EducationInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new EducationInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the EDUCATION_INFO table that match the specified arbitrary SQL statement
	 */
	public EducationInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws EducationInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new EducationInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
