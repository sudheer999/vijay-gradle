/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.PersonalInfoDao;
import com.dikshatech.portal.dto.PersonalInfo;
import com.dikshatech.portal.dto.PersonalInfoPk;
import com.dikshatech.portal.exceptions.PersonalInfoDaoException;

public class PersonalInfoDaoImpl extends AbstractDAO implements PersonalInfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( PersonalInfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, PERMANENT_ADDRESS, CURRENT_ADDRESS, PRIMARY_PHONE_NO, SECONDARY_PHONE_NO, PERSONAL_EMAIL_ID, ALTERNATE_EMAIL_ID, MOTHER_NAME, FATHER_NAME, MARITAL_STATUS, SPOUSE_NAME, EMER_CONTACT_NAME, EMER_CP_RELATIONSHIP, EMER_PHONE_NO, CITY, ZIP_CODE, COUNTRY, STATE, SPOUSE_DOB, MODIFIED_BY, BLOOD_GROUP FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, PERMANENT_ADDRESS, CURRENT_ADDRESS, PRIMARY_PHONE_NO, SECONDARY_PHONE_NO, PERSONAL_EMAIL_ID, ALTERNATE_EMAIL_ID, MOTHER_NAME, FATHER_NAME, MARITAL_STATUS, SPOUSE_NAME, EMER_CONTACT_NAME, EMER_CP_RELATIONSHIP, EMER_PHONE_NO, CITY, ZIP_CODE, COUNTRY, STATE, SPOUSE_DOB ,MODIFIED_BY ,BLOOD_GROUP ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,?)";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, PERMANENT_ADDRESS = ?, CURRENT_ADDRESS = ?, PRIMARY_PHONE_NO = ?, SECONDARY_PHONE_NO = ?, PERSONAL_EMAIL_ID = ?, ALTERNATE_EMAIL_ID = ?, MOTHER_NAME = ?, FATHER_NAME = ?, MARITAL_STATUS = ?, SPOUSE_NAME = ?, EMER_CONTACT_NAME = ?, EMER_CP_RELATIONSHIP = ?, EMER_PHONE_NO = ?, CITY = ?, ZIP_CODE = ?, COUNTRY = ?, STATE = ?, SPOUSE_DOB = ?, MODIFIED_BY= ?, BLOOD_GROUP = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column PERMANENT_ADDRESS
	 */
	protected static final int COLUMN_PERMANENT_ADDRESS = 2;

	/** 
	 * Index of column CURRENT_ADDRESS
	 */
	protected static final int COLUMN_CURRENT_ADDRESS = 3;

	/** 
	 * Index of column PRIMARY_PHONE_NO
	 */
	protected static final int COLUMN_PRIMARY_PHONE_NO = 4;

	/** 
	 * Index of column SECONDARY_PHONE_NO
	 */
	protected static final int COLUMN_SECONDARY_PHONE_NO = 5;

	/** 
	 * Index of column PERSONAL_EMAIL_ID
	 */
	protected static final int COLUMN_PERSONAL_EMAIL_ID = 6;

	/** 
	 * Index of column ALTERNATE_EMAIL_ID
	 */
	protected static final int COLUMN_ALTERNATE_EMAIL_ID = 7;

	/** 
	 * Index of column MOTHER_NAME
	 */
	protected static final int COLUMN_MOTHER_NAME = 8;

	/** 
	 * Index of column FATHER_NAME
	 */
	protected static final int COLUMN_FATHER_NAME = 9;

	/** 
	 * Index of column MARITAL_STATUS
	 */
	protected static final int COLUMN_MARITAL_STATUS = 10;

	/** 
	 * Index of column SPOUSE_NAME
	 */
	protected static final int COLUMN_SPOUSE_NAME = 11;

	/** 
	 * Index of column EMER_CONTACT_NAME
	 */
	protected static final int COLUMN_EMER_CONTACT_NAME = 12;

	/** 
	 * Index of column EMER_CP_RELATIONSHIP
	 */
	protected static final int COLUMN_EMER_CP_RELATIONSHIP = 13;

	/** 
	 * Index of column EMER_PHONE_NO
	 */
	protected static final int COLUMN_EMER_PHONE_NO = 14;

	/** 
	 * Index of column CITY
	 */
	protected static final int COLUMN_CITY = 15;

	/** 
	 * Index of column ZIP_CODE
	 */
	protected static final int COLUMN_ZIP_CODE = 16;

	/** 
	 * Index of column COUNTRY
	 */
	protected static final int COLUMN_COUNTRY = 17;

	/** 
	 * Index of column STATE
	 */
	protected static final int COLUMN_STATE = 18;

	/** 
	 * Index of column SPOUSE_DOB
	 */
	protected static final int COLUMN_SPOUSE_DOB = 19;
	
	/** 
	 * Index of column SPOUSE_DOB
	 */
	protected static final int COLUMN_MODIFIED_BY = 20;
	
	
	
	protected static final int COLUMN_BLOOD_GROUP = 21;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 21;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the PERSONAL_INFO table.
	 */
	public PersonalInfoPk insert(PersonalInfo dto) throws PersonalInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isPermanentAddressNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPermanentAddress() );
			}
		
			if (dto.isCurrentAddressNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentAddress() );
			}
		
			stmt.setString( index++, dto.getPrimaryPhoneNo() );
			stmt.setString( index++, dto.getSecondaryPhoneNo() );
			stmt.setString( index++, dto.getPersonalEmailId() );
			stmt.setString( index++, dto.getAlternateEmailId() );
			stmt.setString( index++, dto.getMotherName() );
			stmt.setString( index++, dto.getFatherName() );
			stmt.setString( index++, dto.getMaritalStatus() );
			stmt.setString( index++, dto.getSpouseName() );
			stmt.setString( index++, dto.getEmerContactName() );
			stmt.setString( index++, dto.getEmerCpRelationship() );
			if (dto.isEmerPhoneNoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				//stmt.setInt( index++,Integer.parseInt(dto.getEmerPhoneNo() ));
				 Long number=new Long(0);
					if( dto.getEmerPhoneNo()!=null && !(dto.getEmerPhoneNo().equals("")) && !dto.getEmerPhoneNo().equalsIgnoreCase("null")){
					 number=Long.valueOf( dto.getEmerPhoneNo());
					}
				stmt.setLong(index++, number);
			}
		
			stmt.setString( index++, dto.getCity() );
			if (dto.isZipCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getZipCode() );
			}
		
			stmt.setString( index++, dto.getCountry() );
			stmt.setString( index++, dto.getState() );
			stmt.setDate(index++, dto.getSpouseDob()==null ? null : new java.sql.Date( dto.getSpouseDob().getTime() ) );
			stmt.setInt( index++, dto.getModifiedBy() );
			stmt.setString(index++, dto.getBloodGroup());
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PersonalInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the PERSONAL_INFO table.
	 */
	public void update(PersonalInfoPk pk, PersonalInfo dto) throws PersonalInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isPermanentAddressNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPermanentAddress() );
			}
		
			if (dto.isCurrentAddressNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCurrentAddress() );
			}
		
			stmt.setString( index++, dto.getPrimaryPhoneNo() );
			stmt.setString( index++, dto.getSecondaryPhoneNo() );
			stmt.setString( index++, dto.getPersonalEmailId() );
			stmt.setString( index++, dto.getAlternateEmailId() );
			stmt.setString( index++, dto.getMotherName() );
			stmt.setString( index++, dto.getFatherName() );
			stmt.setString( index++, dto.getMaritalStatus() );
			stmt.setString( index++, dto.getSpouseName() );
			stmt.setString( index++, dto.getEmerContactName() );
			stmt.setString( index++, dto.getEmerCpRelationship() );
			if (dto.isEmerPhoneNoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				 Long number=new Long(0);
				if( dto.getEmerPhoneNo()!=null && !(dto.getEmerPhoneNo().equals("")) && !dto.getEmerPhoneNo().equalsIgnoreCase("null") ){
				 number=Long.valueOf( dto.getEmerPhoneNo());
				}
				stmt.setLong(index++, number);
			}
		
			stmt.setString( index++, dto.getCity() );
			if (dto.isZipCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getZipCode() );
			}
		
			stmt.setString( index++, dto.getCountry() );
			stmt.setString( index++, dto.getState() );
			stmt.setDate(index++, dto.getSpouseDob()==null ? null : new java.sql.Date( dto.getSpouseDob().getTime() ) );
			stmt.setInt( index++, dto.getModifiedBy() );
			stmt.setString(index++, dto.getBloodGroup());
			stmt.setInt( 22, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PersonalInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the PERSONAL_INFO table.
	 */
	public void delete(PersonalInfoPk pk) throws PersonalInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PersonalInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the PERSONAL_INFO table that matches the specified primary-key value.
	 */
	public PersonalInfo findByPrimaryKey(PersonalInfoPk pk) throws PersonalInfoDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ID = :id'.
	 */
	public PersonalInfo findByPrimaryKey(int id) throws PersonalInfoDaoException
	{
		PersonalInfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria ''.
	 */
	public PersonalInfo[] findAll() throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ID = :id'.
	 */
	public PersonalInfo[] findWhereIdEquals(int id) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PERMANENT_ADDRESS = :permanentAddress'.
	 */
	public PersonalInfo[] findWherePermanentAddressEquals(int permanentAddress) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERMANENT_ADDRESS = ? ORDER BY PERMANENT_ADDRESS", new Object[] {  new Integer(permanentAddress) } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'CURRENT_ADDRESS = :currentAddress'.
	 */
	public PersonalInfo[] findWhereCurrentAddressEquals(int currentAddress) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURRENT_ADDRESS = ? ORDER BY CURRENT_ADDRESS", new Object[] {  new Integer(currentAddress) } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PRIMARY_PHONE_NO = :primaryPhoneNo'.
	 */
	public PersonalInfo[] findWherePrimaryPhoneNoEquals(String primaryPhoneNo) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIMARY_PHONE_NO = ? ORDER BY PRIMARY_PHONE_NO", new Object[] { primaryPhoneNo } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SECONDARY_PHONE_NO = :secondaryPhoneNo'.
	 */
	public PersonalInfo[] findWhereSecondaryPhoneNoEquals(String secondaryPhoneNo) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SECONDARY_PHONE_NO = ? ORDER BY SECONDARY_PHONE_NO", new Object[] { secondaryPhoneNo } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PERSONAL_EMAIL_ID = :personalEmailId'.
	 */
	public PersonalInfo[] findWherePersonalEmailIdEquals(String personalEmailId) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERSONAL_EMAIL_ID = ? ORDER BY PERSONAL_EMAIL_ID", new Object[] { personalEmailId } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ALTERNATE_EMAIL_ID = :alternateEmailId'.
	 */
	public PersonalInfo[] findWhereAlternateEmailIdEquals(String alternateEmailId) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ALTERNATE_EMAIL_ID = ? ORDER BY ALTERNATE_EMAIL_ID", new Object[] { alternateEmailId } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'MOTHER_NAME = :motherName'.
	 */
	public PersonalInfo[] findWhereMotherNameEquals(String motherName) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTHER_NAME = ? ORDER BY MOTHER_NAME", new Object[] { motherName } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'FATHER_NAME = :fatherName'.
	 */
	public PersonalInfo[] findWhereFatherNameEquals(String fatherName) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FATHER_NAME = ? ORDER BY FATHER_NAME", new Object[] { fatherName } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'MARITAL_STATUS = :maritalStatus'.
	 */
	public PersonalInfo[] findWhereMaritalStatusEquals(String maritalStatus) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MARITAL_STATUS = ? ORDER BY MARITAL_STATUS", new Object[] { maritalStatus } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SPOUSE_NAME = :spouseName'.
	 */
	public PersonalInfo[] findWhereSpouseNameEquals(String spouseName) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SPOUSE_NAME = ? ORDER BY SPOUSE_NAME", new Object[] { spouseName } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_CONTACT_NAME = :emerContactName'.
	 */
	public PersonalInfo[] findWhereEmerContactNameEquals(String emerContactName) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMER_CONTACT_NAME = ? ORDER BY EMER_CONTACT_NAME", new Object[] { emerContactName } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_CP_RELATIONSHIP = :emerCpRelationship'.
	 */
	public PersonalInfo[] findWhereEmerCpRelationshipEquals(String emerCpRelationship) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMER_CP_RELATIONSHIP = ? ORDER BY EMER_CP_RELATIONSHIP", new Object[] { emerCpRelationship } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_PHONE_NO = :emerPhoneNo'.
	 */
	public PersonalInfo[] findWhereEmerPhoneNoEquals(int emerPhoneNo) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMER_PHONE_NO = ? ORDER BY EMER_PHONE_NO", new Object[] {  new Integer(emerPhoneNo) } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'CITY = :city'.
	 */
	public PersonalInfo[] findWhereCityEquals(String city) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CITY = ? ORDER BY CITY", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ZIP_CODE = :zipCode'.
	 */
	public PersonalInfo[] findWhereZipCodeEquals(int zipCode) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ZIP_CODE = ? ORDER BY ZIP_CODE", new Object[] {  new Integer(zipCode) } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'COUNTRY = :country'.
	 */
	public PersonalInfo[] findWhereCountryEquals(String country) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COUNTRY = ? ORDER BY COUNTRY", new Object[] { country } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'STATE = :state'.
	 */
	public PersonalInfo[] findWhereStateEquals(String state) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATE = ? ORDER BY STATE", new Object[] { state } );
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SPOUSE_DOB = :spouseDob'.
	 */
	public PersonalInfo[] findWhereSpouseDobEquals(Date spouseDob) throws PersonalInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SPOUSE_DOB = ? ORDER BY SPOUSE_DOB", new Object[] { spouseDob==null ? null : new java.sql.Date( spouseDob.getTime() ) } );
	}

	/**
	 * Method 'PersonalInfoDaoImpl'
	 * 
	 */
	public PersonalInfoDaoImpl()
	{
	}

	/**
	 * Method 'PersonalInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public PersonalInfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "PERSONAL_INFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PersonalInfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PersonalInfo dto = new PersonalInfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PersonalInfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<PersonalInfo> resultList = new ArrayList<PersonalInfo>();
		while (rs.next()) {
			PersonalInfo dto = new PersonalInfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PersonalInfo ret[] = new PersonalInfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PersonalInfo dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setPermanentAddress( rs.getInt( COLUMN_PERMANENT_ADDRESS ) );
		if (rs.wasNull()) {
			dto.setPermanentAddressNull( true );
		}
		
		dto.setCurrentAddress( rs.getInt( COLUMN_CURRENT_ADDRESS ) );
		if (rs.wasNull()) {
			dto.setCurrentAddressNull( true );
		}
		
		dto.setPrimaryPhoneNo( rs.getString( COLUMN_PRIMARY_PHONE_NO ) );
		dto.setSecondaryPhoneNo( rs.getString( COLUMN_SECONDARY_PHONE_NO ) );
		dto.setPersonalEmailId( rs.getString( COLUMN_PERSONAL_EMAIL_ID ) );
		dto.setAlternateEmailId( rs.getString( COLUMN_ALTERNATE_EMAIL_ID ) );
		dto.setMotherName( rs.getString( COLUMN_MOTHER_NAME ) );
		dto.setFatherName( rs.getString( COLUMN_FATHER_NAME ) );
		dto.setMaritalStatus( rs.getString( COLUMN_MARITAL_STATUS ) );
		dto.setSpouseName( rs.getString( COLUMN_SPOUSE_NAME ) );
		dto.setEmerContactName( rs.getString( COLUMN_EMER_CONTACT_NAME ) );
		dto.setEmerCpRelationship( rs.getString( COLUMN_EMER_CP_RELATIONSHIP ) );
		dto.setEmerPhoneNo( String.valueOf(rs.getLong(COLUMN_EMER_PHONE_NO ) ));
		if (rs.wasNull()) {
			dto.setEmerPhoneNoNull( true );
		}
		
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setZipCode( rs.getInt( COLUMN_ZIP_CODE ) );
		if (rs.wasNull()) {
			dto.setZipCodeNull( true );
		}
		
		dto.setCountry( rs.getString( COLUMN_COUNTRY ) );
		dto.setState( rs.getString( COLUMN_STATE ) );
		dto.setSpouseDob( rs.getDate(COLUMN_SPOUSE_DOB ) );
		dto.setModifiedBy(rs.getInt( COLUMN_MODIFIED_BY ));
		
		dto.setBloodGroup(rs.getString(COLUMN_BLOOD_GROUP));
		if(dto.getBloodGroup() == null || dto.getBloodGroup() == ""){
			dto.setBloodGroup("No blood group");
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PersonalInfo dto)
	{
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the specified arbitrary SQL statement
	 */
	public PersonalInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws PersonalInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PersonalInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the specified arbitrary SQL statement
	 */
	public PersonalInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws PersonalInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PersonalInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	
	public PersonalInfoPk updatetBlood(PersonalInfo dto) throws PersonalInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			String SQL_UPDATE = "UPDATE " + getTableName()
					+ " SET BLOOD_GROUP = ? ,   PRIMARY_PHONE_NO = ? WHERE  ID IN(" + dto.getId() + ")";
			stmt = conn.prepareStatement(SQL_UPDATE, Statement.RETURN_GENERATED_KEYS);
			stmt = conn.prepareStatement(SQL_UPDATE);
			stmt.setObject(1, dto.getBloodGroup());
			stmt.setObject(2, dto.getPrimaryPhoneNo());
			int affectedrow = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(affectedrow + " rows affected (" + (t2 - t1) + " ms)");
			}

			reset(dto);
			return dto.createPk();
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new PersonalInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	@Override
	public PersonalInfo[] findBYUserId(String string, Object[] objects) throws PersonalInfoDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	
}
