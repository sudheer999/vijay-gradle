/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.FbpConfigDao;
import com.dikshatech.portal.dto.FbpConfig;
import com.dikshatech.portal.dto.FbpConfigPk;
import com.dikshatech.portal.exceptions.FbpConfigDaoException;

public class FbpConfigDaoImpl extends AbstractDAO implements FbpConfigDao {

	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
	takes no arguments and one that takes a Connection argument. If the Connection version
	is chosen then the connection will be stored in this attribute and will be used by all
	calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger				= Logger.getLogger(FbpConfigDaoImpl.class);
	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT			= "SELECT ID, LEVEL_ID, LEVEL, LTA, TPA, MA, CEA, MV, TRA, OA FROM " + getTableName() + "";
	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT			= "INSERT INTO " + getTableName() + " ( ID, LEVEL_ID, LEVEL, LTA, TPA, MA, CEA, MV, TRA, OA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE			= "UPDATE " + getTableName() + " SET ID = ?, LEVEL_ID = ?, LEVEL = ?, LTA = ?, TPA = ?, MA = ?, CEA = ?, MV = ?, TRA = ?, OA = ? WHERE ID = ?";
	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE			= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/** 
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID			= 1;
	/** 
	 * Index of column LEVEL_ID
	 */
	protected static final int		COLUMN_LEVEL_ID		= 2;
	/** 
	 * Index of column LEVEL
	 */
	protected static final int		COLUMN_LEVEL		= 3;
	/** 
	 * Index of column LTA
	 */
	protected static final int		COLUMN_LTA			= 4;
	/** 
	 * Index of column TPA
	 */
	protected static final int		COLUMN_TPA			= 5;
	/** 
	 * Index of column MA
	 */
	protected static final int		COLUMN_MA			= 6;
	/** 
	 * Index of column CEA
	 */
	protected static final int		COLUMN_CEA			= 7;
	/** 
	 * Index of column MV
	 */
	protected static final int		COLUMN_MV			= 8;
	/** 
	 * Index of column TRA
	 */
	protected static final int		COLUMN_TRA			= 9;
	/** 
	 * Index of column OA
	 */
	protected static final int		COLUMN_OA			= 10;
	/** 
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS	= 10;
	/** 
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID		= 1;

	/** 
	 * Inserts a new row in the FBP_CONFIG table.
	 */
	public FbpConfigPk insert(FbpConfig dto) throws FbpConfigDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getLevelId());
			stmt.setString(index++, dto.getLevel());
			stmt.setString(index++, dto.getLta());
			stmt.setString(index++, dto.getTpa());
			stmt.setString(index++, dto.getMa());
			stmt.setString(index++, dto.getCea());
			stmt.setString(index++, dto.getMv());
			stmt.setString(index++, dto.getTra());
			stmt.setString(index++, dto.getOa());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FbpConfigDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Updates a single row in the FBP_CONFIG table.
	 */
	public void update(FbpConfigPk pk, FbpConfig dto) throws FbpConfigDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getLevelId());
			stmt.setString(index++, dto.getLevel());
			stmt.setString(index++, dto.getLta());
			stmt.setString(index++, dto.getTpa());
			stmt.setString(index++, dto.getMa());
			stmt.setString(index++, dto.getCea());
			stmt.setString(index++, dto.getMv());
			stmt.setString(index++, dto.getTra());
			stmt.setString(index++, dto.getOa());
			stmt.setInt(11, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FbpConfigDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Deletes a single row in the FBP_CONFIG table.
	 */
	public void delete(FbpConfigPk pk) throws FbpConfigDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FbpConfigDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Returns the rows from the FBP_CONFIG table that matches the specified primary-key value.
	 */
	public FbpConfig findByPrimaryKey(FbpConfigPk pk) throws FbpConfigDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'ID = :id'.
	 */
	public FbpConfig findByPrimaryKey(int id) throws FbpConfigDaoException {
		FbpConfig ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria ''.
	 */
	public FbpConfig[] findAll() throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'ID = :id'.
	 */
	public FbpConfig[] findWhereIdEquals(int id) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public FbpConfig[] findWhereLevelIdEquals(int levelId) throws FbpConfigDaoException {
		FbpConfig[] configs = findByDynamicSelect(SQL_SELECT + " WHERE LEVEL_ID = ? ORDER BY LEVEL_ID", new Object[] { new Integer(levelId) });
		if (configs == null || configs.length == 0){
	//		configs = findByDynamicSelect("SELECT F.* FROM FBP_CONFIG F JOIN LEVELS L ON F.LEVEL=L.LABEL WHERE L.ID=? LIMIT 0,1", new Object[] { new Integer(levelId) });
			
			
			configs = findByDynamicSelect("SELECT F.* FROM FBP_CONFIG F LEFT JOIN LEVELS L ON L.ID = F.LEVEL_ID WHERE L.ID=? LIMIT 0,1", new Object[] { new Integer(levelId) });
		}
		return configs;
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'LEVEL = :level'.
	 */
	public FbpConfig[] findWhereLevelEquals(String level) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEVEL = ? ORDER BY LEVEL", new Object[] { level });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'LTA = :lta'.
	 */
	public FbpConfig[] findWhereLtaEquals(String lta) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LTA = ? ORDER BY LTA", new Object[] { lta });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'TPA = :tpa'.
	 */
	public FbpConfig[] findWhereTpaEquals(String tpa) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TPA = ? ORDER BY TPA", new Object[] { tpa });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'MA = :ma'.
	 */
	public FbpConfig[] findWhereMaEquals(String ma) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MA = ? ORDER BY MA", new Object[] { ma });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'CEA = :cea'.
	 */
	public FbpConfig[] findWhereCeaEquals(String cea) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CEA = ? ORDER BY CEA", new Object[] { cea });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'MV = :mv'.
	 */
	public FbpConfig[] findWhereMvEquals(String mv) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MV = ? ORDER BY MV", new Object[] { mv });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'TRA = :tra'.
	 */
	public FbpConfig[] findWhereTraEquals(String tra) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TRA = ? ORDER BY TRA", new Object[] { tra });
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the criteria 'OA = :oa'.
	 */
	public FbpConfig[] findWhereOaEquals(String oa) throws FbpConfigDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE OA = ? ORDER BY OA", new Object[] { oa });
	}

	/**
	 * Method 'FbpConfigDaoImpl'
	 * 
	 */
	public FbpConfigDaoImpl() {}

	/**
	 * Method 'FbpConfigDaoImpl'
	 * 
	 * @param userConn
	 */
	public FbpConfigDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "FBP_CONFIG";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected FbpConfig fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			FbpConfig dto = new FbpConfig();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected FbpConfig[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<FbpConfig> resultList = new ArrayList<FbpConfig>();
		while (rs.next()){
			FbpConfig dto = new FbpConfig();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		FbpConfig ret[] = new FbpConfig[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(FbpConfig dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setLevelId(rs.getInt(COLUMN_LEVEL_ID));
		dto.setLevel(rs.getString(COLUMN_LEVEL));
		dto.setLta(rs.getString(COLUMN_LTA));
		dto.setTpa(rs.getString(COLUMN_TPA));
		dto.setMa(rs.getString(COLUMN_MA));
		dto.setCea(rs.getString(COLUMN_CEA));
		dto.setMv(rs.getString(COLUMN_MV));
		dto.setTra(rs.getString(COLUMN_TRA));
		dto.setOa(rs.getString(COLUMN_OA));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(FbpConfig dto) {}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the specified arbitrary SQL statement
	 */
	public FbpConfig[] findByDynamicSelect(String sql, Object[] sqlParams) throws FbpConfigDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FbpConfigDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Returns all rows from the FBP_CONFIG table that match the specified arbitrary SQL statement
	 */
	public FbpConfig[] findByDynamicWhere(String sql, Object[] sqlParams) throws FbpConfigDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FbpConfigDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
