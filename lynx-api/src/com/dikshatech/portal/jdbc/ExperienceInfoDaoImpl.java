/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.ExperienceInfoDao;
import com.dikshatech.portal.dto.ExperienceInfo;
import com.dikshatech.portal.dto.ExperienceInfoPk;
import com.dikshatech.portal.exceptions.ExperienceInfoDaoException;

public class ExperienceInfoDaoImpl extends AbstractDAO implements ExperienceInfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ExperienceInfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, COMPANY, CURRENT_EMP, DATE_JOINING, DATE_RELIEVING, JOINING_DESIGNATION, LEAVING_DESIGNATION, RPT_MGR_NAME, HR_NAME, EMPLOYMENT_TYPE, EMP_CODE, LEAVING_REASON, CANDIDATE_ID, USER_ID, MODIFIED_BY FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, COMPANY, CURRENT_EMP, DATE_JOINING, DATE_RELIEVING, JOINING_DESIGNATION, LEAVING_DESIGNATION, RPT_MGR_NAME, HR_NAME, EMPLOYMENT_TYPE, EMP_CODE, LEAVING_REASON, CANDIDATE_ID, USER_ID, MODIFIED_BY ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, COMPANY = ?, CURRENT_EMP = ?, DATE_JOINING = ?, DATE_RELIEVING = ?, JOINING_DESIGNATION = ?, LEAVING_DESIGNATION = ?, RPT_MGR_NAME = ?, HR_NAME = ?, EMPLOYMENT_TYPE = ?, EMP_CODE = ?, LEAVING_REASON = ?, CANDIDATE_ID = ?, USER_ID = ?, MODIFIED_BY= ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column COMPANY
	 */
	protected static final int COLUMN_COMPANY = 2;

	/** 
	 * Index of column CURRENT_EMP
	 */
	protected static final int COLUMN_CURRENT_EMP = 3;

	/** 
	 * Index of column DATE_JOINING
	 */
	protected static final int COLUMN_DATE_JOINING = 4;

	/** 
	 * Index of column DATE_RELIEVING
	 */
	protected static final int COLUMN_DATE_RELIEVING = 5;

	/** 
	 * Index of column JOINING_DESIGNATION
	 */
	protected static final int COLUMN_JOINING_DESIGNATION = 6;

	/** 
	 * Index of column LEAVING_DESIGNATION
	 */
	protected static final int COLUMN_LEAVING_DESIGNATION = 7;

	/** 
	 * Index of column RPT_MGR_NAME
	 */
	protected static final int COLUMN_RPT_MGR_NAME = 8;

	/** 
	 * Index of column HR_NAME
	 */
	protected static final int COLUMN_HR_NAME = 9;

	/** 
	 * Index of column EMPLOYMENT_TYPE
	 */
	protected static final int COLUMN_EMPLOYMENT_TYPE = 10;

	/** 
	 * Index of column EMP_CODE
	 */
	protected static final int COLUMN_EMP_CODE = 11;

	/** 
	 * Index of column LEAVING_REASON
	 */
	protected static final int COLUMN_LEAVING_REASON = 12;

	/** 
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 13;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 14;
	
	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_MODIFIED_BY = 15;


	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the EXPERIENCE_INFO table.
	 */
	public ExperienceInfoPk insert(ExperienceInfo dto) throws ExperienceInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getCompany() );
			if (dto.isCurrentEmpNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCurrentEmp() );
			}
		
			stmt.setDate(index++, dto.getDateJoining()==null ? null : new java.sql.Date( dto.getDateJoining().getTime() ) );
			stmt.setDate(index++, dto.getDateRelieving()==null ? null : new java.sql.Date( dto.getDateRelieving().getTime() ) );
			stmt.setString( index++, dto.getJoiningDesignation() );
			stmt.setString( index++, dto.getLeavingDesignation() );
			stmt.setString( index++, dto.getRptMgrName() );
			stmt.setString( index++, dto.getHrName() );
			stmt.setString( index++, dto.getEmploymentType() );
			stmt.setString( index++, dto.getEmpCode() );
			stmt.setString( index++, dto.getLeavingReason() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
			stmt.setInt( index++, dto.getModifiedBy() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ExperienceInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the EXPERIENCE_INFO table.
	 */
	public void update(ExperienceInfoPk pk, ExperienceInfo dto) throws ExperienceInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getCompany() );
			if (dto.isCurrentEmpNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCurrentEmp() );
			}
		
			stmt.setDate(index++, dto.getDateJoining()==null ? null : new java.sql.Date( dto.getDateJoining().getTime() ) );
			stmt.setDate(index++, dto.getDateRelieving()==null ? null : new java.sql.Date( dto.getDateRelieving().getTime() ) );
			stmt.setString( index++, dto.getJoiningDesignation() );
			stmt.setString( index++, dto.getLeavingDesignation() );
			stmt.setString( index++, dto.getRptMgrName() );
			stmt.setString( index++, dto.getHrName() );
			stmt.setString( index++, dto.getEmploymentType() );
			stmt.setString( index++, dto.getEmpCode() );
			stmt.setString( index++, dto.getLeavingReason() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
			stmt.setInt( index++, dto.getModifiedBy() );
			stmt.setInt( 16, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ExperienceInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the EXPERIENCE_INFO table.
	 */
	public void delete(ExperienceInfoPk pk) throws ExperienceInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ExperienceInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the EXPERIENCE_INFO table that matches the specified primary-key value.
	 */
	public ExperienceInfo findByPrimaryKey(ExperienceInfoPk pk) throws ExperienceInfoDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'ID = :id'.
	 */
	public ExperienceInfo findByPrimaryKey(int id) throws ExperienceInfoDaoException
	{
		ExperienceInfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria ''.
	 */
	public ExperienceInfo[] findAll() throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'ID = :id'.
	 */
	public ExperienceInfo[] findWhereIdEquals(int id) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'COMPANY = :company'.
	 */
	public ExperienceInfo[] findWhereCompanyEquals(String company) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPANY = ? ORDER BY COMPANY", new Object[] { company } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'CURRENT_EMP = :currentEmp'.
	 */
	public ExperienceInfo[] findWhereCurrentEmpEquals(short currentEmp) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURRENT_EMP = ? ORDER BY CURRENT_EMP", new Object[] {  new Short(currentEmp) } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'DATE_JOINING = :dateJoining'.
	 */
	public ExperienceInfo[] findWhereDateJoiningEquals(Date dateJoining) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_JOINING = ? ORDER BY DATE_JOINING", new Object[] { dateJoining==null ? null : new java.sql.Date( dateJoining.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'DATE_RELIEVING = :dateRelieving'.
	 */
	public ExperienceInfo[] findWhereDateRelievingEquals(Date dateRelieving) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_RELIEVING = ? ORDER BY DATE_RELIEVING", new Object[] { dateRelieving==null ? null : new java.sql.Date( dateRelieving.getTime() ) } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'JOINING_DESIGNATION = :joiningDesignation'.
	 */
	public ExperienceInfo[] findWhereJoiningDesignationEquals(String joiningDesignation) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE JOINING_DESIGNATION = ? ORDER BY JOINING_DESIGNATION", new Object[] { joiningDesignation } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'LEAVING_DESIGNATION = :leavingDesignation'.
	 */
	public ExperienceInfo[] findWhereLeavingDesignationEquals(String leavingDesignation) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LEAVING_DESIGNATION = ? ORDER BY LEAVING_DESIGNATION", new Object[] { leavingDesignation } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'RPT_MGR_NAME = :rptMgrName'.
	 */
	public ExperienceInfo[] findWhereRptMgrNameEquals(String rptMgrName) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RPT_MGR_NAME = ? ORDER BY RPT_MGR_NAME", new Object[] { rptMgrName } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'HR_NAME = :hrName'.
	 */
	public ExperienceInfo[] findWhereHrNameEquals(String hrName) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HR_NAME = ? ORDER BY HR_NAME", new Object[] { hrName } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'EMPLOYMENT_TYPE = :employmentType'.
	 */
	public ExperienceInfo[] findWhereEmploymentTypeEquals(String employmentType) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMPLOYMENT_TYPE = ? ORDER BY EMPLOYMENT_TYPE", new Object[] { employmentType } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'EMP_CODE = :empCode'.
	 */
	public ExperienceInfo[] findWhereEmpCodeEquals(String empCode) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_CODE = ? ORDER BY EMP_CODE", new Object[] { empCode } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'LEAVING_REASON = :leavingReason'.
	 */
	public ExperienceInfo[] findWhereLeavingReasonEquals(String leavingReason) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LEAVING_REASON = ? ORDER BY LEAVING_REASON", new Object[] { leavingReason } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public ExperienceInfo[] findWhereCandidateIdEquals(int candidateId) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID", new Object[] {  new Integer(candidateId) } );
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the criteria 'USER_ID = :userId'.
	 */
	public ExperienceInfo[] findWhereUserIdEquals(int userId) throws ExperienceInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/**
	 * Method 'ExperienceInfoDaoImpl'
	 * 
	 */
	public ExperienceInfoDaoImpl()
	{
	}

	/**
	 * Method 'ExperienceInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ExperienceInfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "EXPERIENCE_INFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ExperienceInfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ExperienceInfo dto = new ExperienceInfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ExperienceInfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ExperienceInfo> resultList = new ArrayList<ExperienceInfo>();
		while (rs.next()) {
			ExperienceInfo dto = new ExperienceInfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ExperienceInfo ret[] = new ExperienceInfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ExperienceInfo dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setCompany( rs.getString( COLUMN_COMPANY ) );
		dto.setCurrentEmp( rs.getShort( COLUMN_CURRENT_EMP ) );
		if (rs.wasNull()) {
			dto.setCurrentEmpNull( true );
		}
		
		dto.setDateJoining( rs.getDate(COLUMN_DATE_JOINING ) );
		dto.setDateRelieving( rs.getDate(COLUMN_DATE_RELIEVING ) );
		dto.setJoiningDesignation( rs.getString( COLUMN_JOINING_DESIGNATION ) );
		dto.setLeavingDesignation( rs.getString( COLUMN_LEAVING_DESIGNATION ) );
		dto.setRptMgrName( rs.getString( COLUMN_RPT_MGR_NAME ) );
		dto.setHrName( rs.getString( COLUMN_HR_NAME ) );
		dto.setEmploymentType( rs.getString( COLUMN_EMPLOYMENT_TYPE ) );
		dto.setEmpCode( rs.getString( COLUMN_EMP_CODE ) );
		dto.setLeavingReason( rs.getString( COLUMN_LEAVING_REASON ) );
		dto.setCandidateId( rs.getInt( COLUMN_CANDIDATE_ID ) );
		if (rs.wasNull()) {
			dto.setCandidateIdNull( true );
		}
		
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
		if (rs.wasNull()) {
			dto.setUserIdNull( true );
		}
		dto.setModifiedBy(rs.getInt( COLUMN_MODIFIED_BY ));
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ExperienceInfo dto)
	{
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the specified arbitrary SQL statement
	 */
	public ExperienceInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ExperienceInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ExperienceInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the EXPERIENCE_INFO table that match the specified arbitrary SQL statement
	 */
	public ExperienceInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ExperienceInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ExperienceInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	
}
