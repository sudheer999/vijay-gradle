/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.ResumeManagementDao;
import com.dikshatech.portal.dto.ResumeManagement;
import com.dikshatech.portal.dto.ResumeManagementPk;
import com.dikshatech.portal.exceptions.ResumeManagementDaoException;

public class ResumeManagementDaoImpl extends AbstractDAO implements
		ResumeManagementDao {
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger
			.getLogger(ResumeManagementDaoImpl.class);

	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String SQL_SELECT = "SELECT ID, CANDIDATE_FIRST_NAME, CANDIDATE_LAST_NAME, SKILL_SET, BILL_RATE, PAY_RATE, CITY, STATE, RELOCATION, SECONDARY_SKILL_SET, E_MAILID, VISA_TYPE, VT_COMP_NAME, VT_CONT_PERSON, VT_CONT_PHONE, VT_EMAIL_ID, H_PHONE, CELL_NO, RECRUT_ID, RESUME, HOME_PHONE_NUMBER, STATUS, IS_DELETE, REGION_ID FROM "
			+ getTableName() + "";

	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/**
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO "
			+ getTableName()
			+ " ( ID, CANDIDATE_FIRST_NAME, CANDIDATE_LAST_NAME, SKILL_SET, BILL_RATE, PAY_RATE, CITY, STATE, RELOCATION, SECONDARY_SKILL_SET, E_MAILID, VISA_TYPE, VT_COMP_NAME, VT_CONT_PERSON, VT_CONT_PHONE, VT_EMAIL_ID, H_PHONE, CELL_NO, RECRUT_ID, RESUME, HOME_PHONE_NUMBER, STATUS, IS_DELETE, REGION_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE "
			+ getTableName()
			+ " SET ID = ?, CANDIDATE_FIRST_NAME = ?, CANDIDATE_LAST_NAME = ?, SKILL_SET = ?, BILL_RATE = ?, PAY_RATE = ?, CITY = ?, STATE = ?, RELOCATION = ?, SECONDARY_SKILL_SET = ?, E_MAILID = ?, VISA_TYPE = ?, VT_COMP_NAME = ?, VT_CONT_PERSON = ?, VT_CONT_PHONE = ?, VT_EMAIL_ID = ?, H_PHONE = ?, CELL_NO = ?, RECRUT_ID = ?, RESUME = ?, HOME_PHONE_NUMBER = ?, STATUS = ?, IS_DELETE = ?, REGION_ID = ? WHERE ID = ?";

	/**
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName()
			+ " WHERE ID = ?";

	/**
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/**
	 * Index of column CANDIDATE_FIRST_NAME
	 */
	protected static final int COLUMN_CANDIDATE_FIRST_NAME = 2;

	/**
	 * Index of column CANDIDATE_LAST_NAME
	 */
	protected static final int COLUMN_CANDIDATE_LAST_NAME = 3;

	/**
	 * Index of column SKILL_SET
	 */
	protected static final int COLUMN_SKILL_SET = 4;

	/**
	 * Index of column BILL_RATE
	 */
	protected static final int COLUMN_BILL_RATE = 5;

	/**
	 * Index of column PAY_RATE
	 */
	protected static final int COLUMN_PAY_RATE = 6;

	/**
	 * Index of column CITY
	 */
	protected static final int COLUMN_CITY = 7;

	/**
	 * Index of column STATE
	 */
	protected static final int COLUMN_STATE = 8;

	/**
	 * Index of column RELOCATION
	 */
	protected static final int COLUMN_RELOCATION = 9;

	/**
	 * Index of column SECONDARY_SKILL_SET
	 */
	protected static final int COLUMN_SECONDARY_SKILL_SET = 10;

	/**
	 * Index of column E_MAILID
	 */
	protected static final int COLUMN_E_MAILID = 11;

	/**
	 * Index of column VISA_TYPE
	 */
	protected static final int COLUMN_VISA_TYPE = 12;

	/**
	 * Index of column VT_COMP_NAME
	 */
	protected static final int COLUMN_VT_COMP_NAME = 13;

	/**
	 * Index of column VT_CONT_PERSON
	 */
	protected static final int COLUMN_VT_CONT_PERSON = 14;

	/**
	 * Index of column VT_CONT_PHONE
	 */
	protected static final int COLUMN_VT_CONT_PHONE = 15;

	/**
	 * Index of column VT_EMAIL_ID
	 */
	protected static final int COLUMN_VT_EMAIL_ID = 16;

	/**
	 * Index of column H_PHONE
	 */
	protected static final int COLUMN_H_PHONE = 17;

	/**
	 * Index of column CELL_NO
	 */
	protected static final int COLUMN_CELL_NO = 18;

	/**
	 * Index of column RECRUT_ID
	 */
	protected static final int COLUMN_RECRUT_ID = 19;

	/**
	 * Index of column RESUME
	 */
	protected static final int COLUMN_RESUME = 20;

	/**
	 * Index of column HOME_PHONE_NUMBER
	 */
	protected static final int COLUMN_HOME_PHONE_NUMBER = 21;

	/**
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 22;

	/**
	 * Index of column IS_DELETE
	 */
	protected static final int COLUMN_IS_DELETE = 23;

	/**
	 * Index of column REGION_ID
	 */
	protected static final int COLUMN_REGION_ID = 24;

	/**
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/**
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/**
	 * Inserts a new row in the RESUME_MANAGEMENT table.
	 */
	public ResumeManagementPk insert(ResumeManagement dto)
			throws ResumeManagementDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			stmt = conn.prepareStatement(SQL_INSERT,
					Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setString(index++, dto.getCandidateFirstName());
			stmt.setString(index++, dto.getCandidateLastName());
			stmt.setString(index++, dto.getSkillSet());
			stmt.setString(index++, dto.getBillRate());
			stmt.setString(index++, dto.getPayRate());
			stmt.setString(index++, dto.getCity());
			stmt.setString(index++, dto.getState());
			if (dto.isRelocationNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getRelocation());
			}

			stmt.setString(index++, dto.getSecondarySkillSet());
			stmt.setString(index++, dto.getEmailId());
			stmt.setString(index++, dto.getVisaType());
			stmt.setString(index++, dto.getVtCompName());
			stmt.setString(index++, dto.getVtContPerson());
			stmt.setString(index++, dto.getVtContPhone());
			stmt.setString(index++, dto.getVtEmailId());
			stmt.setString(index++, dto.getHPhone());
			stmt.setString(index++, dto.getCellNo());
			stmt.setInt(index++, dto.getRecrutId());
			stmt.setString(index++, dto.getResume());
			stmt.setString(index++, dto.getHomePhoneNumber());
			stmt.setString(index++, dto.getStatus());
			if (dto.isIsDeleteNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getIsDelete());
			}

			stmt.setInt(index++, dto.getRegionId());
			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}

			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId(rs.getInt(1));
			}

			reset(dto);
			return dto.createPk();
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ResumeManagementDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the RESUME_MANAGEMENT table.
	 */
	public void update(ResumeManagementPk pk, ResumeManagement dto)
			throws ResumeManagementDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}

			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setString(index++, dto.getCandidateFirstName());
			stmt.setString(index++, dto.getCandidateLastName());
			stmt.setString(index++, dto.getSkillSet());
			stmt.setString(index++, dto.getBillRate());
			stmt.setString(index++, dto.getPayRate());
			stmt.setString(index++, dto.getCity());
			stmt.setString(index++, dto.getState());
			if (dto.isRelocationNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getRelocation());
			}

			stmt.setString(index++, dto.getSecondarySkillSet());
			stmt.setString(index++, dto.getEmailId());
			stmt.setString(index++, dto.getVisaType());
			stmt.setString(index++, dto.getVtCompName());
			stmt.setString(index++, dto.getVtContPerson());
			stmt.setString(index++, dto.getVtContPhone());
			stmt.setString(index++, dto.getVtEmailId());
			stmt.setString(index++, dto.getHPhone());
			stmt.setString(index++, dto.getCellNo());
			stmt.setInt(index++, dto.getRecrutId());
			stmt.setString(index++, dto.getResume());
			stmt.setString(index++, dto.getHomePhoneNumber());
			stmt.setString(index++, dto.getStatus());
			if (dto.isIsDeleteNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getIsDelete());
			}

			stmt.setInt(index++, dto.getRegionId());
			stmt.setInt(25, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ResumeManagementDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the RESUME_MANAGEMENT table.
	 */
	public void delete(ResumeManagementPk pk)
			throws ResumeManagementDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}

			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ResumeManagementDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the RESUME_MANAGEMENT table that matches the
	 * specified primary-key value.
	 */
	public ResumeManagement findByPrimaryKey(ResumeManagementPk pk)
			throws ResumeManagementDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'ID = :id'.
	 */
	public ResumeManagement findByPrimaryKey(int id)
			throws ResumeManagementDaoException {
		ResumeManagement ret[] = findByDynamicSelect(SQL_SELECT
				+ " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * ''.
	 */
	public ResumeManagement[] findAll() throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'ID = :id'.
	 */
	public ResumeManagement[] findWhereIdEquals(int id)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID",
				new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'CANDIDATE_FIRST_NAME = :candidateFirstName'.
	 */
	public ResumeManagement[] findWhereCandidateFirstNameEquals(
			String candidateFirstName) throws ResumeManagementDaoException {
		return findByDynamicSelect(
				SQL_SELECT
						+ " WHERE CANDIDATE_FIRST_NAME = ? ORDER BY CANDIDATE_FIRST_NAME",
				new Object[] { candidateFirstName });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'CANDIDATE_LAST_NAME = :candidateLastName'.
	 */
	public ResumeManagement[] findWhereCandidateLastNameEquals(
			String candidateLastName) throws ResumeManagementDaoException {
		return findByDynamicSelect(
				SQL_SELECT
						+ " WHERE CANDIDATE_LAST_NAME = ? ORDER BY CANDIDATE_LAST_NAME",
				new Object[] { candidateLastName });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'SKILL_SET = :skillSet'.
	 */
	public ResumeManagement[] findWhereSkillSetEquals(String skillSet)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE SKILL_SET = ? ORDER BY SKILL_SET",
				new Object[] { skillSet });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'BILL_RATE = :billRate'.
	 */
	public ResumeManagement[] findWhereBillRateEquals(String billRate)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE BILL_RATE = ? ORDER BY BILL_RATE",
				new Object[] { billRate });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'PAY_RATE = :payRate'.
	 */
	public ResumeManagement[] findWherePayRateEquals(String payRate)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE PAY_RATE = ? ORDER BY PAY_RATE",
				new Object[] { payRate });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'CITY = :city'.
	 */
	public ResumeManagement[] findWhereCityEquals(String city)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(
				SQL_SELECT + " WHERE CITY = ? ORDER BY CITY",
				new Object[] { city });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'STATE = :state'.
	 */
	public ResumeManagement[] findWhereStateEquals(String state)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE STATE = ? ORDER BY STATE", new Object[] { state });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'RELOCATION = :relocation'.
	 */
	public ResumeManagement[] findWhereRelocationEquals(int relocation)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE RELOCATION = ? ORDER BY RELOCATION",
				new Object[] { new Integer(relocation) });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'SECONDARY_SKILL_SET = :secondarySkillSet'.
	 */
	public ResumeManagement[] findWhereSecondarySkillSetEquals(
			String secondarySkillSet) throws ResumeManagementDaoException {
		return findByDynamicSelect(
				SQL_SELECT
						+ " WHERE SECONDARY_SKILL_SET = ? ORDER BY SECONDARY_SKILL_SET",
				new Object[] { secondarySkillSet });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'E_MAILID = :eMailid'.
	 */
	public ResumeManagement[] findWhereEMailidEquals(String eMailid)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE E_MAILID = ? ORDER BY E_MAILID",
				new Object[] { eMailid });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'VISA_TYPE = :visaType'.
	 */
	public ResumeManagement[] findWhereVisaTypeEquals(String visaType)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE VISA_TYPE = ? ORDER BY VISA_TYPE",
				new Object[] { visaType });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'VT_COMP_NAME = :vtCompName'.
	 */
	public ResumeManagement[] findWhereVtCompNameEquals(String vtCompName)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE VT_COMP_NAME = ? ORDER BY VT_COMP_NAME",
				new Object[] { vtCompName });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'VT_CONT_PERSON = :vtContPerson'.
	 */
	public ResumeManagement[] findWhereVtContPersonEquals(String vtContPerson)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE VT_CONT_PERSON = ? ORDER BY VT_CONT_PERSON",
				new Object[] { vtContPerson });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'VT_CONT_PHONE = :vtContPhone'.
	 */
	public ResumeManagement[] findWhereVtContPhoneEquals(String vtContPhone)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE VT_CONT_PHONE = ? ORDER BY VT_CONT_PHONE",
				new Object[] { vtContPhone });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'VT_EMAIL_ID = :vtEmailId'.
	 */
	public ResumeManagement[] findWhereVtEmailIdEquals(String vtEmailId)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE VT_EMAIL_ID = ? ORDER BY VT_EMAIL_ID",
				new Object[] { vtEmailId });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'H_PHONE = :hPhone'.
	 */
	public ResumeManagement[] findWhereHPhoneEquals(String hPhone)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE H_PHONE = ? ORDER BY H_PHONE",
				new Object[] { hPhone });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'CELL_NO = :cellNo'.
	 */
	public ResumeManagement[] findWhereCellNoEquals(String cellNo)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE CELL_NO = ? ORDER BY CELL_NO",
				new Object[] { cellNo });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'RECRUT_ID = :recrutId'.
	 */
	public ResumeManagement[] findWhereRecrutIdEquals(int recrutId)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE RECRUT_ID = ? ORDER BY RECRUT_ID",
				new Object[] { new Integer(recrutId) });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'RESUME = :resume'.
	 */
	public ResumeManagement[] findWhereResumeEquals(String resume)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE RESUME = ? ORDER BY RESUME", new Object[] { resume });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'HOME_PHONE_NUMBER = :homePhoneNumber'.
	 */
	public ResumeManagement[] findWhereHomePhoneNumberEquals(
			String homePhoneNumber) throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE HOME_PHONE_NUMBER = ? ORDER BY HOME_PHONE_NUMBER",
				new Object[] { homePhoneNumber });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'STATUS = :status'.
	 */
	public ResumeManagement[] findWhereStatusEquals(String status)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'IS_DELETE = :isDelete'.
	 */
	public ResumeManagement[] findWhereIsDeleteEquals(int isDelete)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE IS_DELETE = ? ORDER BY IS_DELETE",
				new Object[] { new Integer(isDelete) });
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the criteria
	 * 'REGION_ID = :regionId'.
	 */
	public ResumeManagement[] findWhereRegionIdEquals(int regionId)
			throws ResumeManagementDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE REGION_ID = ? ORDER BY REGION_ID",
				new Object[] { new Integer(regionId) });
	}

	/**
	 * Method 'ResumeManagementDaoImpl'
	 * 
	 */
	public ResumeManagementDaoImpl() {
	}

	/**
	 * Method 'ResumeManagementDaoImpl'
	 * 
	 * @param userConn
	 */
	public ResumeManagementDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "RESUME_MANAGEMENT";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected ResumeManagement fetchSingleResult(ResultSet rs)
			throws SQLException {
		if (rs.next()) {
			ResumeManagement dto = new ResumeManagement();
			populateDto(dto, rs);
			return dto;
		} else {
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected ResumeManagement[] fetchMultiResults(ResultSet rs)
			throws SQLException {
		Collection<ResumeManagement> resultList = new ArrayList<ResumeManagement>();
		while (rs.next()) {
			ResumeManagement dto = new ResumeManagement();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		ResumeManagement ret[] = new ResumeManagement[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ResumeManagement dto, ResultSet rs)
			throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setCandidateFirstName(rs.getString(COLUMN_CANDIDATE_FIRST_NAME));
		dto.setCandidateLastName(rs.getString(COLUMN_CANDIDATE_LAST_NAME));
		dto.setSkillSet(rs.getString(COLUMN_SKILL_SET));
		dto.setBillRate(rs.getString(COLUMN_BILL_RATE));
		dto.setPayRate(rs.getString(COLUMN_PAY_RATE));
		dto.setCity(rs.getString(COLUMN_CITY));
		dto.setState(rs.getString(COLUMN_STATE));
		dto.setRelocation(rs.getInt(COLUMN_RELOCATION));
		if (rs.wasNull()) {
			dto.setRelocationNull(true);
		}

		dto.setSecondarySkillSet(rs.getString(COLUMN_SECONDARY_SKILL_SET));
		dto.setEmailId(rs.getString(COLUMN_E_MAILID));
		dto.setVisaType(rs.getString(COLUMN_VISA_TYPE));
		dto.setVtCompName(rs.getString(COLUMN_VT_COMP_NAME));
		dto.setVtContPerson(rs.getString(COLUMN_VT_CONT_PERSON));
		dto.setVtContPhone(rs.getString(COLUMN_VT_CONT_PHONE));
		dto.setVtEmailId(rs.getString(COLUMN_VT_EMAIL_ID));
		dto.setHPhone(rs.getString(COLUMN_H_PHONE));
		dto.setCellNo(rs.getString(COLUMN_CELL_NO));
		dto.setRecrutId(rs.getInt(COLUMN_RECRUT_ID));
		dto.setResume(rs.getString(COLUMN_RESUME));
		dto.setHomePhoneNumber(rs.getString(COLUMN_HOME_PHONE_NUMBER));
		dto.setStatus(rs.getString(COLUMN_STATUS));
		dto.setIsDelete(rs.getInt(COLUMN_IS_DELETE));
		if (rs.wasNull()) {
			dto.setIsDeleteNull(true);
		}

		dto.setRegionId(rs.getInt(COLUMN_REGION_ID));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ResumeManagement dto) {
	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the
	 * specified arbitrary SQL statement
	 */
	public ResumeManagement[] findByDynamicSelect(String sql, Object[] sqlParams)
			throws ResumeManagementDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ResumeManagementDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the RESUME_MANAGEMENT table that match the
	 * specified arbitrary SQL statement
	 */
	public ResumeManagement[] findByDynamicWhere(String sql, Object[] sqlParams)
			throws ResumeManagementDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ResumeManagementDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}
	
	
	public Map<Integer,Integer> getIdRecruitIdMap() throws ResumeManagementDaoException{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "SELECT ID,RECRUT_ID FROM RESUME_MANAGEMENT";
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );	
		
			rs = stmt.executeQuery();
		
			// fetch the results
			Map<Integer,Integer>idRecrutIdMap = new HashMap<Integer,Integer>();
			while(rs.next()){
				idRecrutIdMap.put(rs.getInt("ID"),rs.getInt("RECRUT_ID"));
			}
			
			return idRecrutIdMap;
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ResumeManagementDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
	
	}	
	
	
	

}
