/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.ProfileInfoDao;
import com.dikshatech.portal.dto.ProfileInfo;
import com.dikshatech.portal.dto.ProfileInfoPk;
import com.dikshatech.portal.exceptions.ProfileInfoDaoException;

public class ProfileInfoDaoImpl extends AbstractDAO implements ProfileInfoDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger							= Logger.getLogger(ProfileInfoDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT						= "SELECT ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, MAIDEN_NAME, NATIONALITY, GENDER, DOB, OFFICAL_EMAIL_ID, HR_SPOC, REPORTING_MGR, DATE_OF_JOINING, DATE_OF_CONFIRMATION, MONTHS, DOC, EXTENSION, DATE_OF_SEPERATION, NOTICE_PERIOD, EMPLOYEE_TYPE, EMP_TYPE, CREATE_DATE, LEVEL_ID, REPORTING_TIME, REPORTING_ADDRESS, REPORTING_ADDRESS_NORMAL, MODIFIED_BY,LOCATION,CATEGORY FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT						= "INSERT INTO " + getTableName()
																			+ " ( ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, MAIDEN_NAME, NATIONALITY, GENDER, DOB, OFFICAL_EMAIL_ID, HR_SPOC, REPORTING_MGR, DATE_OF_JOINING, DATE_OF_CONFIRMATION, MONTHS, DOC, EXTENSION, DATE_OF_SEPERATION, NOTICE_PERIOD, EMPLOYEE_TYPE, EMP_TYPE, CREATE_DATE, LEVEL_ID, REPORTING_TIME, REPORTING_ADDRESS, REPORTING_ADDRESS_NORMAL , MODIFIED_BY , LOCATION , CATEGORY) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,? , ?)";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE						= "UPDATE "
																			+ getTableName()
																			+ " SET ID = ?, FIRST_NAME = ?, MIDDLE_NAME = ?, LAST_NAME = ?, MAIDEN_NAME = ?, NATIONALITY = ?, GENDER = ?, DOB = ?, OFFICAL_EMAIL_ID = ?, HR_SPOC = ?, REPORTING_MGR = ?, DATE_OF_JOINING = ?, DATE_OF_CONFIRMATION = ?, MONTHS = ?, DOC = ?, EXTENSION = ?, DATE_OF_SEPERATION = ?, NOTICE_PERIOD = ?, EMPLOYEE_TYPE = ?, EMP_TYPE = ?, CREATE_DATE = ?, LEVEL_ID = ?, REPORTING_TIME = ?, REPORTING_ADDRESS = ?, REPORTING_ADDRESS_NORMAL = ?, MODIFIED_BY=?,LOCATION=?,CATEGORY = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE						= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID						= 1;
	/**
	 * Index of column FIRST_NAME
	 */
	protected static final int		COLUMN_FIRST_NAME				= 2;
	/**
	 * Index of column MIDDLE_NAME
	 */
	protected static final int		COLUMN_MIDDLE_NAME				= 3;
	/**
	 * Index of column LAST_NAME
	 */
	protected static final int		COLUMN_LAST_NAME				= 4;
	/**
	 * Index of column MAIDEN_NAME
	 */
	protected static final int		COLUMN_MAIDEN_NAME				= 5;
	/**
	 * Index of column NATIONALITY
	 */
	protected static final int		COLUMN_NATIONALITY				= 6;
	/**
	 * Index of column GENDER
	 */
	protected static final int		COLUMN_GENDER					= 7;
	/**
	 * Index of column DOB
	 */
	protected static final int		COLUMN_DOB						= 8;
	/**
	 * Index of column OFFICAL_EMAIL_ID
	 */
	protected static final int		COLUMN_OFFICAL_EMAIL_ID			= 9;
	/**
	 * Index of column HR_SPOC
	 */
	protected static final int		COLUMN_HR_SPOC					= 10;
	/**
	 * Index of column REPORTING_MGR
	 */
	protected static final int		COLUMN_REPORTING_MGR			= 11;
	/**
	 * Index of column DATE_OF_JOINING
	 */
	protected static final int		COLUMN_DATE_OF_JOINING			= 12;
	/**
	 * Index of column DATE_OF_CONFIRMATION
	 */
	protected static final int		COLUMN_DATE_OF_CONFIRMATION		= 13;
	/**
	 * Index of column MONTHS
	 */
	protected static final int		COLUMN_MONTHS					= 14;
	/**
	 * Index of column DOC
	 */
	protected static final int		COLUMN_DOC						= 15;
	/**
	 * Index of column EXTENSION
	 */
	protected static final int		COLUMN_EXTENSION				= 16;
	/**
	 * Index of column DATE_OF_SEPERATION
	 */
	protected static final int		COLUMN_DATE_OF_SEPERATION		= 17;
	/**
	 * Index of column NOTICE_PERIOD
	 */
	protected static final int		COLUMN_NOTICE_PERIOD			= 18;
	/**
	 * Index of column EMPLOYEE_TYPE
	 */
	protected static final int		COLUMN_EMPLOYEE_TYPE			= 19;
	/**
	 * Index of column EMP_TYPE
	 */
	protected static final int		COLUMN_EMP_TYPE					= 20;
	/**
	 * Index of column CREATE_DATE
	 */
	protected static final int		COLUMN_CREATE_DATE				= 21;
	/**
	 * Index of column LEVEL_ID
	 */
	protected static final int		COLUMN_LEVEL_ID					= 22;
	/**
	 * Index of column REPORTING_TIME
	 */
	protected static final int		COLUMN_REPORTING_TIME			= 23;
	/**
	 * Index of column REPORTING_ADDRESS
	 */
	protected static final int		COLUMN_REPORTING_ADDRESS		= 24;
	/**
	 * Index of column REPORTING_ADDRESS_NORMAL
	 */
	protected static final int		COLUMN_REPORTING_ADDRESS_NORMAL	= 25;
	
	/**
	 * Index of column REPORTING_ADDRESS_NORMAL
	 */
	protected static final int		COLUMN_MODIFIED_BY	= 26;
	
	
	protected static final int		COLUMN_LOCATION	= 27;
	
	protected static final int		COLUMN_CATEGORY	= 28;
	
	
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS				= 28;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID					= 1;

	/**
	 * Inserts a new row in the PROFILE_INFO table.
	 */
	public ProfileInfoPk insert(ProfileInfo dto) throws ProfileInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setString(index++, dto.getFirstName());
			stmt.setString(index++, dto.getMiddleName());
			stmt.setString(index++, dto.getLastName());
			stmt.setString(index++, dto.getMaidenName());
			stmt.setString(index++, dto.getNationality());
			stmt.setString(index++, dto.getGender());
			stmt.setDate(index++, dto.getDob() == null ? null : new java.sql.Date(dto.getDob().getTime()));
			stmt.setString(index++, dto.getOfficalEmailId());
			if (dto.isHrSpocNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getHrSpoc());
			}
			if (dto.isReportingMgrNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getReportingMgr());
			}
			stmt.setDate(index++, dto.getDateOfJoining() == null ? null : new java.sql.Date(dto.getDateOfJoining().getTime()));
			stmt.setDate(index++, dto.getDateOfConfirmation() == null ? null : new java.sql.Date(dto.getDateOfConfirmation().getTime()));
			stmt.setString(index++, dto.getMonths());
			stmt.setDate(index++, dto.getDoc() == null ? null : new java.sql.Date(dto.getDoc().getTime()));
			stmt.setString(index++, dto.getExtension());
			stmt.setDate(index++, dto.getDateOfSeperation() == null ? null : new java.sql.Date(dto.getDateOfSeperation().getTime()));
			if (dto.isNoticePeriodNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getNoticePeriod());
			}
			stmt.setString(index++, dto.getEmployeeType());
			stmt.setString(index++, dto.getEmpType());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isLevelIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getLevelId());
			}
			stmt.setString(index++, dto.getReportingTime());
			stmt.setString(index++, dto.getReportingAddress());
			stmt.setString(index++, dto.getReportingAddressNormal());
			stmt.setInt(index++, dto.getModifiedBy());
			stmt.setString(index++, dto.getLocation());
			stmt.setString(index++, dto.getCategory());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the PROFILE_INFO table.
	 */
	public void update(ProfileInfoPk pk, ProfileInfo dto) throws ProfileInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());//2
			stmt.setString(index++, dto.getFirstName());
			stmt.setString(index++, dto.getMiddleName());
			stmt.setString(index++, dto.getLastName());
			stmt.setString(index++, dto.getMaidenName());
			stmt.setString(index++, dto.getNationality());
			stmt.setString(index++, dto.getGender());
			stmt.setDate(index++, dto.getDob() == null ? null : new java.sql.Date(dto.getDob().getTime()));
			stmt.setString(index++, dto.getOfficalEmailId());
			if (dto.isHrSpocNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getHrSpoc());
			}
			if (dto.isReportingMgrNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getReportingMgr());
			}
			stmt.setDate(index++, dto.getDateOfJoining() == null ? null : new java.sql.Date(dto.getDateOfJoining().getTime()));
			stmt.setDate(index++, dto.getDateOfConfirmation() == null ? null : new java.sql.Date(dto.getDateOfConfirmation().getTime()));
			stmt.setString(index++, dto.getMonths());
			stmt.setDate(index++, dto.getDoc() == null ? null : new java.sql.Date(dto.getDoc().getTime()));
			stmt.setString(index++, dto.getExtension());
			stmt.setDate(index++, dto.getDateOfSeperation() == null ? null : new java.sql.Date(dto.getDateOfSeperation().getTime()));
			if (dto.isNoticePeriodNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getNoticePeriod());
			}
			stmt.setString(index++, dto.getEmployeeType());
			stmt.setString(index++, dto.getEmpType());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isLevelIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getLevelId());
			}
			stmt.setString(index++, dto.getReportingTime());
			stmt.setString(index++, dto.getReportingAddress());
			stmt.setString(index++, dto.getReportingAddressNormal());
			stmt.setInt(index++, dto.getModifiedBy());//27
			stmt.setString(index++,dto.getLocation());
			stmt.setString(index++, dto.getCategory());
			stmt.setInt(29, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the PROFILE_INFO table.
	 */
	public void delete(ProfileInfoPk pk) throws ProfileInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the PROFILE_INFO table that matches the specified primary-key value.
	 */
	public ProfileInfo findByPrimaryKey(ProfileInfoPk pk) throws ProfileInfoDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'ID = :id'.
	 */
	public ProfileInfo findByPrimaryKey(int id) throws ProfileInfoDaoException {
		ProfileInfo ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	public ProfileInfo findWhereUserIdEquals(int userId) throws ProfileInfoDaoException {
		ProfileInfo ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ( SELECT MAX(PROFILE_ID) FROM USERS U WHERE U.ID = ?)", new Object[] { new Integer(userId) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria ''.
	 */
	public ProfileInfo[] findAll() throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'ID = :id'.
	 */
	public ProfileInfo[] findWhereIdEquals(int id) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'FIRST_NAME = :firstName'.
	 */
	public ProfileInfo[] findWhereFirstNameEquals(String firstName) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE FIRST_NAME = ? ORDER BY FIRST_NAME", new Object[] { firstName });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'MIDDLE_NAME = :middleName'.
	 */
	public ProfileInfo[] findWhereMiddleNameEquals(String middleName) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MIDDLE_NAME = ? ORDER BY MIDDLE_NAME", new Object[] { middleName });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'LAST_NAME = :lastName'.
	 */
	public ProfileInfo[] findWhereLastNameEquals(String lastName) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LAST_NAME = ? ORDER BY LAST_NAME", new Object[] { lastName });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'MAIDEN_NAME = :maidenName'.
	 */
	public ProfileInfo[] findWhereMaidenNameEquals(String maidenName) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MAIDEN_NAME = ? ORDER BY MAIDEN_NAME", new Object[] { maidenName });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'NATIONALITY = :nationality'.
	 */
	public ProfileInfo[] findWhereNationalityEquals(String nationality) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NATIONALITY = ? ORDER BY NATIONALITY", new Object[] { nationality });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'GENDER = :gender'.
	 */
	public ProfileInfo[] findWhereGenderEquals(String gender) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE GENDER = ? ORDER BY GENDER", new Object[] { gender });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'DOB = :dob'.
	 */
	public ProfileInfo[] findWhereDobEquals(Date dob) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DOB = ? ORDER BY DOB", new Object[] { dob == null ? null : new java.sql.Date(dob.getTime()) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'OFFICAL_EMAIL_ID = :officalEmailId'.
	 */
	public ProfileInfo[] findWhereOfficalEmailIdEquals(String officalEmailId) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE OFFICAL_EMAIL_ID = ? ORDER BY OFFICAL_EMAIL_ID", new Object[] { officalEmailId });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'HR_SPOC = :hrSpoc'.
	 */
	public ProfileInfo[] findWhereHrSpocEquals(int hrSpoc) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE HR_SPOC = ? ORDER BY HR_SPOC", new Object[] { new Integer(hrSpoc) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'REPORTING_MGR = :reportingMgr'.
	 */
	public ProfileInfo[] findWhereReportingMgrEquals(int reportingMgr) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORTING_MGR = ? ORDER BY REPORTING_MGR", new Object[] { new Integer(reportingMgr) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'DATE_OF_JOINING = :dateOfJoining'.
	 */
	public ProfileInfo[] findWhereDateOfJoiningEquals(Date dateOfJoining) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DATE_OF_JOINING = ? ORDER BY DATE_OF_JOINING", new Object[] { dateOfJoining == null ? null : new java.sql.Date(dateOfJoining.getTime()) });
	}
	/**
	 *  @author atul.patil
	 * findWhereDateOfJoiningEqualsCurremtDate function for Returns all rows from the PROFILE_INFO table that match the criteria 'DATE_OF_JOINING = currentMonth and currentDate And ID>3'
	 */
	public ProfileInfo[] findWhereDateOfJoiningEqualsCurremtDate(String month, String date) throws ProfileInfoDaoException {
		return findDayOfJoiningByDynamicSelect(SQL_SELECT + " WHERE MONTH(DATE_OF_JOINING) = ? AND DAY(DATE_OF_JOINING) = ? AND ID>3", new Object[] {month,date });
	}
	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'DATE_OF_CONFIRMATION = :dateOfConfirmation'.
	 */
	public ProfileInfo[] findWhereDateOfConfirmationEquals(Date dateOfConfirmation) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DATE_OF_CONFIRMATION = ? ORDER BY DATE_OF_CONFIRMATION", new Object[] { dateOfConfirmation == null ? null : new java.sql.Date(dateOfConfirmation.getTime()) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'MONTHS = :months'.
	 */
	public ProfileInfo[] findWhereMonthsEquals(String months) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MONTHS = ? ORDER BY MONTHS", new Object[] { months });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'DOC = :doc'.
	 */
	public ProfileInfo[] findWhereDocEquals(Date doc) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DOC = ? ORDER BY DOC", new Object[] { doc == null ? null : new java.sql.Date(doc.getTime()) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the extension 'EXTENSION = :extension'.
	 */
	public ProfileInfo[] findWhereExtensionEquals(String extension) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXTENSION = ? ORDER BY EXTENSION", new Object[] { extension });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'DATE_OF_SEPERATION = :dateOfSeperation'.
	 */
	public ProfileInfo[] findWhereDateOfSeperationEquals(Date dateOfSeperation) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DATE_OF_SEPERATION = ? ORDER BY DATE_OF_SEPERATION", new Object[] { dateOfSeperation == null ? null : new java.sql.Date(dateOfSeperation.getTime()) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'NOTICE_PERIOD = :noticePeriod'.
	 */
	public ProfileInfo[] findWhereNoticePeriodEquals(int noticePeriod) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NOTICE_PERIOD = ? ORDER BY NOTICE_PERIOD", new Object[] { new Integer(noticePeriod) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'EMPLOYEE_TYPE = :employeeType'.
	 */
	public ProfileInfo[] findWhereEmployeeTypeEquals(String employeeType) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EMPLOYEE_TYPE = ? ORDER BY EMPLOYEE_TYPE", new Object[] { employeeType });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'EMP_TYPE = :empType'.
	 */
	public ProfileInfo[] findWhereEmpTypeEquals(String empType) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EMP_TYPE = ? ORDER BY EMP_TYPE", new Object[] { empType });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ProfileInfo[] findWhereCreateDateEquals(Date createDate) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate == null ? null : new java.sql.Timestamp(createDate.getTime()) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria ' ID IN
	 * (SELECT PROFILE_ID FROM USERS WHERE STATUS= :status AND REG_DIV_ID IN(SELECT ID FROM REG_DIV_MAP
	 * WHERE REGION_ID = :regionId))'.
	 */
	//status 0 is active
	public ProfileInfo[] findByRegionId(int regionId) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE  ID IN (SELECT PROFILE_ID FROM USERS WHERE STATUS=0 AND LEVEL_ID IN (SELECT ID FROM LEVELS  WHERE DIVISION_ID IN (SELECT ID FROM DIVISON WHERE REGION_ID = ?)))", new Object[] { regionId });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public ProfileInfo[] findWhereLevelIdEquals(int levelId) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEVEL_ID = ? ORDER BY LEVEL_ID", new Object[] { new Integer(levelId) });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'REPORTING_TIME = :reportingTime'.
	 */
	public ProfileInfo[] findWhereReportingTimeEquals(String reportingTime) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORTING_TIME = ? ORDER BY REPORTING_TIME", new Object[] { reportingTime });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'REPORTING_ADDRESS = :reportingAddress'.
	 */
	public ProfileInfo[] findWhereReportingAddressEquals(byte[] reportingAddress) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORTING_ADDRESS = ? ORDER BY REPORTING_ADDRESS", new Object[] { reportingAddress });
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the criteria 'REPORTING_ADDRESS_NORMAL = :reportingAddressNormal'.
	 */
	public ProfileInfo[] findWhereReportingAddressNormalEquals(String reportingAddressNormal) throws ProfileInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORTING_ADDRESS_NORMAL = ? ORDER BY REPORTING_ADDRESS_NORMAL", new Object[] { reportingAddressNormal });
	}

	/**
	 * Method 'ProfileInfoDaoImpl'
	 */
	public ProfileInfoDaoImpl() {}

	/**
	 * Method 'ProfileInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProfileInfoDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "PROFILE_INFO";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected ProfileInfo fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			ProfileInfo dto = new ProfileInfo();
			populateDto(dto, rs);
			return dto;
		}
		return null;
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected ProfileInfo[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<ProfileInfo> resultList = new ArrayList<ProfileInfo>();
		while (rs.next()){
			ProfileInfo dto = new ProfileInfo();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		ProfileInfo ret[] = new ProfileInfo[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	
	
	protected ProfileInfo[] fetchMultiResultsJ(ResultSet rs) throws SQLException {
		Collection<ProfileInfo> resultList = new ArrayList<ProfileInfo>();
		while (rs.next()){
			ProfileInfo dto = new ProfileInfo();
			populateDtoJ(dto, rs);
			resultList.add(dto);
		}
		ProfileInfo ret[] = new ProfileInfo[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProfileInfo dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setFirstName(rs.getString(COLUMN_FIRST_NAME));
		dto.setMiddleName(rs.getString(COLUMN_MIDDLE_NAME));
		dto.setLastName(rs.getString(COLUMN_LAST_NAME));
		dto.setMaidenName(rs.getString(COLUMN_MAIDEN_NAME));
		dto.setNationality(rs.getString(COLUMN_NATIONALITY));
		dto.setGender(rs.getString(COLUMN_GENDER));
		dto.setDob(rs.getDate(COLUMN_DOB));
		dto.setOfficalEmailId(rs.getString(COLUMN_OFFICAL_EMAIL_ID));
		dto.setHrSpoc(rs.getInt(COLUMN_HR_SPOC));
		if (rs.wasNull()){
			dto.setHrSpocNull(true);
		}
		dto.setReportingMgr(rs.getInt(COLUMN_REPORTING_MGR));
		if (rs.wasNull()){
			dto.setReportingMgrNull(true);
		}
		dto.setDateOfJoining(rs.getDate(COLUMN_DATE_OF_JOINING));
		dto.setDateOfConfirmation(rs.getDate(COLUMN_DATE_OF_CONFIRMATION));
		dto.setMonths(rs.getString(COLUMN_MONTHS));
		dto.setDoc(rs.getDate(COLUMN_DOC));
		dto.setExtension(rs.getString(COLUMN_EXTENSION));
		dto.setDateOfSeperation(rs.getDate(COLUMN_DATE_OF_SEPERATION));
		dto.setNoticePeriod(rs.getInt(COLUMN_NOTICE_PERIOD));
		if (rs.wasNull()){
			dto.setNoticePeriodNull(true);
		}
		dto.setEmployeeType(rs.getString(COLUMN_EMPLOYEE_TYPE));
		dto.setEmpType(rs.getString(COLUMN_EMP_TYPE));
		dto.setCreateDate(rs.getTimestamp(COLUMN_CREATE_DATE));
		dto.setLevelId(rs.getInt(COLUMN_LEVEL_ID));
		if (rs.wasNull()){
			dto.setLevelIdNull(true);
		}
		dto.setReportingTime(rs.getString(COLUMN_REPORTING_TIME));
		dto.setReportingAddress(rs.getString(COLUMN_REPORTING_ADDRESS));
		dto.setReportingAddressNormal(rs.getString(COLUMN_REPORTING_ADDRESS_NORMAL));
		dto.setModifiedBy(rs.getInt(COLUMN_MODIFIED_BY));
		dto.setLocation(rs.getString(COLUMN_LOCATION));
		dto.setCategory(rs.getString(COLUMN_CATEGORY));
	}

	
	protected void populateDtoJ(ProfileInfo dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		
	}
	
	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProfileInfo dto) {}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the specified arbitrary SQL statement
	 */
	public ProfileInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	public ProfileInfo[] findByDynamicSelect1(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults1(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the PROFILE_INFO table that match the specified arbitrary SQL statement
	 */
	public int findByDynamicUpdate(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		int rs = 0;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeUpdate();
			// fetch the results
			return rs;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public ProfileInfo[] findDayOfJoiningByDynamicSelect(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	public ProfileInfo[] findByUserId(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResultsJ(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	
	/**
	 * Returns all rows from the PROFILE_INFO table that match the specified arbitrary SQL statement
	 */
	public ProfileInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public Integer[] findByDistinct(String columnName) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT DISTINCT " + columnName + " FROM PROFILE_INFO";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.createStatement();
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery(SQL);
			// fetch the results
			List<Integer> resultList = new ArrayList<Integer>();
			while (rs.next())
				resultList.add(rs.getInt(columnName));
			return (Integer[]) resultList.toArray(new Integer[resultList.size()]);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * @param whereClause
	 * @return returns distinct mail ids for given where clause.
	 * Query : "SELECT DISTINCT(PI.OFFICAL_EMAIL_ID) FROM PROFILE_INFO PI " + whereClause;
	 */
	public String[] findOfficalMailIdsWhere(String whereClause) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT DISTINCT(PI.OFFICAL_EMAIL_ID) FROM PROFILE_INFO PI " + whereClause;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.createStatement();
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery(SQL);
			// fetch the results
			HashSet<String> returnSet = new HashSet<String>();
			while (rs.next())
				returnSet.add(rs.getString("OFFICAL_EMAIL_ID"));
			if (returnSet.isEmpty()) return null;
			String fetchedData = returnSet.toString().replace("[", " ").replace("]", " ").trim();
			return fetchedData.split(",");
		} catch (Exception _e){
			logger.error("Unable to get email ids for follwing where caulse :'" + whereClause + "'");
			logger.error("Exception: " + _e.getMessage());
			//throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return new String[] {};
	}
	protected ProfileInfo[] fetchMultiResults1(ResultSet rs) throws SQLException {
		Collection<ProfileInfo> resultList = new ArrayList<ProfileInfo>();
		while (rs.next()){
			ProfileInfo dto = new ProfileInfo();
			populateDto1(dto, rs);
			resultList.add(dto);
		}
		ProfileInfo ret[] = new ProfileInfo[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	protected void populateDto1(ProfileInfo dto, ResultSet rs) throws SQLException {
		int index = 1;
		dto.setEmployeeName(rs.getString(index++));
		
	/*	dto.setId( rs.getInt( index++) );*/





}

	@Override
	public ProfileInfo[] findByOfficialEmailId(String sql, Object[] sqlParams) throws ProfileInfoDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			Collection<ProfileInfo> resultList = new ArrayList<ProfileInfo>();
			while (rs.next()){
				ProfileInfo dto = new ProfileInfo();
				populateDtoAmount(dto, rs);
				resultList.add(dto);
			}
			ProfileInfo ret[] = new ProfileInfo[resultList.size()];
			resultList.toArray(ret);
			return ret;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
}

	private void populateDtoAmount(ProfileInfo dto, ResultSet rs) throws SQLException {
		int index = 1;
		dto.setOfficalEmailId(rs.getString(index++));
		
	}
	
}