/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.UserTaskTimesheetMapDao;
import com.dikshatech.portal.dto.UserTaskTimesheetMap;
import com.dikshatech.portal.dto.UserTaskTimesheetMapPk;
import com.dikshatech.portal.exceptions.UserTaskTimesheetMapDaoException;

public class UserTaskTimesheetMapDaoImpl extends AbstractDAO implements UserTaskTimesheetMapDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger				= Logger.getLogger(UserTaskTimesheetMapDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT			= "SELECT ID, ETC, TOTAL_ETC, TASK_NAME, PROJECT_ID, TS_ID, MON, TUE, WED, THU, FRI, SAT, SUN FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT			= "INSERT INTO " + getTableName() + " ( ID, ETC, TOTAL_ETC, TASK_NAME, PROJECT_ID, TS_ID, MON, TUE, WED, THU, FRI, SAT, SUN ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE			= "UPDATE " + getTableName() + " SET ID = ?, ETC = ?, TOTAL_ETC = ?, TASK_NAME = ?, PROJECT_ID = ?, TS_ID = ?, MON = ?, TUE = ?, WED = ?, THU = ?, FRI = ?, SAT = ?, SUN = ?  WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE			= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID			= 1;
	/**
	 * Index of column ETC
	 */
	protected static final int		COLUMN_ETC			= 2;
	/**
	 * Index of column TOTAL_ETC
	 */
	protected static final int		COLUMN_TOTAL_ETC	= 3;
	/**
	 * Index of column TASK_NAME
	 */
	protected static final int		COLUMN_TASK_NAME	= 4;
	/**
	 * Index of column PROJECT_ID
	 */
	protected static final int		COLUMN_PROJECT_ID	= 5;
	/**
	 * Index of column TS_ID
	 */
	protected static final int		COLUMN_TS_ID		= 6;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS	= 6;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID		= 1;

	/**
	 * Inserts a new row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public UserTaskTimesheetMapPk insert(UserTaskTimesheetMap dto) throws UserTaskTimesheetMapDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setFloat(index++, dto.getEtc());
			stmt.setFloat(index++, dto.getTotalEtc());
			stmt.setString(index++, dto.getTaskName());
			stmt.setInt(index++, dto.getProjectId());
			stmt.setInt(index++, dto.getTsId());
			stmt.setString(index++, dto.getMon());
			stmt.setString(index++, dto.getTue());
			stmt.setString(index++, dto.getWed());
			stmt.setString(index++, dto.getThu());
			stmt.setString(index++, dto.getFri());
			stmt.setString(index++, dto.getSat());
			stmt.setString(index++, dto.getSun());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UserTaskTimesheetMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public void update(UserTaskTimesheetMapPk pk, UserTaskTimesheetMap dto) throws UserTaskTimesheetMapDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setFloat(index++, dto.getEtc());
			stmt.setFloat(index++, dto.getTotalEtc());
			stmt.setString(index++, dto.getTaskName());
			stmt.setInt(index++, dto.getProjectId());
			stmt.setInt(index++, dto.getTsId());
			stmt.setString(index++, dto.getMon());
			stmt.setString(index++, dto.getTue());
			stmt.setString(index++, dto.getWed());
			stmt.setString(index++, dto.getThu());
			stmt.setString(index++, dto.getFri());
			stmt.setString(index++, dto.getSat());
			stmt.setString(index++, dto.getSun());
			stmt.setInt(index++, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UserTaskTimesheetMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public void delete(UserTaskTimesheetMapPk pk) throws UserTaskTimesheetMapDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UserTaskTimesheetMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the USER_TASK_TIMESHEET_MAP table that matches the specified primary-key value.
	 */
	public UserTaskTimesheetMap findByPrimaryKey(UserTaskTimesheetMapPk pk) throws UserTaskTimesheetMapDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ID = :id'.
	 */
	public UserTaskTimesheetMap findByPrimaryKey(int id) throws UserTaskTimesheetMapDaoException {
		UserTaskTimesheetMap ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria ''.
	 */
	public UserTaskTimesheetMap[] findAll() throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ID = :id'.
	 */
	public UserTaskTimesheetMap[] findWhereIdEquals(int id) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ETC = :etc'.
	 */
	public UserTaskTimesheetMap[] findWhereEtcEquals(float etc) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ETC = ? ORDER BY ETC", new Object[] { new Float(etc) });
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TOTAL_ETC = :totalEtc'.
	 */
	public UserTaskTimesheetMap[] findWhereTotalEtcEquals(float totalEtc) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TOTAL_ETC = ? ORDER BY TOTAL_ETC", new Object[] { new Float(totalEtc) });
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TASK_NAME = :taskName'.
	 */
	public UserTaskTimesheetMap[] findWhereTaskNameEquals(String taskName) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TASK_NAME = ? ORDER BY TASK_NAME", new Object[] { taskName });
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'PROJECT_ID = :projectId'.
	 */
	public UserTaskTimesheetMap[] findWhereProjectIdEquals(int projectId) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PROJECT_ID = ? ORDER BY PROJECT_ID", new Object[] { new Integer(projectId) });
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TS_ID = :tsId'.
	 */
	public UserTaskTimesheetMap[] findWhereTsIdEquals(int tsId) throws UserTaskTimesheetMapDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TS_ID = ? ORDER BY TS_ID", new Object[] { new Integer(tsId) });
	}

	/**
	 * Method 'UserTaskTimesheetMapDaoImpl'
	 */
	public UserTaskTimesheetMapDaoImpl() {}

	/**
	 * Method 'UserTaskTimesheetMapDaoImpl'
	 * 
	 * @param userConn
	 */
	public UserTaskTimesheetMapDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "USER_TASK_TIMESHEET_MAP";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected UserTaskTimesheetMap fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			UserTaskTimesheetMap dto = new UserTaskTimesheetMap();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected UserTaskTimesheetMap[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<UserTaskTimesheetMap> resultList = new ArrayList<UserTaskTimesheetMap>();
		while (rs.next()){
			UserTaskTimesheetMap dto = new UserTaskTimesheetMap();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		UserTaskTimesheetMap ret[] = new UserTaskTimesheetMap[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UserTaskTimesheetMap dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setEtc(rs.getFloat(COLUMN_ETC));
		dto.setTotalEtc(rs.getFloat(COLUMN_TOTAL_ETC));
		dto.setTaskName(rs.getString(COLUMN_TASK_NAME));
		dto.setProjectId(rs.getInt(COLUMN_PROJECT_ID));
		dto.setTsId(rs.getInt(COLUMN_TS_ID));
		dto.setMon(rs.getString(7));
		dto.setTue(rs.getString(8));
		dto.setWed(rs.getString(9));
		dto.setThu(rs.getString(10));
		dto.setFri(rs.getString(11));
		dto.setSat(rs.getString(12));
		dto.setSun(rs.getString(13));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UserTaskTimesheetMap dto) {}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the specified arbitrary SQL statement
	 */
	public UserTaskTimesheetMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserTaskTimesheetMapDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UserTaskTimesheetMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the specified arbitrary SQL statement
	 */
	public UserTaskTimesheetMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserTaskTimesheetMapDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UserTaskTimesheetMapDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
