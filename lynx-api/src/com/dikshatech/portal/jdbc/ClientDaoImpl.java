/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.ClientDao;
import com.dikshatech.portal.dto.Client;
import com.dikshatech.portal.dto.ClientPk;
import com.dikshatech.portal.exceptions.ClientDaoException;

public class ClientDaoImpl extends AbstractDAO implements ClientDao
{
	protected static final Logger	logger				= Logger.getLogger(ClientDaoImpl.class);
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, REGION_ID, DEPT_ID, NAME, DESCRIPTION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, REGION_ID, DEPT_ID, NAME, DESCRIPTION ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, REGION_ID = ?, DEPT_ID = ?, NAME = ?, DESCRIPTION = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column REGION_ID
	 */
	protected static final int COLUMN_REGION_ID = 2;

	/** 
	 * Index of column DEPT_ID
	 */
	protected static final int COLUMN_DEPT_ID = 3;

	/** 
	 * Index of column NAME
	 */
	protected static final int COLUMN_NAME = 4;

	/** 
	 * Index of column DESCRIPTION
	 */
	protected static final int COLUMN_DESCRIPTION = 5;
	
	protected static final int PROJECTS = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the CLIENT table.
	 */
	public ClientPk insert(Client dto) throws ClientDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getRegionId() );
			stmt.setInt( index++, dto.getDeptId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDescription() );
			logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CLIENT table.
	 */
	public void update(ClientPk pk, Client dto) throws ClientDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getRegionId() );
			stmt.setInt( index++, dto.getDeptId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setInt( 6, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CLIENT table.
	 */
	public void delete(ClientPk pk) throws ClientDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CLIENT table that matches the specified primary-key value.
	 */
	public Client findByPrimaryKey(ClientPk pk) throws ClientDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'ID = :id'.
	 */
	public Client findByPrimaryKey(int id) throws ClientDaoException
	{
		Client ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria ''.
	 */
	public Client[] findAll() throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'ID = :id'.
	 */
	public Client[] findWhereIdEquals(int id) throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'REGION_ID = :regionId'.
	 */
	public Client[] findWhereRegionIdEquals(int regionId) throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGION_ID = ? ORDER BY REGION_ID", new Object[] {  new Integer(regionId) } );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'DEPT_ID = :deptId'.
	 */
	public Client[] findWhereDeptIdEquals(int deptId) throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEPT_ID = ? ORDER BY DEPT_ID", new Object[] {  new Integer(deptId) } );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'NAME = :name'.
	 */
	public Client[] findWhereNameEquals(String name) throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the CLIENT table that match the criteria 'DESCRIPTION = :description'.
	 */
	public Client[] findWhereDescriptionEquals(String description) throws ClientDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description } );
	}

	/**
	 * Method 'ClientDaoImpl'
	 * 
	 */
	public ClientDaoImpl()
	{
	}

	/**
	 * Method 'ClientDaoImpl'
	 * 
	 * @param userConn
	 */
	public ClientDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CLIENT";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Client fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Client dto = new Client();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Client[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Client> resultList = new ArrayList<Client>();
		while (rs.next()) {
			Client dto = new Client();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Client ret[] = new Client[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Client dto, ResultSet rs) throws SQLException
	{
		
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setRegionId( rs.getInt( COLUMN_REGION_ID ) );
		dto.setDeptId( rs.getInt( COLUMN_DEPT_ID ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		/*if(rs.findColumn("PROJECTS")!=0)
			dto.setNoOfProjects(rs.getInt(PROJECTS));*/
		
		ResultSetMetaData rsMetaData = rs.getMetaData();
		if(rsMetaData.getColumnCount()>5)
		if(rsMetaData.getColumnName(PROJECTS)!=null)
			dto.setNoOfProjects(rs.getInt(PROJECTS));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Client dto)
	{
	}

	/** 
	 * Returns all rows from the CLIENT table that match the specified arbitrary SQL statement
	 */
	public Client[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClientDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CLIENT table that match the specified arbitrary SQL statement
	 */
	public Client[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClientDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
