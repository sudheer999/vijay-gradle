/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.InsurancePolicyReqDao;
import com.dikshatech.portal.dto.InsurancePolicyReq;
import com.dikshatech.portal.dto.InsurancePolicyReqPk;
import com.dikshatech.portal.exceptions.InsurancePolicyReqDaoException;

public class InsurancePolicyReqDaoImpl extends AbstractDAO implements InsurancePolicyReqDao
{
	protected static final Logger	logger				= Logger.getLogger(InsurancePolicyReqDaoImpl.class);
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, STATUS, REQUETER_ID, POLICY_NUMBER, POLICY_TYPE, COVERAGE, COVERAGE_FROM, COVERAGE_UPTO, DELIVERY_ADDRESS, BASIC_PREMIUM, SERVICE_TAX, REQUESTED_ON, DATE_OF_COMPLETION, TOTAL_PREMIUM, INSURANCE_COMPANY_NAME FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, STATUS, REQUETER_ID, POLICY_NUMBER, POLICY_TYPE, COVERAGE, COVERAGE_FROM, COVERAGE_UPTO, DELIVERY_ADDRESS, BASIC_PREMIUM, SERVICE_TAX, REQUESTED_ON, DATE_OF_COMPLETION, TOTAL_PREMIUM, INSURANCE_COMPANY_NAME ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, STATUS = ?, REQUETER_ID = ?, POLICY_NUMBER = ?, POLICY_TYPE = ?, COVERAGE = ?, COVERAGE_FROM = ?, COVERAGE_UPTO = ?, DELIVERY_ADDRESS = ?, BASIC_PREMIUM = ?, SERVICE_TAX = ?, REQUESTED_ON = ?, DATE_OF_COMPLETION = ?, TOTAL_PREMIUM = ?, INSURANCE_COMPANY_NAME = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 3;

	/** 
	 * Index of column REQUETER_ID
	 */
	protected static final int COLUMN_REQUETER_ID = 4;

	/** 
	 * Index of column POLICY_NUMBER
	 */
	protected static final int COLUMN_POLICY_NUMBER = 5;

	/** 
	 * Index of column POLICY_TYPE
	 */
	protected static final int COLUMN_POLICY_TYPE = 6;

	/** 
	 * Index of column COVERAGE
	 */
	protected static final int COLUMN_COVERAGE = 7;

	/** 
	 * Index of column COVERAGE_FROM
	 */
	protected static final int COLUMN_COVERAGE_FROM = 8;

	/** 
	 * Index of column COVERAGE_UPTO
	 */
	protected static final int COLUMN_COVERAGE_UPTO = 9;

	/** 
	 * Index of column DELIVERY_ADDRESS
	 */
	protected static final int COLUMN_DELIVERY_ADDRESS = 10;

	/** 
	 * Index of column BASIC_PREMIUM
	 */
	protected static final int COLUMN_BASIC_PREMIUM = 11;

	/** 
	 * Index of column SERVICE_TAX
	 */
	protected static final int COLUMN_SERVICE_TAX = 12;

	/** 
	 * Index of column REQUESTED_ON
	 */
	protected static final int COLUMN_REQUESTED_ON = 13;

	/** 
	 * Index of column DATE_OF_COMPLETION
	 */
	protected static final int COLUMN_DATE_OF_COMPLETION = 14;

	/** 
	 * Index of column TOTAL_PREMIUM
	 */
	protected static final int COLUMN_TOTAL_PREMIUM = 15;

	/** 
	 * Index of column INSURANCE_COMPANY_NAME
	 */
	protected static final int COLUMN_INSURANCE_COMPANY_NAME = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the INSURANCE_POLICY_REQ table.
	 */
	public InsurancePolicyReqPk insert(InsurancePolicyReq dto) throws InsurancePolicyReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isRequeterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequeterId() );
			}
		
			stmt.setString( index++, dto.getPolicyNumber() );
			stmt.setString( index++, dto.getPolicyType() );
			if (dto.isCoverageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCoverage() );
			}
		
			stmt.setDate(index++, dto.getCoverageFrom()==null ? null : new java.sql.Date( dto.getCoverageFrom().getTime() ) );
			stmt.setDate(index++, dto.getCoverageUpto()==null ? null : new java.sql.Date( dto.getCoverageUpto().getTime() ) );
			stmt.setString( index++, dto.getDeliveryAddress() );
			if (dto.isBasicPremiumNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBasicPremium() );
			}
		
			if (dto.isServiceTaxNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getServiceTax() );
			}
		
			stmt.setTimestamp(index++, dto.getRequestedOn()==null ? null : new java.sql.Timestamp( dto.getRequestedOn().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateOfCompletion()==null ? null : new java.sql.Timestamp( dto.getDateOfCompletion().getTime() ) );
			if (dto.isTotalPremiumNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getTotalPremium() );
			}
		
			stmt.setString( index++, dto.getInsuranceCompanyName() );
			logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsurancePolicyReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the INSURANCE_POLICY_REQ table.
	 */
	public void update(InsurancePolicyReqPk pk, InsurancePolicyReq dto) throws InsurancePolicyReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isRequeterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequeterId() );
			}
		
			stmt.setString( index++, dto.getPolicyNumber() );
			stmt.setString( index++, dto.getPolicyType() );
			if (dto.isCoverageNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCoverage() );
			}
		
			stmt.setDate(index++, dto.getCoverageFrom()==null ? null : new java.sql.Date( dto.getCoverageFrom().getTime() ) );
			stmt.setDate(index++, dto.getCoverageUpto()==null ? null : new java.sql.Date( dto.getCoverageUpto().getTime() ) );
			stmt.setString( index++, dto.getDeliveryAddress() );
			if (dto.isBasicPremiumNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBasicPremium() );
			}
		
			if (dto.isServiceTaxNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getServiceTax() );
			}
		
			stmt.setTimestamp(index++, dto.getRequestedOn()==null ? null : new java.sql.Timestamp( dto.getRequestedOn().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateOfCompletion()==null ? null : new java.sql.Timestamp( dto.getDateOfCompletion().getTime() ) );
			if (dto.isTotalPremiumNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getTotalPremium() );
			}
		
			stmt.setString( index++, dto.getInsuranceCompanyName() );
			stmt.setInt( 17, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsurancePolicyReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the INSURANCE_POLICY_REQ table.
	 */
	public void delete(InsurancePolicyReqPk pk) throws InsurancePolicyReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsurancePolicyReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the INSURANCE_POLICY_REQ table that matches the specified primary-key value.
	 */
	public InsurancePolicyReq findByPrimaryKey(InsurancePolicyReqPk pk) throws InsurancePolicyReqDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ID = :id'.
	 */
	public InsurancePolicyReq findByPrimaryKey(int id) throws InsurancePolicyReqDaoException
	{
		InsurancePolicyReq ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria ''.
	 */
	public InsurancePolicyReq[] findAll() throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ID = :id'.
	 */
	public InsurancePolicyReq[] findWhereIdEquals(Integer id) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { id } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public InsurancePolicyReq[] findWhereEsrMapIdEquals(Integer esrMapId) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] { esrMapId } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'STATUS = :status'.
	 */
	public InsurancePolicyReq[] findWhereStatusEquals(String status) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'REQUETER_ID = :requeterId'.
	 */
	public InsurancePolicyReq[] findWhereRequeterIdEquals(Integer requeterId) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUETER_ID = ? ORDER BY REQUETER_ID", new Object[] { requeterId } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'POLICY_NUMBER = :policyNumber'.
	 */
	public InsurancePolicyReq[] findWherePolicyNumberEquals(String policyNumber) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLICY_NUMBER = ? ORDER BY POLICY_NUMBER", new Object[] { policyNumber } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'POLICY_TYPE = :policyType'.
	 */
	public InsurancePolicyReq[] findWherePolicyTypeEquals(String policyType) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLICY_TYPE = ? ORDER BY POLICY_TYPE", new Object[] { policyType } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE = :coverage'.
	 */
	public InsurancePolicyReq[] findWhereCoverageEquals(Integer coverage) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COVERAGE = ? ORDER BY COVERAGE", new Object[] { coverage } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE_FROM = :coverageFrom'.
	 */
	public InsurancePolicyReq[] findWhereCoverageFromEquals(Date coverageFrom) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COVERAGE_FROM = ? ORDER BY COVERAGE_FROM", new Object[] { coverageFrom==null ? null : new java.sql.Date( coverageFrom.getTime() ) } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE_UPTO = :coverageUpto'.
	 */
	public InsurancePolicyReq[] findWhereCoverageUptoEquals(Date coverageUpto) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COVERAGE_UPTO = ? ORDER BY COVERAGE_UPTO", new Object[] { coverageUpto==null ? null : new java.sql.Date( coverageUpto.getTime() ) } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'DELIVERY_ADDRESS = :deliveryAddress'.
	 */
	public InsurancePolicyReq[] findWhereDeliveryAddressEquals(String deliveryAddress) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DELIVERY_ADDRESS = ? ORDER BY DELIVERY_ADDRESS", new Object[] { deliveryAddress } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'BASIC_PREMIUM = :basicPremium'.
	 */
	public InsurancePolicyReq[] findWhereBasicPremiumEquals(Integer basicPremium) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BASIC_PREMIUM = ? ORDER BY BASIC_PREMIUM", new Object[] { basicPremium } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'SERVICE_TAX = :serviceTax'.
	 */
	public InsurancePolicyReq[] findWhereServiceTaxEquals(Integer serviceTax) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICE_TAX = ? ORDER BY SERVICE_TAX", new Object[] { serviceTax } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'REQUESTED_ON = :requestedOn'.
	 */
	public InsurancePolicyReq[] findWhereRequestedOnEquals(Date requestedOn) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTED_ON = ? ORDER BY REQUESTED_ON", new Object[] { requestedOn==null ? null : new java.sql.Timestamp( requestedOn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'DATE_OF_COMPLETION = :dateOfCompletion'.
	 */
	public InsurancePolicyReq[] findWhereDateOfCompletionEquals(Date dateOfCompletion) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_OF_COMPLETION = ? ORDER BY DATE_OF_COMPLETION", new Object[] { dateOfCompletion==null ? null : new java.sql.Timestamp( dateOfCompletion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'TOTAL_PREMIUM = :totalPremium'.
	 */
	public InsurancePolicyReq[] findWhereTotalPremiumEquals(Integer totalPremium) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TOTAL_PREMIUM = ? ORDER BY TOTAL_PREMIUM", new Object[] { totalPremium } );
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'INSURANCE_COMPANY_NAME = :insuranceCompanyName'.
	 */
	public InsurancePolicyReq[] findWhereInsuranceCompanyNameEquals(String insuranceCompanyName) throws InsurancePolicyReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSURANCE_COMPANY_NAME = ? ORDER BY INSURANCE_COMPANY_NAME", new Object[] { insuranceCompanyName } );
	}

	/**
	 * Method 'InsurancePolicyReqDaoImpl'
	 * 
	 */
	public InsurancePolicyReqDaoImpl()
	{
	}

	/**
	 * Method 'InsurancePolicyReqDaoImpl'
	 * 
	 * @param userConn
	 */
	public InsurancePolicyReqDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "INSURANCE_POLICY_REQ";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected InsurancePolicyReq fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			InsurancePolicyReq dto = new InsurancePolicyReq();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected InsurancePolicyReq[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<InsurancePolicyReq> resultList = new ArrayList<InsurancePolicyReq>();
		while (rs.next()) {
			InsurancePolicyReq dto = new InsurancePolicyReq();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		InsurancePolicyReq ret[] = new InsurancePolicyReq[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(InsurancePolicyReq dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setRequeterId( rs.getInt( COLUMN_REQUETER_ID ) );
		if (rs.wasNull()) {
			dto.setRequeterIdNull( true );
		}
		
		dto.setPolicyNumber( rs.getString( COLUMN_POLICY_NUMBER ) );
		dto.setPolicyType( rs.getString( COLUMN_POLICY_TYPE ) );
		dto.setCoverage( rs.getInt( COLUMN_COVERAGE ) );
		if (rs.wasNull()) {
			dto.setCoverageNull( true );
		}
		
		dto.setCoverageFrom( rs.getDate(COLUMN_COVERAGE_FROM ) );
		dto.setCoverageUpto( rs.getDate(COLUMN_COVERAGE_UPTO ) );
		dto.setDeliveryAddress( rs.getString( COLUMN_DELIVERY_ADDRESS ) );
		dto.setBasicPremium( rs.getInt( COLUMN_BASIC_PREMIUM ) );
		if (rs.wasNull()) {
			dto.setBasicPremiumNull( true );
		}
		
		dto.setServiceTax( rs.getInt( COLUMN_SERVICE_TAX ) );
		if (rs.wasNull()) {
			dto.setServiceTaxNull( true );
		}
		
		dto.setRequestedOn( rs.getTimestamp(COLUMN_REQUESTED_ON ) );
		dto.setDateOfCompletion( rs.getTimestamp(COLUMN_DATE_OF_COMPLETION ) );
		dto.setTotalPremium( rs.getInt( COLUMN_TOTAL_PREMIUM ) );
		if (rs.wasNull()) {
			dto.setTotalPremiumNull( true );
		}
		
		dto.setInsuranceCompanyName( rs.getString( COLUMN_INSURANCE_COMPANY_NAME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(InsurancePolicyReq dto)
	{
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the specified arbitrary SQL statement
	 */
	public InsurancePolicyReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws InsurancePolicyReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsurancePolicyReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the specified arbitrary SQL statement
	 */
	public InsurancePolicyReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws InsurancePolicyReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsurancePolicyReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
