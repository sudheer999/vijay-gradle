/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class BankDetailsDaoImpl extends AbstractDAO implements BankDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( BankDetailsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, BANK_NAME, BANK_ADDRESS, ACCOUNT_NUMBER, IFCI_NUMBER, SWIFT_CODE, MICR_CODE, BRANCH, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, BANK_NAME, BANK_ADDRESS, ACCOUNT_NUMBER, IFCI_NUMBER, SWIFT_CODE, MICR_CODE, BRANCH, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, BANK_NAME = ?, BANK_ADDRESS = ?, ACCOUNT_NUMBER = ?, IFCI_NUMBER = ?, SWIFT_CODE = ?, MICR_CODE = ?, BRANCH = ?, CREATED_BY = ?, CREATED_ON = ?, UPDATED_BY = ?, UPDATED_ON = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column BANK_NAME
	 */
	protected static final int COLUMN_BANK_NAME = 2;

	/** 
	 * Index of column BANK_ADDRESS
	 */
	protected static final int COLUMN_BANK_ADDRESS = 3;

	/** 
	 * Index of column ACCOUNT_NUMBER
	 */
	protected static final int COLUMN_ACCOUNT_NUMBER = 4;

	/** 
	 * Index of column IFCI_NUMBER
	 */
	protected static final int COLUMN_IFCI_NUMBER = 5;

	/** 
	 * Index of column SWIFT_CODE
	 */
	protected static final int COLUMN_SWIFT_CODE = 6;

	/** 
	 * Index of column MICR_CODE
	 */
	protected static final int COLUMN_MICR_CODE = 7;

	/** 
	 * Index of column BRANCH
	 */
	protected static final int COLUMN_BRANCH = 8;

	/** 
	 * Index of column CREATED_BY
	 */
	protected static final int COLUMN_CREATED_BY = 9;

	/** 
	 * Index of column CREATED_ON
	 */
	protected static final int COLUMN_CREATED_ON = 10;

	/** 
	 * Index of column UPDATED_BY
	 */
	protected static final int COLUMN_UPDATED_BY = 11;

	/** 
	 * Index of column UPDATED_ON
	 */
	protected static final int COLUMN_UPDATED_ON = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the BANK_DETAILS table.
	 */
	public BankDetailsPk insert(BankDetails dto) throws BankDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getBankName() );
			stmt.setString( index++, dto.getBankAddress() );
			stmt.setString( index++, dto.getAccountNumber() );
			stmt.setString( index++, dto.getIfciNumber() );
			stmt.setString( index++, dto.getSwiftCode() );
			stmt.setString( index++, dto.getMicrCode() );
			stmt.setString( index++, dto.getBranch() );
			if (dto.isCreatedByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCreatedBy() );
			}
		
			stmt.setString( index++, dto.getCreatedOn() );
			if (dto.isUpdatedByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUpdatedBy() );
			}
		
			stmt.setTimestamp(index++, dto.getUpdatedOn()==null ? null : new java.sql.Timestamp( dto.getUpdatedOn().getTime() ) );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new BankDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the BANK_DETAILS table.
	 */
	public void update(BankDetailsPk pk, BankDetails dto) throws BankDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getBankName() );
			stmt.setString( index++, dto.getBankAddress() );
			stmt.setString( index++, dto.getAccountNumber() );
			stmt.setString( index++, dto.getIfciNumber() );
			stmt.setString( index++, dto.getSwiftCode() );
			stmt.setString( index++, dto.getMicrCode() );
			stmt.setString( index++, dto.getBranch() );
			if (dto.isCreatedByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCreatedBy() );
			}
		
			stmt.setString( index++, dto.getCreatedOn() );
			if (dto.isUpdatedByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUpdatedBy() );
			}
		
			stmt.setTimestamp(index++, dto.getUpdatedOn()==null ? null : new java.sql.Timestamp( dto.getUpdatedOn().getTime() ) );
			stmt.setInt( 13, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new BankDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the BANK_DETAILS table.
	 */
	public void delete(BankDetailsPk pk) throws BankDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new BankDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the BANK_DETAILS table that matches the specified primary-key value.
	 */
	public BankDetails findByPrimaryKey(BankDetailsPk pk) throws BankDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ID = :id'.
	 */
	public BankDetails findByPrimaryKey(int id) throws BankDetailsDaoException
	{
		BankDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria ''.
	 */
	public BankDetails[] findAll() throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ID = :id'.
	 */
	public BankDetails[] findWhereIdEquals(int id) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BANK_NAME = :bankName'.
	 */
	public BankDetails[] findWhereBankNameEquals(String bankName) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BANK_NAME = ? ORDER BY BANK_NAME", new Object[] { bankName } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BANK_ADDRESS = :bankAddress'.
	 */
	public BankDetails[] findWhereBankAddressEquals(String bankAddress) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BANK_ADDRESS = ? ORDER BY BANK_ADDRESS", new Object[] { bankAddress } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ACCOUNT_NUMBER = :accountNumber'.
	 */
	public BankDetails[] findWhereAccountNumberEquals(String accountNumber) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCOUNT_NUMBER = ? ORDER BY ACCOUNT_NUMBER", new Object[] { accountNumber } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'IFCI_NUMBER = :ifciNumber'.
	 */
	public BankDetails[] findWhereIfciNumberEquals(String ifciNumber) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IFCI_NUMBER = ? ORDER BY IFCI_NUMBER", new Object[] { ifciNumber } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'SWIFT_CODE = :swiftCode'.
	 */
	public BankDetails[] findWhereSwiftCodeEquals(String swiftCode) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SWIFT_CODE = ? ORDER BY SWIFT_CODE", new Object[] { swiftCode } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'MICR_CODE = :micrCode'.
	 */
	public BankDetails[] findWhereMicrCodeEquals(String micrCode) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MICR_CODE = ? ORDER BY MICR_CODE", new Object[] { micrCode } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BRANCH = :branch'.
	 */
	public BankDetails[] findWhereBranchEquals(String branch) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BRANCH = ? ORDER BY BRANCH", new Object[] { branch } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'CREATED_BY = :createdBy'.
	 */
	public BankDetails[] findWhereCreatedByEquals(int createdBy) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATED_BY = ? ORDER BY CREATED_BY", new Object[] {  new Integer(createdBy) } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public BankDetails[] findWhereCreatedOnEquals(String createdOn) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATED_ON = ? ORDER BY CREATED_ON", new Object[] { createdOn } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'UPDATED_BY = :updatedBy'.
	 */
	public BankDetails[] findWhereUpdatedByEquals(int updatedBy) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATED_BY = ? ORDER BY UPDATED_BY", new Object[] {  new Integer(updatedBy) } );
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'UPDATED_ON = :updatedOn'.
	 */
	public BankDetails[] findWhereUpdatedOnEquals(Date updatedOn) throws BankDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATED_ON = ? ORDER BY UPDATED_ON", new Object[] { updatedOn==null ? null : new java.sql.Timestamp( updatedOn.getTime() ) } );
	}

	/**
	 * Method 'BankDetailsDaoImpl'
	 * 
	 */
	public BankDetailsDaoImpl()
	{
	}

	/**
	 * Method 'BankDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public BankDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "BANK_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected BankDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			BankDetails dto = new BankDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected BankDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<BankDetails> resultList = new ArrayList<BankDetails>();
		while (rs.next()) {
			BankDetails dto = new BankDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		BankDetails ret[] = new BankDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(BankDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setBankName( rs.getString( COLUMN_BANK_NAME ) );
		dto.setBankAddress( rs.getString( COLUMN_BANK_ADDRESS ) );
		dto.setAccountNumber( rs.getString( COLUMN_ACCOUNT_NUMBER ) );
		dto.setIfciNumber( rs.getString( COLUMN_IFCI_NUMBER ) );
		dto.setSwiftCode( rs.getString( COLUMN_SWIFT_CODE ) );
		dto.setMicrCode( rs.getString( COLUMN_MICR_CODE ) );
		dto.setBranch( rs.getString( COLUMN_BRANCH ) );
		dto.setCreatedBy( rs.getInt( COLUMN_CREATED_BY ) );
		if (rs.wasNull()) {
			dto.setCreatedByNull( true );
		}
		
		dto.setCreatedOn( rs.getString( COLUMN_CREATED_ON ) );
		dto.setUpdatedBy( rs.getInt( COLUMN_UPDATED_BY ) );
		if (rs.wasNull()) {
			dto.setUpdatedByNull( true );
		}
		
		dto.setUpdatedOn( rs.getTimestamp(COLUMN_UPDATED_ON ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(BankDetails dto)
	{
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the specified arbitrary SQL statement
	 */
	public BankDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws BankDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new BankDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the specified arbitrary SQL statement
	 */
	public BankDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws BankDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new BankDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
