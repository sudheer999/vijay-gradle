/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.FestivalWishesDao;
import com.dikshatech.portal.dto.FestivalWishes;
import com.dikshatech.portal.dto.FestivalWishesPk;
import com.dikshatech.portal.exceptions.FestivalWishesDaoException;
import com.dikshatech.portal.exceptions.ProfileInfoDaoException;

public class FestivalWishesDaoImpl extends AbstractDAO implements FestivalWishesDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger				= Logger.getLogger(FestivalWishesDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT			= "SELECT ID, DOF, NAME, WISHES, REGION_ID, IMAGE_ID, YEAR FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT			= "INSERT INTO " + getTableName() + " ( ID, DOF, NAME, WISHES, REGION_ID, IMAGE_ID, YEAR ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE			= "UPDATE " + getTableName() + " SET ID = ?, DOF = ?, NAME = ?, WISHES = ?, REGION_ID = ?, IMAGE_ID = ?, YEAR = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE			= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID			= 1;
	/**
	 * Index of column DOF
	 */
	protected static final int		COLUMN_DOF			= 2;
	/**
	 * Index of column NAME
	 */
	protected static final int		COLUMN_NAME			= 3;
	/**
	 * Index of column WISHES
	 */
	protected static final int		COLUMN_WISHES		= 4;
	/**
	 * Index of column REGION_ID
	 */
	protected static final int		COLUMN_REGION_ID	= 5;
	/**
	 * Index of column IMAGE_ID
	 */
	protected static final int		COLUMN_IMAGE_ID		= 6;
	/**
	 * Index of column YEAR
	 */
	protected static final int		COLUMN_YEAR			= 7;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS	= 7;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID		= 1;

	/**
	 * Inserts a new row in the FESTIVAL_WISHES table.
	 */
	public FestivalWishesPk insert(FestivalWishes dto) throws FestivalWishesDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setDate(index++, dto.getDof() == null ? null : new java.sql.Date(dto.getDof().getTime()));
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getWishes());
			stmt.setInt(index++, dto.getRegionId());
			stmt.setInt(index++, dto.getImageId());
			stmt.setInt(index++, dto.getYear());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the FESTIVAL_WISHES table.
	 */
	public void update(FestivalWishesPk pk, FestivalWishes dto) throws FestivalWishesDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setDate(index++, dto.getDof() == null ? null : new java.sql.Date(dto.getDof().getTime()));
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getWishes());
			stmt.setInt(index++, dto.getRegionId());
			stmt.setInt(index++, dto.getImageId());
			stmt.setInt(index++, dto.getYear());
			stmt.setInt(8, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the FESTIVAL_WISHES table.
	 */
	public void delete(FestivalWishesPk pk) throws FestivalWishesDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a multiple rows in the FESTIVAL_WISHES table.
	 */
	public void delete(List<Integer> ids) throws FestivalWishesDaoException {
		if (ids == null || ids.isEmpty()) return;
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			String sql = "DELETE FROM " + getTableName() + " WHERE ID IN " + (ids.toString().replace("[", "(").replace("]", ")"));
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + sql);
			}
			stmt = conn.prepareStatement(sql);
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a multiple rows in the FESTIVAL_WISHES table.
	 */
	public void delete(String sql) throws FestivalWishesDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + sql);
			}
			stmt = conn.prepareStatement(sql);
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the FESTIVAL_WISHES table that matches the specified primary-key value.
	 */
	public FestivalWishes findByPrimaryKey(FestivalWishesPk pk) throws FestivalWishesDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'ID = :id'.
	 */
	public FestivalWishes findByPrimaryKey(int id) throws FestivalWishesDaoException {
		FestivalWishes ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria ''.
	 */
	public FestivalWishes[] findAll() throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'ID = :id'.
	 */
	public FestivalWishes[] findWhereIdEquals(int id) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'DOF = :dof'.
	 */
	public FestivalWishes[] findWhereDofEquals(Date dof) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DOF = ? ORDER BY DOF", new Object[] { dof == null ? null : new java.sql.Date(dof.getTime()) });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'NAME = :name'.
	 */
	public FestivalWishes[] findWhereNameEquals(String name) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[] { name });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'WISHES = :wishes'.
	 */
	public FestivalWishes[] findWhereWishesEquals(String wishes) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE WISHES = ? ORDER BY WISHES", new Object[] { wishes });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'REGION_ID = :regionId'.
	 */
	public FestivalWishes[] findWhereRegionIdEquals(int regionId) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REGION_ID = ? ORDER BY REGION_ID", new Object[] { new Integer(regionId) });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'IMAGE_ID = :imageId'.
	 */
	public FestivalWishes[] findWhereImageIdEquals(int imageId) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE IMAGE_ID = ? ORDER BY IMAGE_ID", new Object[] { new Integer(imageId) });
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'YEAR = :year'.
	 */
	public FestivalWishes[] findWhereYearEquals(int year) throws FestivalWishesDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE YEAR = ? ORDER BY YEAR", new Object[] { new Integer(year) });
	}

	/**
	 * Method 'FestivalWishesDaoImpl'
	 */
	public FestivalWishesDaoImpl() {}

	/**
	 * Method 'FestivalWishesDaoImpl'
	 * 
	 * @param userConn
	 */
	public FestivalWishesDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "FESTIVAL_WISHES";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected FestivalWishes fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			FestivalWishes dto = new FestivalWishes();
			populateDto(dto, rs);
			return dto;
		}
		return null;
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected FestivalWishes[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<FestivalWishes> resultList = new ArrayList<FestivalWishes>();
		while (rs.next()){
			FestivalWishes dto = new FestivalWishes();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		FestivalWishes ret[] = new FestivalWishes[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(FestivalWishes dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setDof(rs.getDate(COLUMN_DOF));
		dto.setName(rs.getString(COLUMN_NAME));
		dto.setWishes(rs.getString(COLUMN_WISHES));
		dto.setRegionId(rs.getInt(COLUMN_REGION_ID));
		dto.setImageId(rs.getInt(COLUMN_IMAGE_ID));
		if (rs.wasNull()){
			dto.setImageId(0);
		}
		dto.setYear(rs.getInt(COLUMN_YEAR));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(FestivalWishes dto) {}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the specified arbitrary SQL statement
	 */
	public FestivalWishes[] findByDynamicSelect(String sql, Object[] sqlParams) throws FestivalWishesDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the specified arbitrary SQL statement
	 */
	public FestivalWishes[] findByDynamicWhere(String sql, Object[] sqlParams) throws FestivalWishesDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new FestivalWishesDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public Integer[] findByDistinct(String sql, String columnName) throws ProfileInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.createStatement();
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery(SQL);
			// fetch the results
			List<Integer> resultList = new ArrayList<Integer>();
			while (rs.next())
				resultList.add(rs.getInt(columnName));
			return (Integer[]) resultList.toArray(new Integer[resultList.size()]);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProfileInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
