/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.ReferFriendDao;
import com.dikshatech.portal.dto.ReferFriend;
import com.dikshatech.portal.dto.ReferFriendPk;
import com.dikshatech.portal.exceptions.ReferFriendDaoException;

public class ReferFriendDaoImpl extends AbstractDAO implements ReferFriendDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ReferFriendDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, SUMMARY, ATTACHMENT, REFERRED_TO, DEPARTMENT, EXPERIENCE_LAVEL, REFERRED_BY, CREATE_DATE, LAST_MODIFIED_DATE, IS_DELETED, JOB_REQ_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, SUMMARY, ATTACHMENT, REFERRED_TO, DEPARTMENT, EXPERIENCE_LAVEL, REFERRED_BY, CREATE_DATE, LAST_MODIFIED_DATE, IS_DELETED ,JOB_REQ_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?)";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, SUMMARY = ?, ATTACHMENT = ?, REFERRED_TO = ?, DEPARTMENT = ?, EXPERIENCE_LAVEL = ?, REFERRED_BY = ?, CREATE_DATE = ?, LAST_MODIFIED_DATE = ?, IS_DELETED = ?,JOB_REQ_ID=? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column SUMMARY
	 */
	protected static final int COLUMN_SUMMARY = 3;

	/** 
	 * Index of column ATTACHMENT
	 */
	protected static final int COLUMN_ATTACHMENT = 4;

	/** 
	 * Index of column REFERRED_TO
	 */
	protected static final int COLUMN_REFERRED_TO = 5;

	/** 
	 * Index of column DEPARTMENT
	 */
	protected static final int COLUMN_DEPARTMENT = 6;

	/** 
	 * Index of column EXPERIENCE_LAVEL
	 */
	protected static final int COLUMN_EXPERIENCE_LAVEL = 7;

	/** 
	 * Index of column REFERRED_BY
	 */
	protected static final int COLUMN_REFERRED_BY = 8;

	/** 
	 * Index of column CREATE_DATE
	 */
	protected static final int COLUMN_CREATE_DATE = 9;

	/** 
	 * Index of column LAST_MODIFIED_DATE
	 */
	protected static final int COLUMN_LAST_MODIFIED_DATE = 10;

	/** 
	 * Index of column IS_DELETED
	 */
	protected static final int COLUMN_IS_DELETED = 11;
	/** 
	 * Index of column JOB_REQ_ID
	 */
	protected static final int COLUMN_JOB_REQ_ID=12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the REFER_FRIEND table.
	 */
	public ReferFriendPk insert(ReferFriend dto) throws ReferFriendDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getSummary() );
			if (dto.isAttachmentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAttachment() );
			}
		
			stmt.setString( index++, dto.getReferredTo() );
			stmt.setString( index++, dto.getDepartment() );
			stmt.setString( index++, dto.getExperienceLavel() );
			if (dto.isReferredByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getReferredBy() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastModifiedDate()==null ? null : new java.sql.Timestamp( dto.getLastModifiedDate().getTime() ) );
			stmt.setShort( index++, dto.getIsDeleted() );
			stmt.setInt( index++, dto.getJobReqId());
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReferFriendDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the REFER_FRIEND table.
	 */
	public void update(ReferFriendPk pk, ReferFriend dto) throws ReferFriendDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getSummary() );
			if (dto.isAttachmentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAttachment() );
			}
		
			stmt.setString( index++, dto.getReferredTo() );
			stmt.setString( index++, dto.getDepartment() );
			stmt.setString( index++, dto.getExperienceLavel() );
			if (dto.isReferredByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getReferredBy() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastModifiedDate()==null ? null : new java.sql.Timestamp( dto.getLastModifiedDate().getTime() ) );
			stmt.setShort( index++, dto.getIsDeleted() );
			stmt.setInt( index++, dto.getJobReqId());
			stmt.setInt( 13, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReferFriendDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the REFER_FRIEND table.
	 */
	public void delete(ReferFriendPk pk) throws ReferFriendDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReferFriendDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the REFER_FRIEND table that matches the specified primary-key value.
	 */
	public ReferFriend findByPrimaryKey(ReferFriendPk pk) throws ReferFriendDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ID = :id'.
	 */
	public ReferFriend findByPrimaryKey(int id) throws ReferFriendDaoException
	{
		ReferFriend ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria ''.
	 */
	public ReferFriend[] findAll() throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ID = :id'.
	 */
	public ReferFriend[] findWhereIdEquals(int id) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ReferFriend[] findWhereEsrMapIdEquals(int esrMapId) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'SUMMARY = :summary'.
	 */
	public ReferFriend[] findWhereSummaryEquals(String summary) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMMARY = ? ORDER BY SUMMARY", new Object[] { summary } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ATTACHMENT = :attachment'.
	 */
	public ReferFriend[] findWhereAttachmentEquals(int attachment) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATTACHMENT = ? ORDER BY ATTACHMENT", new Object[] {  new Integer(attachment) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'REFERRED_TO = :referredTo'.
	 */
	public ReferFriend[] findWhereReferredToEquals(String referredTo) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERRED_TO = ? ORDER BY REFERRED_TO", new Object[] { referredTo } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'DEPARTMENT = :department'.
	 */
	public ReferFriend[] findWhereDepartmentEquals(String department) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEPARTMENT = ? ORDER BY DEPARTMENT", new Object[] { department } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'EXPERIENCE_LAVEL = :experienceLavel'.
	 */
	public ReferFriend[] findWhereExperienceLavelEquals(String experienceLavel) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPERIENCE_LAVEL = ? ORDER BY EXPERIENCE_LAVEL", new Object[] { experienceLavel } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'REFERRED_BY = :referredBy'.
	 */
	public ReferFriend[] findWhereReferredByEquals(int referredBy) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERRED_BY = ? ORDER BY REFERRED_BY", new Object[] {  new Integer(referredBy) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ReferFriend[] findWhereCreateDateEquals(Date createDate) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate==null ? null : new java.sql.Timestamp( createDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'LAST_MODIFIED_DATE = :lastModifiedDate'.
	 */
	public ReferFriend[] findWhereLastModifiedDateEquals(Date lastModifiedDate) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LAST_MODIFIED_DATE = ? ORDER BY LAST_MODIFIED_DATE", new Object[] { lastModifiedDate==null ? null : new java.sql.Timestamp( lastModifiedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'IS_DELETED = :isDeleted'.
	 */
	public ReferFriend[] findWhereIsDeletedEquals(short isDeleted) throws ReferFriendDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_DELETED = ? ORDER BY IS_DELETED", new Object[] {  new Short(isDeleted) } );
	}

	/**
	 * Method 'ReferFriendDaoImpl'
	 * 
	 */
	public ReferFriendDaoImpl()
	{
	}

	/**
	 * Method 'ReferFriendDaoImpl'
	 * 
	 * @param userConn
	 */
	public ReferFriendDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "REFER_FRIEND";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ReferFriend fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ReferFriend dto = new ReferFriend();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ReferFriend[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ReferFriend> resultList = new ArrayList<ReferFriend>();
		while (rs.next()) {
			ReferFriend dto = new ReferFriend();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ReferFriend ret[] = new ReferFriend[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ReferFriend dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setSummary( rs.getString( COLUMN_SUMMARY ) );
		dto.setAttachment( rs.getInt( COLUMN_ATTACHMENT ) );
		if (rs.wasNull()) {
			dto.setAttachmentNull( true );
		}
		
		dto.setReferredTo( rs.getString( COLUMN_REFERRED_TO ) );
		dto.setDepartment( rs.getString( COLUMN_DEPARTMENT ) );
		dto.setExperienceLavel( rs.getString( COLUMN_EXPERIENCE_LAVEL ) );
		dto.setReferredBy( rs.getInt( COLUMN_REFERRED_BY ) );
		if (rs.wasNull()) {
			dto.setReferredByNull( true );
		}
		
		dto.setCreateDate( rs.getTimestamp(COLUMN_CREATE_DATE ) );
		dto.setLastModifiedDate( rs.getTimestamp(COLUMN_LAST_MODIFIED_DATE ) );
		dto.setIsDeleted( rs.getShort( COLUMN_IS_DELETED ) );
		dto.setJobReqId(rs.getInt( COLUMN_JOB_REQ_ID ));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ReferFriend dto)
	{
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the specified arbitrary SQL statement
	 */
	public ReferFriend[] findByDynamicSelect(String sql, Object[] sqlParams) throws ReferFriendDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReferFriendDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the specified arbitrary SQL statement
	 */
	public ReferFriend[] findByDynamicWhere(String sql, Object[] sqlParams) throws ReferFriendDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReferFriendDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
