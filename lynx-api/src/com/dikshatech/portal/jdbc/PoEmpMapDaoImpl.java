/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.PoEmpMapDao;
import com.dikshatech.portal.dto.PoEmpMap;
import com.dikshatech.portal.dto.PoEmpMapPk;
import com.dikshatech.portal.exceptions.PoEmpMapDaoException;

public class PoEmpMapDaoImpl extends AbstractDAO implements PoEmpMapDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( PoEmpMapDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, PO_ID, EMP_ID, RATE, TYPE, CURRENCY, INACTIVE, CURRENT,PO_NUMBER,PO_DATE,PO_ST_DATE,PO_END_DATE,PO_DURATION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, PO_ID, EMP_ID, RATE, TYPE, CURRENCY, INACTIVE, CURRENT,PO_NUMBER,PO_DATE,PO_ST_DATE,PO_END_DATE,PO_DURATION ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, PO_ID = ?, EMP_ID = ?, RATE = ?, TYPE = ?, CURRENCY = ?, INACTIVE = ?, CURRENT = ? ,PO_NUMBER =? ,PO_DATE =?,PO_ST_DATE=?,PO_END_DATE=?,PO_DURATION=? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column PO_ID
	 */
	protected static final int COLUMN_PO_ID = 2;

	/** 
	 * Index of column EMP_ID
	 */
	protected static final int COLUMN_EMP_ID = 3;

	/** 
	 * Index of column RATE
	 */
	protected static final int COLUMN_RATE = 4;

	/** 
	 * Index of column TYPE
	 */
	protected static final int COLUMN_TYPE = 5;

	/** 
	 * Index of column CURRENCY
	 */
	protected static final int COLUMN_CURRENCY = 6;

	/** 
	 * Index of column INACTIVE
	 */
	protected static final int COLUMN_INACTIVE = 7;

	/** 
	 * Index of column CURRENT
	 */
	protected static final int COLUMN_CURRENT = 8;
//	PO_NUMBER,PO_DATE,PO_ST_DATE,PO_END_DATE,PO_DURATION 
	
	protected static final int COLUMN_PO_NUMBER = 9;
	
	protected static final int COLUMN_PO_DATE = 10;
	
	protected static final int COLUMN_PO_ST_DATE = 11;
	
	protected static final int COLUMN_PO_END_DATE = 12;
	
	protected static final int COLUMN_PO_DURATION = 13;
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the PO_EMP_MAP table.
	 */
	public PoEmpMapPk insert(PoEmpMap dto) throws PoEmpMapDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getPoId() );
			stmt.setInt( index++, dto.getEmpId() );
			stmt.setString( index++, dto.getRate() );
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getCurrency() );
			if (dto.isInactiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getInactive() );
			}
		
			if (dto.isCurrentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCurrent() );
			}
			
			stmt.setString(index++, dto.getEmpPoNumber());
			stmt.setDate(index++, dto.getEmpPoDate()==null ? null : new java.sql.Date( dto.getEmpPoDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoStDate()==null ? null : new java.sql.Date( dto.getEmpPoStDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoEndDate()==null ? null : new java.sql.Date( dto.getEmpPoEndDate().getTime() ) );
			stmt.setString(index++, dto.getEmpPoDuration());
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the PO_EMP_MAP table.
	 */
	public void update(PoEmpMapPk pk, PoEmpMap dto) throws PoEmpMapDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getPoId() );
			stmt.setInt( index++, dto.getEmpId() );
			stmt.setString( index++, dto.getRate() );
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getCurrency() );
			if (dto.isInactiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getInactive() );
			}
		
			if (dto.isCurrentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCurrent() );
			}
			stmt.setString(index++, dto.getEmpPoNumber());
			stmt.setDate(index++, dto.getEmpPoDate()==null ? null : new java.sql.Date( dto.getEmpPoDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoStDate()==null ? null : new java.sql.Date( dto.getEmpPoStDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoEndDate()==null ? null : new java.sql.Date( dto.getEmpPoEndDate().getTime() ) );
			stmt.setString(index++, dto.getEmpPoDuration());
			stmt.setInt( 14, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the PO_EMP_MAP table.
	 */
	public void delete(PoEmpMapPk pk) throws PoEmpMapDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the PO_EMP_MAP table that matches the specified primary-key value.
	 */
	public PoEmpMap findByPrimaryKey(PoEmpMapPk pk) throws PoEmpMapDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'ID = :id'.
	 */
	public PoEmpMap findByPrimaryKey(int id) throws PoEmpMapDaoException
	{
		PoEmpMap ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria ''.
	 */
	public PoEmpMap[] findAll() throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'ID = :id'.
	 */
	public PoEmpMap[] findWhereIdEquals(int id) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'PO_ID = :poId'.
	 */
	public PoEmpMap[] findWherePoIdEquals(int poId) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_ID = ? ORDER BY PO_ID", new Object[] {  new Integer(poId) } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'EMP_ID = :empId'.
	 */
	public PoEmpMap[] findWhereEmpIdEquals(int empId) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMP_ID = ? ORDER BY EMP_ID", new Object[] {  new Integer(empId) } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'RATE = :rate'.
	 */
	public PoEmpMap[] findWhereRateEquals(String rate) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RATE = ? ORDER BY RATE", new Object[] { rate } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'TYPE = :type'.
	 */
	public PoEmpMap[] findWhereTypeEquals(String type) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TYPE = ? ORDER BY TYPE", new Object[] { type } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'CURRENCY = :currency'.
	 */
	public PoEmpMap[] findWhereCurrencyEquals(String currency) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURRENCY = ? ORDER BY CURRENCY", new Object[] { currency } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'INACTIVE = :inactive'.
	 */
	public PoEmpMap[] findWhereInactiveEquals(short inactive) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INACTIVE = ? ORDER BY INACTIVE", new Object[] {  new Short(inactive) } );
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'CURRENT = :current'.
	 */
	public PoEmpMap[] findWhereCurrentEquals(short current) throws PoEmpMapDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CURRENT = ? ORDER BY CURRENT", new Object[] {  new Short(current) } );
	}

	/**
	 * Method 'PoEmpMapDaoImpl'
	 * 
	 */
	public PoEmpMapDaoImpl()
	{
	}

	/**
	 * Method 'PoEmpMapDaoImpl'
	 * 
	 * @param userConn
	 */
	public PoEmpMapDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "PO_EMP_MAP";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PoEmpMap fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PoEmpMap dto = new PoEmpMap();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PoEmpMap[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<PoEmpMap> resultList = new ArrayList<PoEmpMap>();
		while (rs.next()) {
			PoEmpMap dto = new PoEmpMap();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PoEmpMap ret[] = new PoEmpMap[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PoEmpMap dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setPoId( rs.getInt( COLUMN_PO_ID ) );
		dto.setEmpId( rs.getInt( COLUMN_EMP_ID ) );
		dto.setRate( rs.getString( COLUMN_RATE ) );
		dto.setType( rs.getString( COLUMN_TYPE ) );
		dto.setCurrency( rs.getString( COLUMN_CURRENCY ) );
		dto.setInactive( rs.getShort( COLUMN_INACTIVE ) );
		if (rs.wasNull()) {
			dto.setInactiveNull( true );
		}
		
		dto.setCurrent( rs.getShort( COLUMN_CURRENT ) );
		if (rs.wasNull()) {
			dto.setCurrentNull( true );
		}
		
		dto.setEmpPoNumber(rs.getString(COLUMN_PO_NUMBER));
		dto.setEmpPoDate(rs.getDate(COLUMN_PO_DATE));
		dto.setEmpPoStDate(rs.getDate(COLUMN_PO_ST_DATE));
		dto.setEmpPoEndDate(rs.getDate(COLUMN_PO_END_DATE));
		dto.setEmpPoDuration(rs.getString(COLUMN_PO_DURATION));
		
		
	}
	//PO_NUMBER,PO_DATE,PO_ST_DATE,PO_END_DATE,PO_DURATION 
	
	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PoEmpMap dto)
	{
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the specified arbitrary SQL statement
	 */
	public PoEmpMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws PoEmpMapDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the specified arbitrary SQL statement
	 */
	public PoEmpMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws PoEmpMapDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public boolean deleteAllByPoDetail(int poDetailId)
	{

		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		boolean isDone = false;
		String SQL = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// Delete All Data In Proj_Locations BY Project
			SQL = "DELETE FROM PO_EMP_MAP WHERE PO_ID=" + poDetailId + "";
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();
			isDone = true;

		}
		catch (Exception e)
		{
			isDone = false;
			e.printStackTrace();
		}
		finally
		{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}
		}
		return isDone;

	}
	
	public void updatePoEmpMap(String sql) throws PoEmpMapDaoException{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
				
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
				
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
			stmt.executeUpdate();			
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PoEmpMapDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	

}