/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.common.utils.DesEncrypterDecrypter;
import com.dikshatech.portal.dao.TdsDao;
import com.dikshatech.portal.dto.Tds;
import com.dikshatech.portal.dto.TdsPk;
import com.dikshatech.portal.exceptions.TdsDaoException;

public class TdsDaoImpl extends AbstractDAO implements TdsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( TdsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, MONTH_ID, USERID, AMOUNT, STATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, MONTH_ID, USERID, AMOUNT, STATUS ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, MONTH_ID = ?, USERID = ?, AMOUNT = ?, STATUS = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column MONTH_ID
	 */
	protected static final int COLUMN_MONTH_ID = 2;

	/** 
	 * Index of column USERID
	 */
	protected static final int COLUMN_USERID = 3;

	/** 
	 * Index of column AMOUNT
	 */
	protected static final int COLUMN_AMOUNT = 4;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the TDS table.
	 */
	public TdsPk insert(Tds dto) throws TdsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getMonthId() );
			if (dto.isUseridNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserid() );
			}
		
			stmt.setString(index++, new DecimalFormat("0").format(Double.parseDouble(dto.getAmount())));
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the TDS table.
	 */
	public void update(TdsPk pk, Tds dto) throws TdsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getMonthId() );
			if (dto.isUseridNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserid() );
			}
		
			stmt.setString(index++, new DecimalFormat("0").format(Double.parseDouble(dto.getAmount())));
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			stmt.setInt( 6, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the TDS table.
	 */
	public void delete(TdsPk pk) throws TdsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the TDS table that matches the specified primary-key value.
	 */
	public Tds findByPrimaryKey(TdsPk pk) throws TdsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'ID = :id'.
	 */
	public Tds findByPrimaryKey(int id) throws TdsDaoException
	{
		Tds ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria ''.
	 */
	public Tds[] findAll() throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'USERID = :userid'.
	 */
	public Tds[] findByUsers(int userid) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USERID = ?", new Object[] {  new Integer(userid) } );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'ID = :id'.
	 */
	public Tds[] findWhereIdEquals(int id) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'MONTH_ID = :monthId'.
	 */
	public Tds[] findWhereMonthIdEquals(String monthId) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTH_ID = ? ORDER BY MONTH_ID", new Object[] { monthId } );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'USERID = :userid'.
	 */
	public Tds[] findWhereUseridEquals(int userid) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USERID = ? ORDER BY USERID", new Object[] {  new Integer(userid) } );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'AMOUNT = :amount'.
	 */
	public Tds[] findWhereAmountEquals(String amount) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AMOUNT = ? ORDER BY AMOUNT", new Object[] { amount } );
	}

	/** 
	 * Returns all rows from the TDS table that match the criteria 'STATUS = :status'.
	 */
	public Tds[] findWhereStatusEquals(int status) throws TdsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] {  new Integer(status) } );
	}

	/**
	 * Method 'TdsDaoImpl'
	 * 
	 */
	public TdsDaoImpl()
	{
	}

	/**
	 * Method 'TdsDaoImpl'
	 * 
	 * @param userConn
	 */
	public TdsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "TDS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Tds fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Tds dto = new Tds();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Tds[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Tds> resultList = new ArrayList<Tds>();
		while (rs.next()) {
			Tds dto = new Tds();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Tds ret[] = new Tds[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	
	
	protected Tds[] fetchMultiResults1(ResultSet rs) throws SQLException
	{
		Collection<Tds> resultList1 = new ArrayList<Tds>();
		while (rs.next()) {
			Tds dto = new Tds();
			populateDto1( dto, rs);
			resultList1.add( dto );
		}
		
		Tds ret[] = new Tds[ resultList1.size() ];
		resultList1.toArray( ret );
		return ret;
	}
	protected Tds[] fetchMultiResultsT(ResultSet rs) throws SQLException
	{
		Collection<Tds> resultList1 = new ArrayList<Tds>();
		while (rs.next()) {
			Tds dto = new Tds();
			populateDtoT( dto, rs);
			resultList1.add( dto );
		}
		
		Tds ret[] = new Tds[ resultList1.size() ];
		resultList1.toArray( ret );
		return ret;
	}
	protected void populateDtoT(Tds dto, ResultSet rs) throws SQLException
	{

		
		int index = 0;
		dto.setAmount(rs.getString(1));
		dto.setStatus(rs.getInt(2));

		}
	
		
	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto1(Tds dto, ResultSet rs) throws SQLException
	{

		
		int index = 0;
		dto.setId( rs.getInt(1));
		
		dto.setMonthId( rs.getString(2));
		dto.setUserid( rs.getInt(3));
		if (rs.wasNull()) {
			dto.setUseridNull( true );
		}
		
	//	new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(4))));
		
			dto.setAmount(new DecimalFormat("0").format((int) Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(4)))));
	//	dto.setAmount(rs.getString(4));
		
		dto.setStatus( rs.getInt(5));// for tds
	//	dto.setCompleted(rs.getInt(7));// for completed
		
	}
	
	protected void populateDto(Tds dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setMonthId( rs.getString( COLUMN_MONTH_ID ) );
		dto.setUserid( rs.getInt( COLUMN_USERID ) );
		if (rs.wasNull()) {
			dto.setUseridNull( true );
		}
		
		dto.setAmount( rs.getString( COLUMN_AMOUNT ) );
		dto.setStatus( rs.getInt( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Tds dto)
	{
	}

	/** 
	 * Returns all rows from the TDS table that match the specified arbitrary SQL statement
	 */
	public Tds[] findByDynamicSelect(String sql, Object[] sqlParams) throws TdsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the TDS table that match the specified arbitrary SQL statement
	 */
	public Tds[] findByDynamicWhere(String sql, Object[] sqlParams) throws TdsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	public Tds[] findByDynamicWhereTds(String sql, Object[] sqlParams) throws TdsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "SELECT T.ID, T.MONTH_ID, M.USERID, M.Amount, T.STATUS ,M.ID,SR.STATUS as completed FROM TDS T left join MONTHLY_PAYROLL M on M.MONTHID = T.MONTH_ID LEFT JOIN EMP_SER_REQ_MAP EMP on M.USERID=EMP.REQUESTOR_ID LEFT JOIN SALARY_RECONCILIATION SR on SR.ESR_MAP_ID=EMP.ID " +  " WHERE " + sql + "group by  T.MONTH_ID";
			

			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults1(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public Tds[] findByStatus(String sql, Object[] sqlParams) throws TdsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "SELECT AMOUNT,STATUS FROM TDS   "+" where"  + sql + " AND STATUS = 1";
			

			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResultsT(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TdsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
}
