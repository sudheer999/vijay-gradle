/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.dikshatech.beans.EmployeeBonus;
import com.dikshatech.beans.EmployeePerdiem;
import com.dikshatech.beans.ProfileListBean;
import com.dikshatech.beans.UserBean;
import com.dikshatech.portal.dao.ProfileInfoDao;
import com.dikshatech.portal.dao.ProjectDao;
import com.dikshatech.portal.dao.UsersDao;
import com.dikshatech.portal.dto.ProfileInfo;
import com.dikshatech.portal.dto.Project;
import com.dikshatech.portal.dto.Users;
import com.dikshatech.portal.dto.UsersPk;
import com.dikshatech.portal.exceptions.ProfileInfoDaoException;
import com.dikshatech.portal.exceptions.UsersDaoException;
import com.dikshatech.portal.factory.ProfileInfoDaoFactory;
import com.dikshatech.portal.factory.ProjectDaoFactory;
import com.dikshatech.portal.factory.UsersDaoFactory;

public class UsersDaoImpl extends AbstractDAO implements UsersDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(UsersDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, EMP_ID, LEVEL_ID, REG_DIV_ID, PROFILE_ID, FINANCE_ID, NOMINEE_ID, PASSPORT_ID, PERSONAL_ID, COMPLETE, STATUS, CREATE_DATE, USER_CREATED_BY, EXPERIENCE_ID, SKILLSET_ID, OTHERS, ACTION_BY FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, EMP_ID, LEVEL_ID, REG_DIV_ID, PROFILE_ID, FINANCE_ID, NOMINEE_ID, PASSPORT_ID, PERSONAL_ID, COMPLETE, STATUS, CREATE_DATE, USER_CREATED_BY, EXPERIENCE_ID, SKILLSET_ID, OTHERS, ACTION_BY ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, EMP_ID = ?, LEVEL_ID = ?, REG_DIV_ID = ?, PROFILE_ID = ?, FINANCE_ID = ?, NOMINEE_ID = ?, PASSPORT_ID = ?, PERSONAL_ID = ?, COMPLETE = ?, STATUS = ?, CREATE_DATE = ?, USER_CREATED_BY = ?, EXPERIENCE_ID = ?, SKILLSET_ID = ?, OTHERS = ?, ACTION_BY = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column EMP_ID
	 */
	protected static final int		COLUMN_EMP_ID			= 2;
	/**
	 * Index of column LEVEL_ID
	 */
	protected static final int		COLUMN_LEVEL_ID			= 3;
	/**
	 * Index of column REG_DIV_ID
	 */
	protected static final int		COLUMN_REG_DIV_ID		= 4;
	/**
	 * Index of column PROFILE_ID
	 */
	protected static final int		COLUMN_PROFILE_ID		= 5;
	/**
	 * Index of column FINANCE_ID
	 */
	protected static final int		COLUMN_FINANCE_ID		= 6;
	/**
	 * Index of column NOMINEE_ID
	 */
	protected static final int		COLUMN_NOMINEE_ID		= 7;
	/**
	 * Index of column PASSPORT_ID
	 */
	protected static final int		COLUMN_PASSPORT_ID		= 8;
	/**
	 * Index of column PERSONAL_ID
	 */
	protected static final int		COLUMN_PERSONAL_ID		= 9;
	/**
	 * Index of column COMPLETE
	 */
	protected static final int		COLUMN_COMPLETE			= 10;
	/**
	 * Index of column STATUS
	 */
	protected static final int		COLUMN_STATUS			= 11;
	/**
	 * Index of column CREATE_DATE
	 */
	protected static final int		COLUMN_CREATE_DATE		= 12;
	/**
	 * Index of column USER_CREATED_BY
	 */
	protected static final int		COLUMN_USER_CREATED_BY	= 13;
	/**
	 * Index of column EXPERIENCE_ID
	 */
	protected static final int		COLUMN_EXPERIENCE_ID	= 14;
	/**
	 * Index of column SKILLSET_ID
	 */
	protected static final int		COLUMN_SKILLSET_ID		= 15;
	/**
	 * Index of column OTHERS
	 */
	protected static final int		COLUMN_OTHERS			= 16;
	/**
	 * Index of column ACTION_BY
	 */
	protected static final int		COLUMN_ACTION_BY		= 17;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 17;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the USERS table.
	 */
	public UsersPk insert(Users dto) throws UsersDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getEmpId());
			stmt.setInt(index++, dto.getLevelId());
			if (dto.isRegDivIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getRegDivId());
			}
			if (dto.isProfileIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getProfileId());
			}
			if (dto.isFinanceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getFinanceId());
			}
			if (dto.isNomineeIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getNomineeId());
			}
			if (dto.isPassportIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPassportId());
			}
			if (dto.isPersonalIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPersonalId());
			}
			stmt.setShort(index++, dto.getComplete());
			stmt.setShort(index++, dto.getStatus());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isUserCreatedByNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserCreatedBy());
			}
			if (dto.isExperienceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getExperienceId());
			}
			stmt.setString(index++, dto.getSkillsetId());
			stmt.setString(index++, dto.getOthers());
			if (dto.isActionByNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getActionBy());
			}
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the USERS table.
	 */
	public void update(UsersPk pk, Users dto) throws UsersDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getEmpId());
			stmt.setInt(index++, dto.getLevelId());
			if (dto.isRegDivIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getRegDivId());
			}
			if (dto.isProfileIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getProfileId());
			}
			if (dto.isFinanceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getFinanceId());
			}
			if (dto.isNomineeIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getNomineeId());
			}
			if (dto.isPassportIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPassportId());
			}
			if (dto.isPersonalIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPersonalId());
			}
			stmt.setShort(index++, dto.getComplete());
			stmt.setShort(index++, dto.getStatus());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			if (dto.isUserCreatedByNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserCreatedBy());
			}
			if (dto.isExperienceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getExperienceId());
			}
			stmt.setString(index++, dto.getSkillsetId());
			stmt.setString(index++, dto.getOthers());
			if (dto.isActionByNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getActionBy());
			}
			stmt.setInt(18, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the USERS table.
	 */
	public void delete(UsersPk pk) throws UsersDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the USERS table that matches the specified primary-key value.
	 */
	public Users findByPrimaryKey(UsersPk pk) throws UsersDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'ID = :id'.
	 */
	public Users findByPrimaryKey(int id) throws UsersDaoException {
		Users ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}
	public Users findByPrimaryKeys(int id) throws UsersDaoException {
		Users ret[] = findByDynamicSelect(SQL_SELECT + " WHERE EMP_ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the USERS table that match the criteria ''.
	 */
	public Users[] findAll() throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'FINANCE_ID
	 * = :financeId'.
	 */
	public Users[] findByFinanceInfo(int financeId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE FINANCE_ID = ?", new Object[] { new Integer(financeId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'REG_DIV_ID
	 * = :regDivId'.
	 */
	public Users[] findByRegDivMap(int regDivId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REG_DIV_ID = ?", new Object[] { new Integer(regDivId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'COMPLETE
	 * = :salaryId'.
	 */
	public Users[] findBySalaryInfo(int salaryId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMPLETE = ?", new Object[] { new Integer(salaryId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'LEVEL_ID =
	 * :levelId'.
	 */
	public Users[] findByLevels(int levelId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEVEL_ID = ?", new Object[] { new Integer(levelId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'ID = :id'.
	 */
	public Users[] findWhereIdEquals(int id) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'EMP_ID = :empId'.
	 */
	public Users[] findWhereEmpIdEquals(int empId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EMP_ID = ? ORDER BY EMP_ID", new Object[] { new Integer(empId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public Users[] findWhereLevelIdEquals(int levelId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEVEL_ID = ? ORDER BY LEVEL_ID", new Object[] { new Integer(levelId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'REG_DIV_ID = :regDivId'.
	 */
	public Users[] findWhereRegDivIdEquals(int regDivId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REG_DIV_ID = ? ORDER BY REG_DIV_ID", new Object[] { new Integer(regDivId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'PROFILE_ID = :profileId'.
	 */
	public Users[] findWhereProfileIdEquals(int profileId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PROFILE_ID = ? ORDER BY PROFILE_ID", new Object[] { new Integer(profileId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'FINANCE_ID = :financeId'.
	 */
	public Users[] findWhereFinanceIdEquals(int financeId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE FINANCE_ID = ? ORDER BY FINANCE_ID", new Object[] { new Integer(financeId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'NOMINEE_ID = :nomineeId'.
	 */
	public Users[] findWhereNomineeIdEquals(int nomineeId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NOMINEE_ID = ? ORDER BY NOMINEE_ID", new Object[] { new Integer(nomineeId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Users[] findWherePassportIdEquals(int passportId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PASSPORT_ID = ? ORDER BY PASSPORT_ID", new Object[] { new Integer(passportId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'PERSONAL_ID = :personalId'.
	 */
	public Users[] findWherePersonalIdEquals(int personalId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PERSONAL_ID = ? ORDER BY PERSONAL_ID", new Object[] { new Integer(personalId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'COMPLETE = :salaryId'.
	 */
	public Users[] findWhereSalaryIdEquals(int salaryId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMPLETE = ? ORDER BY COMPLETE", new Object[] { new Integer(salaryId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'STATUS = :status'.
	 */
	public Users[] findWhereStatusEquals(short status) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { new Short(status) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Users[] findWhereCreateDateEquals(Date createDate) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate == null ? null : new java.sql.Timestamp(createDate.getTime()) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'USER_CREATED_BY = :userCreatedBy'.
	 */
	public Users[] findWhereUserCreatedByEquals(int userCreatedBy) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE USER_CREATED_BY = ? ORDER BY USER_CREATED_BY", new Object[] { new Integer(userCreatedBy) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public Users[] findWhereExperienceIdEquals(int experienceId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXPERIENCE_ID = ? ORDER BY EXPERIENCE_ID", new Object[] { new Integer(experienceId) });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'SKILLSET_ID = :skillsetId'.
	 */
	public Users[] findWhereSkillsetIdEquals(String skillsetId) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SKILLSET_ID = ? ORDER BY SKILLSET_ID", new Object[] { skillsetId });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'OTHERS = :others'.
	 */
	public Users[] findWhereOthersEquals(String others) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE OTHERS = ? ORDER BY OTHERS", new Object[] { others });
	}

	/**
	 * Returns all rows from the USERS table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public Users[] findWhereActionByEquals(int actionBy) throws UsersDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ACTION_BY = ? ORDER BY ACTION_BY", new Object[] { new Integer(actionBy) });
	}

	/**
	 * Method 'UsersDaoImpl'
	 */
	public UsersDaoImpl() {}

	/**
	 * Method 'UsersDaoImpl'
	 * 
	 * @param userConn
	 */
	public UsersDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "USERS";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected Users fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			Users dto = new Users();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected Users[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<Users> resultList = new ArrayList<Users>();
		while (rs.next()){
			Users dto = new Users();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		Users ret[] = new Users[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	
	
	protected Users[] fetchMultiResults1(ResultSet rs) throws SQLException {
		Collection<Users> resultList = new ArrayList<Users>();
		while (rs.next()){
			Users dto = new Users();
			populateDto1(dto, rs);
			resultList.add(dto);
		}
		Users ret[] = new Users[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	protected void populateDto1(Users dto, ResultSet rs) throws SQLException {
         int index = 1;
		dto.setEmpId(rs.getInt(index++));
	
	}
	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Users dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setEmpId(rs.getInt(COLUMN_EMP_ID));
		dto.setLevelId(rs.getInt(COLUMN_LEVEL_ID));
		dto.setRegDivId(rs.getInt(COLUMN_REG_DIV_ID));
		if (rs.wasNull()){
			dto.setRegDivIdNull(true);
		}
		dto.setProfileId(rs.getInt(COLUMN_PROFILE_ID));
		if (rs.wasNull()){
			dto.setProfileIdNull(true);
		}
		dto.setFinanceId(rs.getInt(COLUMN_FINANCE_ID));
		if (rs.wasNull()){
			dto.setFinanceIdNull(true);
		}
		dto.setNomineeId(rs.getInt(COLUMN_NOMINEE_ID));
		if (rs.wasNull()){
			dto.setNomineeIdNull(true);
		}
		dto.setPassportId(rs.getInt(COLUMN_PASSPORT_ID));
		if (rs.wasNull()){
			dto.setPassportIdNull(true);
		}
		dto.setPersonalId(rs.getInt(COLUMN_PERSONAL_ID));
		if (rs.wasNull()){
			dto.setPersonalIdNull(true);
		}
		dto.setComplete(rs.getShort(COLUMN_COMPLETE));
		/*if (rs.wasNull()){
			dto.setSalaryIdNull(true);
		}*/
		dto.setStatus(rs.getShort(COLUMN_STATUS));
		dto.setCreateDate(rs.getTimestamp(COLUMN_CREATE_DATE));
		dto.setUserCreatedBy(rs.getInt(COLUMN_USER_CREATED_BY));
		if (rs.wasNull()){
			dto.setUserCreatedByNull(true);
		}
		dto.setExperienceId(rs.getInt(COLUMN_EXPERIENCE_ID));
		if (rs.wasNull()){
			dto.setExperienceIdNull(true);
		}
		dto.setSkillsetId(rs.getString(COLUMN_SKILLSET_ID));
		dto.setOthers(rs.getString(COLUMN_OTHERS));
		dto.setActionBy(rs.getInt(COLUMN_ACTION_BY));
		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setPayableDays(rs.getInt("PAYABLEDAYS") + "");
			} catch (Exception e){}
		}
		if (rs.wasNull()){
			dto.setActionByNull(true);
		}
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Users dto) {}

	/**
	 * Returns all rows from the USERS table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	public Users[] findWhereProfileIdEquals(String sql, Object[] sqlParams) throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the USERS table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public Users[] findUsersByDivision(int divisionId) throws UsersDaoException {
		Users users[] = findByDynamicSelect(SQL_SELECT + " WHERE  REG_DIV_ID IN (SELECT RDM.ID FROM REG_DIV_MAP  RDM WHERE RDM.DIVISION_ID=?)", new Object[] { divisionId });
		return users.length == 0 ? null : users;
	}

	public Collection findAllEmployeeIds() throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT EMP_ID FROM " + getTableName();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery();
			Collection resultList = new HashSet();
			while (rs.next()){
				resultList.add(rs.getInt(COLUMN_ID) + "");
			}
			return resultList;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public Map<Integer, Integer> findAllUsersEmployeeIds() throws UsersDaoException {
		return findAllUsersEmployeeIds(false);
	}
	/**
	 * @return returns map consists of userid and employeeid
	 */
	public Map<Integer, Integer> findAllUsersEmployeeIds(boolean isUserIdAsKey) throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT ID, EMP_ID FROM " + getTableName();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery();
			HashMap<Integer, Integer> resultList = new HashMap<Integer, Integer>();
			while (rs.next()){
				if (!isUserIdAsKey) resultList.put(rs.getInt(COLUMN_EMP_ID), rs.getInt(COLUMN_ID));
				else resultList.put(rs.getInt(COLUMN_ID), rs.getInt(COLUMN_EMP_ID));
			}
			return resultList;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	@Override
	public UserBean[] findAllUserNames(String sql, Object[] sqlParams) throws UsersDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT U.ID,P.FIRST_NAME,P.LAST_NAME FROM PROFILE_INFO P,USERS U where U.PROFILE_ID=P.ID AND U.id IN ( " + sql + " )";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery(SQL);
			Collection<UserBean> resultList = new ArrayList<UserBean>();
			while (rs.next()){
				UserBean dto = new UserBean(rs.getInt(1) + "", rs.getString(2), rs.getString(3));
				resultList.add(dto);
			}
			return (UserBean[]) resultList.toArray(new UserBean[resultList.size()]);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public ProfileListBean[] findAllEmployeesProfileListBean(int status) throws UsersDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT P.ID,U.ID AS USER_ID,U.EMP_ID, P.LEVEL_ID, P.FIRST_NAME, P.LAST_NAME,P.OFFICAL_EMAIL_ID,(SELECT CONCAT(HRP.FIRST_NAME,' ', HRP.LAST_NAME) FROM PROFILE_INFO HRP WHERE HRP.ID=(SELECT PROFILE_ID FROM USERS UU WHERE UU.ID=P.HR_SPOC)) AS HR_SPOC_NAME,L.DESIGNATION, PEI.PRIMARY_PHONE_NO, U.COMPLETE FROM PROFILE_INFO P JOIN USERS U ON U.PROFILE_ID=P.ID AND U.STATUS=0 JOIN LEVELS L ON L.ID=P.LEVEL_ID LEFT JOIN PERSONAL_INFO PEI ON U.PERSONAL_ID = PEI.ID";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			//stmt.setObject(1, status);
			rs = stmt.executeQuery(SQL);
			Collection<ProfileListBean> resultList = new ArrayList<ProfileListBean>();
			while (rs.next()){
				ProfileListBean dto = new ProfileListBean(rs.getInt(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getShort(11));
				resultList.add(dto);
			}
			return (ProfileListBean[]) resultList.toArray(new ProfileListBean[resultList.size()]);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	public List<EmployeePerdiem> receiveAllEmployeesForPerdiem(Integer[] sqlParams, boolean isFirstLevel, int loggedInPerson) throws UsersDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			String SQL;
			if(isFirstLevel){
				SQL = "SELECT U.ID AS USER_ID, U.EMP_ID AS EMP_ID, CONCAT(PI.FIRST_NAME,' ',PI.LAST_NAME)AS NAME, PI.REPORTING_MGR AS MGR_ID  FROM USERS U, PROFILE_INFO PI " +
				"WHERE PI.ID=U.PROFILE_ID AND U.LEVEL_ID IN (" +
				" SELECT L.ID FROM LEVELS L WHERE L.DIVISION_ID IN(" +
				" SELECT D.ID FROM DIVISON D WHERE D.REGION_ID IN(" +
				" SELECT R.ID FROM REGIONS R WHERE R.COMPANY_ID=" + sqlParams[0] + "))) ";
			}else{
				List<Integer> userIds = findPeopleWhoReportTo(loggedInPerson);
				String resourcesIds = userIds.toString().replace('[', ' ').replace(']', ' ').trim();
				SQL= "SELECT U.ID AS USER_ID, U.EMP_ID AS EMP_ID, CONCAT(PI.FIRST_NAME,' ',PI.LAST_NAME)AS NAME, PI.REPORTING_MGR AS MGR_ID  FROM USERS U, PROFILE_INFO PI " +
					"WHERE PI.ID=U.PROFILE_ID AND U.ID IN (" +resourcesIds+")";				
			}			
			
			//allow users to add more than one perdiem for an employee
			/*if (sqlParams[1] > 0){
				SQL = SQL + " AND U.ID NOT IN (SELECT PERDIEM.USER_ID FROM DEP_PERDIEM_HISTORY PERDIEM WHERE DEP_ID=" + sqlParams[1] + ")";
			}*/
			
			SQL = SQL + " AND U.STATUS=0 AND U.EMP_ID > 1 ORDER BY U.ID";
			
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery(SQL);
			
			List<EmployeePerdiem> employeePerdiemList = new ArrayList<EmployeePerdiem>();
			ProjectDao projectDao = ProjectDaoFactory.create();
			ProfileInfoDao profileInfo = ProfileInfoDaoFactory.create();
			
			EmployeePerdiem employeePerdiem = null;
			while (rs.next()){
				employeePerdiem = new EmployeePerdiem();
				employeePerdiem.setUserId(rs.getInt("USER_ID"));
				employeePerdiem.setEmpId(rs.getInt("EMP_ID"));
				employeePerdiem.setEmpFullName(rs.getString("NAME"));
				
				ProfileInfo[] profileInfoDto = profileInfo.findByDynamicWhere(" ID=(SELECT U.PROFILE_ID FROM USERS U WHERE U.ID=?) ORDER BY ID DESC", new Object[]{rs.getInt("MGR_ID")});
				if(profileInfoDto!=null & profileInfoDto.length>0){
					employeePerdiem.setManagerName(profileInfoDto[0].getFirstName());
				}else{
					employeePerdiem.setManagerName("N.A");
				}
				
				Project[] project = projectDao.findByDynamicSelect("SELECT * FROM PROJECT WHERE ID IN(SELECT PM.PROJECT_ID FROM PROJECT_MAPPING PM WHERE PM.USER_ID=? ORDER BY ID DESC)", new Object[]{rs.getInt("USER_ID")});
				if(project != null && project.length>0){
					employeePerdiem.setProjectName(project[0].getName());
				}else{
					employeePerdiem.setProjectName("N.A");
				}
				
				employeePerdiemList.add(employeePerdiem);			
							
			}			
			return employeePerdiemList;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	private List<Integer> findPeopleWhoReportTo(int loggedInPerson)	throws ProfileInfoDaoException, UsersDaoException {
		ProfileInfoDao profileInfoDao = ProfileInfoDaoFactory.create();
		UsersDao usersDao = UsersDaoFactory.create();
		List<Integer> userIds = new ArrayList<Integer>();
		ProfileInfo[] profiles = profileInfoDao.findWhereReportingMgrEquals(loggedInPerson);
		if (profiles != null && profiles.length > 0) {
			for(ProfileInfo eachProfile : profiles){
				Users[] users = usersDao.findWhereProfileIdEquals(eachProfile.getId());
				if(users!=null && users.length>0){
					if(users[0].getStatus()==0){
						userIds.add(users[0].getId());
					}					
				}				
			}			
		}else{
			userIds.add(1);//this is temporary...admin is set...but is later filtered
		}
		return userIds;
	}
	
	public List<EmployeeBonus> receiveAllEmployeesForBonus(Integer[] sqlParams, boolean isFirstLevel, int loggedInPerson) throws UsersDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			String SQL;
			if(isFirstLevel){
				SQL = "SELECT U.ID AS USER_ID, U.EMP_ID AS EMP_ID, CONCAT(PI.FIRST_NAME,' ',PI.LAST_NAME)AS NAME, PI.REPORTING_MGR AS MGR_ID  FROM USERS U, PROFILE_INFO PI " +
				"WHERE PI.ID=U.PROFILE_ID AND U.LEVEL_ID IN (" +
				" SELECT L.ID FROM LEVELS L WHERE L.DIVISION_ID IN(" +
				" SELECT D.ID FROM DIVISON D WHERE D.REGION_ID IN(" +
				" SELECT R.ID FROM REGIONS R WHERE R.COMPANY_ID=" + sqlParams[0] + "))) ";
			}else{
				List<Integer> userIds = findPeopleWhoReportTo(loggedInPerson);
				String resourcesIds = userIds.toString().replace('[', ' ').replace(']', ' ').trim();
				SQL= "SELECT U.ID AS USER_ID, U.EMP_ID AS EMP_ID, CONCAT(PI.FIRST_NAME,' ',PI.LAST_NAME)AS NAME, PI.REPORTING_MGR AS MGR_ID  FROM USERS U, PROFILE_INFO PI " +
					"WHERE PI.ID=U.PROFILE_ID AND U.ID IN (" +resourcesIds+")";				
			}			
			
			//allow users to add more than one perdiem for an employee
			/*if (sqlParams[1] > 0){
				SQL = SQL + " AND U.ID NOT IN (SELECT PERDIEM.USER_ID FROM DEP_PERDIEM_HISTORY PERDIEM WHERE DEP_ID=" + sqlParams[1] + ")";
			}*/
			
			SQL = SQL + " AND U.STATUS=0 AND U.EMP_ID > 1 ORDER BY U.ID";
			
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			rs = stmt.executeQuery(SQL);
			
			List<EmployeeBonus> employeeBonusList = new ArrayList<EmployeeBonus>();
			ProjectDao projectDao = ProjectDaoFactory.create();
			ProfileInfoDao profileInfo = ProfileInfoDaoFactory.create();
			
			EmployeeBonus employeeBonus = null;
			while (rs.next()){
				employeeBonus = new EmployeeBonus();
				employeeBonus.setUserId(rs.getInt("USER_ID"));
				employeeBonus.setEmpId(rs.getInt("EMP_ID"));
				employeeBonus.setEmpFullName(rs.getString("NAME"));
				
				ProfileInfo[] profileInfoDto = profileInfo.findByDynamicWhere(" ID=(SELECT U.PROFILE_ID FROM USERS U WHERE U.ID=?) ORDER BY ID DESC", new Object[]{rs.getInt("MGR_ID")});
				if(profileInfoDto!=null & profileInfoDto.length>0){
					employeeBonus.setManagerName(profileInfoDto[0].getFirstName());
				}else{
					employeeBonus.setManagerName("N.A");
				}
				
				Project[] project = projectDao.findByDynamicSelect("SELECT * FROM PROJECT WHERE ID IN(SELECT PM.PROJECT_ID FROM PROJECT_MAPPING PM WHERE PM.USER_ID=? ORDER BY ID DESC)", new Object[]{rs.getInt("USER_ID")});
				if(project != null && project.length>0){
					employeeBonus.setProjectName(project[0].getName());
				}else{
					employeeBonus.setProjectName("N.A");
				}
				
				employeeBonusList.add(employeeBonus);			
							
			}			
			return employeeBonusList;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public List<String[]> findAllEmployeesDetailProfileListBean(int status)
			throws UsersDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	public Users[] findByDynamicSelect1(String sql, Object[] sqlParams) throws UsersDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults1(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new UsersDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
}
