/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.FbpReqDao;
import com.dikshatech.portal.dto.FbpDetails;
import com.dikshatech.portal.dto.FbpReq;
import com.dikshatech.portal.dto.FbpReqPk;
import com.dikshatech.portal.exceptions.FbpDetailsDaoException;
import com.dikshatech.portal.exceptions.FbpReqDaoException;

public class FbpReqDaoImpl extends AbstractDAO implements FbpReqDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( FbpReqDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, USER_ID, LEVEL_ID, LEVEL, MONTH_ID, ESR_MAP_ID, CREATED_ON, STATUS, SEQUENCE, MESSAGE_BODY, FREQUENT, COMMENTS  FROM " + getTableName() + "";
	
	protected final String SQL_SELECTFBP = "SELECT MAX(ID), USER_ID, LEVEL_ID, LEVEL, MONTH_ID, ESR_MAP_ID, CREATED_ON, STATUS, SEQUENCE, MESSAGE_BODY, FREQUENT, COMMENTS  FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, USER_ID, LEVEL_ID, LEVEL, MONTH_ID, ESR_MAP_ID, CREATED_ON, STATUS, SEQUENCE, MESSAGE_BODY, FREQUENT, COMMENTS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, USER_ID = ?, LEVEL_ID = ?, LEVEL = ?, MONTH_ID = ?, ESR_MAP_ID = ?, CREATED_ON = ?, STATUS = ?, SEQUENCE = ?, MESSAGE_BODY = ?, FREQUENT = ?, COMMENTS = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 2;

	/** 
	 * Index of column LEVEL_ID
	 */
	protected static final int COLUMN_LEVEL_ID = 3;

	/** 
	 * Index of column LEVEL
	 */
	protected static final int COLUMN_LEVEL = 4;

	/** 
	 * Index of column MONTH_ID
	 */
	protected static final int COLUMN_MONTH_ID = 5;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 6;

	/** 
	 * Index of column CREATED_ON
	 */
	protected static final int COLUMN_CREATED_ON = 7;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 8;

	/** 
	 * Index of column SEQUENCE
	 */
	protected static final int COLUMN_SEQUENCE = 9;

	/** 
	 * Index of column MESSAGE_BODY
	 */
	protected static final int COLUMN_MESSAGE_BODY = 10;

	/** 
	 * Index of column FREQUENT
	 */
	protected static final int COLUMN_FREQUENT = 11;

	/** 
	 * Index of column COMMENTS
	 */
	protected static final int COLUMN_COMMENTS = 12;

	/** 
	 * Number of columns
	 */
	


	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the FBP_REQ table.
	 */
	public FbpReqPk insert(FbpReq dto) throws FbpReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getUserId() );
			if (dto.isLevelIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLevelId() );
			}
		
			stmt.setString( index++, dto.getLevel() );
			stmt.setString( index++, dto.getMonthId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreatedOn()==null ? null : new java.sql.Timestamp( dto.getCreatedOn().getTime() ) );
			stmt.setString( index++, dto.getStatus() );
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
		
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setString( index++, dto.getFrequent() );
			stmt.setString( index++, dto.getComments() );
		/*	stmt.setString(index++, dto.getVpf());*/
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the FBP_REQ table.
	 */
	public void update(FbpReqPk pk, FbpReq dto) throws FbpReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getUserId() );
			if (dto.isLevelIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLevelId() );
			}
		
			stmt.setString( index++, dto.getLevel() );
			stmt.setString( index++, dto.getMonthId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreatedOn()==null ? null : new java.sql.Timestamp( dto.getCreatedOn().getTime() ) );
			stmt.setString( index++, dto.getStatus() );
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
		
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setString( index++, dto.getFrequent() );
			stmt.setString( index++, dto.getComments() );
			
			stmt.setInt( 13, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the FBP_REQ table.
	 */
	public void delete(FbpReqPk pk) throws FbpReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the FBP_REQ table that matches the specified primary-key value.
	 */
	public FbpReq findByPrimaryKey(FbpReqPk pk) throws FbpReqDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'ID = :id'.
	 */
	public FbpReq findByPrimaryKey(int id) throws FbpReqDaoException
	{
		FbpReq ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria ''.
	 */
	public FbpReq[] findAll() throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'ID = :id'.
	 */
	public FbpReq[] findWhereIdEquals(int id) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'USER_ID = :userId'.
	 */
	public FbpReq[] findWhereUserIdEquals(int userId) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public FbpReq[] findWhereLevelIdEquals(int levelId) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LEVEL_ID = ? ORDER BY LEVEL_ID", new Object[] {  new Integer(levelId) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'LEVEL = :level'.
	 */
	public FbpReq[] findWhereLevelEquals(String level) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LEVEL = ? ORDER BY LEVEL", new Object[] { level } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'MONTH_ID = :monthId'.
	 */
	public FbpReq[] findWhereMonthIdEquals(String monthId) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTH_ID = ? ORDER BY MONTH_ID", new Object[] { monthId } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public FbpReq[] findWhereEsrMapIdEquals(int esrMapId) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public FbpReq[] findWhereCreatedOnEquals(Date createdOn) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATED_ON = ? ORDER BY CREATED_ON", new Object[] { createdOn==null ? null : new java.sql.Timestamp( createdOn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'STATUS = :status'.
	 */
	public FbpReq[] findWhereStatusEquals(String status) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'SEQUENCE = :sequence'.
	 */
	public FbpReq[] findWhereSequenceEquals(int sequence) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEQUENCE = ? ORDER BY SEQUENCE", new Object[] {  new Integer(sequence) } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public FbpReq[] findWhereMessageBodyEquals(String messageBody) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'FREQUENT = :frequent'.
	 */
	public FbpReq[] findWhereFrequentEquals(String frequent) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FREQUENT = ? ORDER BY FREQUENT", new Object[] { frequent } );
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the criteria 'COMMENTS = :comments'.
	 */
	public FbpReq[] findWhereCommentsEquals(String comments) throws FbpReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENTS = ? ORDER BY COMMENTS", new Object[] { comments } );
	}

	/**
	 * Method 'FbpReqDaoImpl'
	 * 
	 */
	public FbpReqDaoImpl()
	{
	}

	/**
	 * Method 'FbpReqDaoImpl'
	 * 
	 * @param userConn
	 */
	public FbpReqDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "FBP_REQ";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected FbpReq fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			FbpReq dto = new FbpReq();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected FbpReq[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<FbpReq> resultList = new ArrayList<FbpReq>();
		while (rs.next()) {
			FbpReq dto = new FbpReq();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		FbpReq ret[] = new FbpReq[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(FbpReq dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
		dto.setLevelId( rs.getInt( COLUMN_LEVEL_ID ) );
		if (rs.wasNull()) {
			dto.setLevelIdNull( true );
		}
		
		dto.setLevel( rs.getString( COLUMN_LEVEL ) );
		dto.setMonthId( rs.getString( COLUMN_MONTH_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setCreatedOn( rs.getTimestamp(COLUMN_CREATED_ON ) );
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setSequence( rs.getInt( COLUMN_SEQUENCE ) );
		if (rs.wasNull()) {
			dto.setSequenceNull( true );
		}
		
		dto.setMessageBody( rs.getString( COLUMN_MESSAGE_BODY ) );
		dto.setFrequent( rs.getString( COLUMN_FREQUENT ) );
		dto.setComments( rs.getString( COLUMN_COMMENTS ) );
	
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(FbpReq dto)
	{
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the specified arbitrary SQL statement
	 */
	public FbpReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws FbpReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the FBP_REQ table that match the specified arbitrary SQL statement
	 */
	public FbpReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws FbpReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
	}
		public FbpReq[] findByDynamicWhereMaxF(String sql, Object[] sqlParams) throws FbpReqDaoException
		{
			// declare variables
			final boolean isConnSupplied = (userConn != null);
			Connection conn = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			
			try {
				// get the user-specified connection or get a connection from the ResourceManager
				conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			
				// construct the SQL statement
				final String SQL = SQL_SELECTFBP + " WHERE " + sql;
			
			
				if (logger.isDebugEnabled()) {
					logger.debug( "Executing " + SQL);
				}
			
				// prepare statement
				stmt = conn.prepareStatement( SQL );
				stmt.setMaxRows( maxRows );
			
				// bind parameters
				for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
					stmt.setObject( i+1, sqlParams[i] );
				}
			
			
				rs = stmt.executeQuery();
			
				// fetch the results
				return fetchMultiResults(rs);
			}
			catch (Exception _e) {
				logger.error( "Exception: " + _e.getMessage(), _e );
				throw new FbpReqDaoException( "Exception: " + _e.getMessage(), _e );
			}
			finally {
				ResourceManager.close(rs);
				ResourceManager.close(stmt);
				if (!isConnSupplied) {
					ResourceManager.close(conn);
				}
			
			}
		
	}

	
	
	
	

	
	
	
	
	
}
