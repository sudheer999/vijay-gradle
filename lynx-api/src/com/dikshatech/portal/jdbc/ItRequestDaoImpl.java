/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ItRequestDaoImpl extends AbstractDAO implements ItRequestDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ItRequestDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, CATEGORY, SUMMARY, DESCRIPTION, ATTACHMENT, COMMENTS, STATUS, REQUESTER_ID, ASSIGN_TO, REMARK, MESSAGE_BODY, CREATE_DATE, LAST_MODIFIED_DATE, RECEIVER_ID, IS_DELETED FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, CATEGORY, SUMMARY, DESCRIPTION, ATTACHMENT, COMMENTS, STATUS, REQUESTER_ID, ASSIGN_TO, REMARK, MESSAGE_BODY, CREATE_DATE, LAST_MODIFIED_DATE, RECEIVER_ID, IS_DELETED ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, CATEGORY = ?, SUMMARY = ?, DESCRIPTION = ?, ATTACHMENT = ?, COMMENTS = ?, STATUS = ?, REQUESTER_ID = ?, ASSIGN_TO = ?, REMARK = ?, MESSAGE_BODY = ?, CREATE_DATE = ?, LAST_MODIFIED_DATE = ?, RECEIVER_ID = ?, IS_DELETED = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column CATEGORY
	 */
	protected static final int COLUMN_CATEGORY = 3;

	/** 
	 * Index of column SUMMARY
	 */
	protected static final int COLUMN_SUMMARY = 4;

	/** 
	 * Index of column DESCRIPTION
	 */
	protected static final int COLUMN_DESCRIPTION = 5;

	/** 
	 * Index of column ATTACHMENT
	 */
	protected static final int COLUMN_ATTACHMENT = 6;

	/** 
	 * Index of column COMMENTS
	 */
	protected static final int COLUMN_COMMENTS = 7;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 8;

	/** 
	 * Index of column REQUESTER_ID
	 */
	protected static final int COLUMN_REQUESTER_ID = 9;

	/** 
	 * Index of column ASSIGN_TO
	 */
	protected static final int COLUMN_ASSIGN_TO = 10;

	/** 
	 * Index of column REMARK
	 */
	protected static final int COLUMN_REMARK = 11;

	/** 
	 * Index of column MESSAGE_BODY
	 */
	protected static final int COLUMN_MESSAGE_BODY = 12;

	/** 
	 * Index of column CREATE_DATE
	 */
	protected static final int COLUMN_CREATE_DATE = 13;

	/** 
	 * Index of column LAST_MODIFIED_DATE
	 */
	protected static final int COLUMN_LAST_MODIFIED_DATE = 14;

	/** 
	 * Index of column RECEIVER_ID
	 */
	protected static final int COLUMN_RECEIVER_ID = 15;

	/** 
	 * Index of column IS_DELETED
	 */
	protected static final int COLUMN_IS_DELETED = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the IT_REQUEST table.
	 */
	public ItRequestPk insert(ItRequest dto) throws ItRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getCategory() );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isAttachmentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAttachment() );
			}
		
			stmt.setString( index++, dto.getComments() );
			stmt.setString( index++, dto.getStatus() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastModifiedDate()==null ? null : new java.sql.Timestamp( dto.getLastModifiedDate().getTime() ) );
			if (dto.isReceiverIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getReceiverId() );
			}
		
			stmt.setInt( index++, dto.getIsDeleted() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the IT_REQUEST table.
	 */
	public void update(ItRequestPk pk, ItRequest dto) throws ItRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getCategory() );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isAttachmentNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAttachment() );
			}
		
			stmt.setString( index++, dto.getComments() );
			stmt.setString( index++, dto.getStatus() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastModifiedDate()==null ? null : new java.sql.Timestamp( dto.getLastModifiedDate().getTime() ) );
			if (dto.isReceiverIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getReceiverId() );
			}
		
			stmt.setInt( index++, dto.getIsDeleted() );
			stmt.setInt( 17, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the IT_REQUEST table.
	 */
	public void delete(ItRequestPk pk) throws ItRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the IT_REQUEST table that matches the specified primary-key value.
	 */
	public ItRequest findByPrimaryKey(ItRequestPk pk) throws ItRequestDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'ID = :id'.
	 */
	public ItRequest findByPrimaryKey(int id) throws ItRequestDaoException
	{
		ItRequest ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria ''.
	 */
	public ItRequest[] findAll() throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'ID = :id'.
	 */
	public ItRequest[] findWhereIdEquals(int id) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ItRequest[] findWhereEsrMapIdEquals(int esrMapId) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'CATEGORY = :category'.
	 */
	public ItRequest[] findWhereCategoryEquals(String category) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CATEGORY = ? ORDER BY CATEGORY", new Object[] { category } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'SUMMARY = :summary'.
	 */
	public ItRequest[] findWhereSummaryEquals(String summary) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMMARY = ? ORDER BY SUMMARY", new Object[] { summary } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'DESCRIPTION = :description'.
	 */
	public ItRequest[] findWhereDescriptionEquals(String description) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'ATTACHMENT = :attachment'.
	 */
	public ItRequest[] findWhereAttachmentEquals(int attachment) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATTACHMENT = ? ORDER BY ATTACHMENT", new Object[] {  new Integer(attachment) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'COMMENTS = :comments'.
	 */
	public ItRequest[] findWhereCommentsEquals(String comments) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENTS = ? ORDER BY COMMENTS", new Object[] { comments } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'STATUS = :status'.
	 */
	public ItRequest[] findWhereStatusEquals(String status) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public ItRequest[] findWhereRequesterIdEquals(int requesterId) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTER_ID = ? ORDER BY REQUESTER_ID", new Object[] {  new Integer(requesterId) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'ASSIGN_TO = :assignTo'.
	 */
	public ItRequest[] findWhereAssignToEquals(int assignTo) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASSIGN_TO = ? ORDER BY ASSIGN_TO", new Object[] {  new Integer(assignTo) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'REMARK = :remark'.
	 */
	public ItRequest[] findWhereRemarkEquals(String remark) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMARK = ? ORDER BY REMARK", new Object[] { remark } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public ItRequest[] findWhereMessageBodyEquals(String messageBody) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ItRequest[] findWhereCreateDateEquals(Date createDate) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate==null ? null : new java.sql.Timestamp( createDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'LAST_MODIFIED_DATE = :lastModifiedDate'.
	 */
	public ItRequest[] findWhereLastModifiedDateEquals(Date lastModifiedDate) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LAST_MODIFIED_DATE = ? ORDER BY LAST_MODIFIED_DATE", new Object[] { lastModifiedDate==null ? null : new java.sql.Timestamp( lastModifiedDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'RECEIVER_ID = :receiverId'.
	 */
	public ItRequest[] findWhereReceiverIdEquals(int receiverId) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECEIVER_ID = ? ORDER BY RECEIVER_ID", new Object[] {  new Integer(receiverId) } );
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the criteria 'IS_DELETED = :isDeleted'.
	 */
	public ItRequest[] findWhereIsDeletedEquals(int isDeleted) throws ItRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_DELETED = ? ORDER BY IS_DELETED", new Object[] {  new Integer(isDeleted) } );
	}

	/**
	 * Method 'ItRequestDaoImpl'
	 * 
	 */
	public ItRequestDaoImpl()
	{
	}

	/**
	 * Method 'ItRequestDaoImpl'
	 * 
	 * @param userConn
	 */
	public ItRequestDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "IT_REQUEST";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ItRequest fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ItRequest dto = new ItRequest();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ItRequest[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ItRequest> resultList = new ArrayList<ItRequest>();
		while (rs.next()) {
			ItRequest dto = new ItRequest();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ItRequest ret[] = new ItRequest[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ItRequest dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setCategory( rs.getString( COLUMN_CATEGORY ) );
		dto.setSummary( rs.getString( COLUMN_SUMMARY ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setAttachment( rs.getInt( COLUMN_ATTACHMENT ) );
		if (rs.wasNull()) {
			dto.setAttachmentNull( true );
		}
		
		dto.setComments( rs.getString( COLUMN_COMMENTS ) );
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setRequesterId( rs.getInt( COLUMN_REQUESTER_ID ) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setAssignTo( rs.getInt( COLUMN_ASSIGN_TO ) );
		if (rs.wasNull()) {
			dto.setAssignToNull( true );
		}
		
		dto.setRemark( rs.getString( COLUMN_REMARK ) );
		dto.setMessageBody( rs.getString( COLUMN_MESSAGE_BODY ) );
		dto.setCreateDate( rs.getTimestamp(COLUMN_CREATE_DATE ) );
		dto.setLastModifiedDate( rs.getTimestamp(COLUMN_LAST_MODIFIED_DATE ) );
		dto.setReceiverId( rs.getInt( COLUMN_RECEIVER_ID ) );
		if (rs.wasNull()) {
			dto.setReceiverIdNull( true );
		}
		
		dto.setIsDeleted( rs.getInt( COLUMN_IS_DELETED ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ItRequest dto)
	{
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the specified arbitrary SQL statement
	 */
	public ItRequest[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItRequestDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the IT_REQUEST table that match the specified arbitrary SQL statement
	 */
	public ItRequest[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItRequestDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
