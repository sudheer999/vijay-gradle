/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.LeaveBalanceDao;
import com.dikshatech.portal.dto.LeaveBalance;
import com.dikshatech.portal.dto.LeaveBalancePk;
import com.dikshatech.portal.exceptions.LeaveBalanceDaoException;

public class LeaveBalanceDaoImpl extends AbstractDAO implements LeaveBalanceDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger						= Logger.getLogger(LeaveBalanceDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT					= "SELECT ID, USER_ID, LEAVE_ACCUMALATED, PATERNITY, MARRIAGE, BEREAVEMENT, MATERNITY, LEAVES_TAKEN, BALANCE, CREATED_ON, COMP_OFF, LWP FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT					= "INSERT INTO " + getTableName() + " ( ID, USER_ID, LEAVE_ACCUMALATED, PATERNITY, MARRIAGE, BEREAVEMENT, MATERNITY, LEAVES_TAKEN, BALANCE, CREATED_ON, COMP_OFF, LWP ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE					= "UPDATE " + getTableName() + " SET ID = ?, USER_ID = ?, LEAVE_ACCUMALATED = ?, PATERNITY = ?, MARRIAGE = ?, BEREAVEMENT = ?, MATERNITY = ?, LEAVES_TAKEN = ?, BALANCE = ?, CREATED_ON = ?, COMP_OFF = ?, LWP = ? WHERE ID = ?";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE_FROM_XLS			= "UPDATE " + getTableName() + " SET LEAVE_ACCUMALATED = ?, PATERNITY = ?, MARRIAGE = ?, BEREAVEMENT = ?, MATERNITY = ?, LEAVES_TAKEN = ?, BALANCE = ? WHERE USER_ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE					= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID					= 1;
	/**
	 * Index of column USER_ID
	 */
	protected static final int		COLUMN_USER_ID				= 2;
	/**
	 * Index of column LEAVE_ACCUMALATED
	 */
	protected static final int		COLUMN_LEAVE_ACCUMALATED	= 3;
	/**
	 * Index of column PATERNITY
	 */
	protected static final int		COLUMN_PATERNITY			= 4;
	/**
	 * Index of column MARRIAGE
	 */
	protected static final int		COLUMN_MARRIAGE				= 5;
	/**
	 * Index of column BEREAVEMENT
	 */
	protected static final int		COLUMN_BEREAVEMENT			= 6;
	/**
	 * Index of column MATERNITY
	 */
	protected static final int		COLUMN_MATERNITY			= 7;
	/**
	 * Index of column LEAVES_TAKEN
	 */
	protected static final int		COLUMN_LEAVES_TAKEN			= 8;
	/**
	 * Index of column BALANCE
	 */
	protected static final int		COLUMN_BALANCE				= 9;
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_CREATED_ON			= 10;
	/**
	 * Index of column COMP_OFF
	 */
	protected static final int		COLUMN_COMP_OFF				= 11;
	/**
	 * Index of column LWP
	 */
	protected static final int		COLUMN_LWP					= 12;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS			= 12;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID				= 1;

	/**
	 * Inserts a new row in the LEAVE_BALANCE table.
	 */
	public LeaveBalancePk insert(LeaveBalance dto) throws LeaveBalanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getUserId());
			if (dto.isLeaveAccumalatedNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeaveAccumalated());
			}
			if (dto.isPaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getPaternity());
			}
			if (dto.isMarriageNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMarriage());
			}
			if (dto.isBereavementNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBereavement());
			}
			if (dto.isMaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMaternity());
			}
			if (dto.isLeavesTakenNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeavesTaken());
			}
			if (dto.isBalanceNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBalance());
			}
			stmt.setTimestamp(index++, dto.getCreatedOn() == null ? null : new java.sql.Timestamp(dto.getCreatedOn().getTime()));
			stmt.setFloat(index++, dto.getCompOff());
			if (dto.isLwpNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLwp());
			}
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the LEAVE_BALANCE table.
	 */
	public void update(LeaveBalancePk pk, LeaveBalance dto) throws LeaveBalanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getUserId());
			if (dto.isLeaveAccumalatedNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeaveAccumalated());
			}
			if (dto.isPaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getPaternity());
			}
			if (dto.isMarriageNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMarriage());
			}
			if (dto.isBereavementNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBereavement());
			}
			if (dto.isMaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMaternity());
			}
			if (dto.isLeavesTakenNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeavesTaken());
			}
			if (dto.isBalanceNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBalance());
			}
			stmt.setTimestamp(index++, dto.getCreatedOn() == null ? null : new java.sql.Timestamp(dto.getCreatedOn().getTime()));
			stmt.setFloat(index++, dto.getCompOff());
			if (dto.isLwpNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLwp());
			}
			stmt.setInt(13, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the LEAVE_BALANCE table.
	 */
	public boolean updateFromXls(LeaveBalance dto) throws LeaveBalanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE_FROM_XLS + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE_FROM_XLS);
			int index = 1;
			//stmt.setInt( index++, dto.getId() );
			//stmt.setInt( index++, dto.getUserId() );
			if (dto.isLeaveAccumalatedNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeaveAccumalated());
			}
			if (dto.isPaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getPaternity());
			}
			if (dto.isMarriageNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMarriage());
			}
			if (dto.isBereavementNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBereavement());
			}
			if (dto.isMaternityNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getMaternity());
			}
			if (dto.isLeavesTakenNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getLeavesTaken());
			}
			if (dto.isBalanceNull()){
				stmt.setNull(index++, java.sql.Types.FLOAT);
			} else{
				stmt.setFloat(index++, dto.getBalance());
			}
			//stmt.setTimestamp(index++, dto.getCreatedOn()==null ? null : new java.sql.Timestamp( dto.getCreatedOn().getTime() ) );
			//stmt.setFloat( index++, dto.getCompOff() );
			stmt.setInt(index++, dto.getUserId());
			int rows = stmt.executeUpdate();
			if (rows == 0) insert(dto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			return true;
		} catch (Exception _e){
			return false;
			//System.err.println("Error while updating/inserting leave deatails of USER ID = " + dto.getUserId());
			//logger.error("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	/**
	 * Deletes a single row in the LEAVE_BALANCE table.
	 */
	public void delete(LeaveBalancePk pk) throws LeaveBalanceDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the LEAVE_BALANCE table that matches the specified primary-key value.
	 */
	public LeaveBalance findByPrimaryKey(LeaveBalancePk pk) throws LeaveBalanceDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'ID = :id'.
	 */
	public LeaveBalance findByPrimaryKey(int id) throws LeaveBalanceDaoException {
		LeaveBalance ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria ''.
	 */
	public LeaveBalance[] findAll() throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'ID = :id'.
	 */
	public LeaveBalance[] findWhereIdEquals(int id) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'USER_ID = :userId'.
	 */
	public LeaveBalance findWhereUserIdEquals(int userId) throws LeaveBalanceDaoException {
		LeaveBalance ret[] = findByDynamicSelect(SQL_SELECT + " WHERE USER_ID = ?", new Object[] { new Integer(userId) });
		return ret.length == 0 ? null : ret[0];
	}
	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LEAVE_ACCUMALATED = :leaveAccumalated'.
	 */
	public LeaveBalance[] findWhereLeaveAccumalatedEquals(float leaveAccumalated) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEAVE_ACCUMALATED = ? ORDER BY LEAVE_ACCUMALATED", new Object[] { new Float(leaveAccumalated) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'PATERNITY = :paternity'.
	 */
	public LeaveBalance[] findWherePaternityEquals(float paternity) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PATERNITY = ? ORDER BY PATERNITY", new Object[] { new Float(paternity) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'MARRIAGE = :marriage'.
	 */
	public LeaveBalance[] findWhereMarriageEquals(float marriage) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MARRIAGE = ? ORDER BY MARRIAGE", new Object[] { new Float(marriage) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'BEREAVEMENT = :bereavement'.
	 */
	public LeaveBalance[] findWhereBereavementEquals(float bereavement) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BEREAVEMENT = ? ORDER BY BEREAVEMENT", new Object[] { new Float(bereavement) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'MATERNITY = :maternity'.
	 */
	public LeaveBalance[] findWhereMaternityEquals(float maternity) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MATERNITY = ? ORDER BY MATERNITY", new Object[] { new Float(maternity) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LEAVES_TAKEN = :leavesTaken'.
	 */
	public LeaveBalance[] findWhereLeavesTakenEquals(float leavesTaken) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEAVES_TAKEN = ? ORDER BY LEAVES_TAKEN", new Object[] { new Float(leavesTaken) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'BALANCE = :balance'.
	 */
	public LeaveBalance[] findWhereBalanceEquals(float balance) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BALANCE = ? ORDER BY BALANCE", new Object[] { new Float(balance) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public LeaveBalance[] findWhereCreatedOnEquals(Date createdOn) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATED_ON = ? ORDER BY CREATED_ON", new Object[] { createdOn == null ? null : new java.sql.Timestamp(createdOn.getTime()) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'COMP_OFF = :compOff'.
	 */
	public LeaveBalance[] findWhereCompOffEquals(float compOff) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMP_OFF = ? ORDER BY COMP_OFF", new Object[] { new Float(compOff) });
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LWP = :lwp'.
	 */
	public LeaveBalance[] findWhereLwpEquals(float lwp) throws LeaveBalanceDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LWP = ? ORDER BY LWP", new Object[] { new Float(lwp) });
	}

	/**
	 * Method 'LeaveBalanceDaoImpl'
	 */
	public LeaveBalanceDaoImpl() {}

	/**
	 * Method 'LeaveBalanceDaoImpl'
	 * 
	 * @param userConn
	 */
	public LeaveBalanceDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "LEAVE_BALANCE";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected LeaveBalance fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			LeaveBalance dto = new LeaveBalance();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected LeaveBalance[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<LeaveBalance> resultList = new ArrayList<LeaveBalance>();
		while (rs.next()){
			LeaveBalance dto = new LeaveBalance();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		LeaveBalance ret[] = new LeaveBalance[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	protected LeaveBalance[] fetchMultiResultsLeave(ResultSet rs) throws SQLException {
		Collection<LeaveBalance> resultList = new ArrayList<LeaveBalance>();
		while (rs.next()){
			LeaveBalance dto = new LeaveBalance();
			populateDtoLeave(dto, rs);
			resultList.add(dto);
		}
		LeaveBalance ret[] = new LeaveBalance[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	protected void populateDtoLeave(LeaveBalance dto, ResultSet rs) throws SQLException {

		dto.setLwp(rs.getFloat(COLUMN_LWP));
		
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LeaveBalance dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
		dto.setLeaveAccumalated(rs.getFloat(COLUMN_LEAVE_ACCUMALATED));
		if (rs.wasNull()){
			dto.setLeaveAccumalatedNull(true);
		}
		dto.setPaternity(rs.getFloat(COLUMN_PATERNITY));
		if (rs.wasNull()){
			dto.setPaternityNull(true);
		}
		dto.setMarriage(rs.getFloat(COLUMN_MARRIAGE));
		if (rs.wasNull()){
			dto.setMarriageNull(true);
		}
		dto.setBereavement(rs.getFloat(COLUMN_BEREAVEMENT));
		if (rs.wasNull()){
			dto.setBereavementNull(true);
		}
		dto.setMaternity(rs.getFloat(COLUMN_MATERNITY));
		if (rs.wasNull()){
			dto.setMaternityNull(true);
		}
		dto.setLeavesTaken(rs.getFloat(COLUMN_LEAVES_TAKEN));
		if (rs.wasNull()){
			dto.setLeavesTakenNull(true);
		}
		dto.setBalance(rs.getFloat(COLUMN_BALANCE));
		if (rs.wasNull()){
			dto.setBalanceNull(true);
		}
		dto.setCreatedOn(rs.getTimestamp(COLUMN_CREATED_ON));
		dto.setCompOff(rs.getFloat(COLUMN_COMP_OFF));
		dto.setLwp(rs.getFloat(COLUMN_LWP));
		if (rs.wasNull()){
			dto.setLwpNull(true);
		}
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LeaveBalance dto) {}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the specified arbitrary SQL statement
	 */
	public LeaveBalance[] findByDynamicSelect(String sql, Object[] sqlParams) throws LeaveBalanceDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the LEAVE_BALANCE table that match the specified arbitrary SQL statement
	 */
	public LeaveBalance[] findByDynamicWhere(String sql, Object[] sqlParams) throws LeaveBalanceDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public LeaveBalance[] findByUserID(String sql, Object[] sqlParams) throws LeaveBalanceDaoException {
		// declare variables
				final boolean isConnSupplied = (userConn != null);
				Connection conn = null;
				PreparedStatement stmt = null;
				ResultSet rs = null;
				try{
					// get the user-specified connection or get a connection from the ResourceManager
					conn = isConnSupplied ? userConn : ResourceManager.getConnection();
					// construct the SQL statement
					
					final String SQL = "SELECT LWP FROM LEAVE_BALANCE "+ " WHERE " + sql;
					if (logger.isDebugEnabled()){
						logger.debug("Executing " + SQL);
					}
					// prepare statement
					stmt = conn.prepareStatement(SQL);
					stmt.setMaxRows(maxRows);
					// bind parameters
					for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
						stmt.setObject(i + 1, sqlParams[i]);
					}
					rs = stmt.executeQuery();
					// fetch the results
					return fetchMultiResultsLeave(rs);
				} catch (Exception _e){
					logger.error("Exception: " + _e.getMessage(), _e);
					throw new LeaveBalanceDaoException("Exception: " + _e.getMessage(), _e);
				} finally{
					ResourceManager.close(rs);
					ResourceManager.close(stmt);
					if (!isConnSupplied){
						ResourceManager.close(conn);
					}
				}
			}
	}
