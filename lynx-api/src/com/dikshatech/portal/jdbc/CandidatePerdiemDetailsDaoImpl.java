/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.CandidatePerdiemDetailsDao;
import com.dikshatech.portal.dto.CandidatePerdiemDetails;
import com.dikshatech.portal.dto.CandidatePerdiemDetailsPk;
import com.dikshatech.portal.exceptions.CandidatePerdiemDetailsDaoException;

public class CandidatePerdiemDetailsDaoImpl extends AbstractDAO implements
		CandidatePerdiemDetailsDao {
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger
			.getLogger(CandidatePerdiemDetailsDaoImpl.class);

	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String SQL_SELECT = "SELECT ID, CANDIDATE_ID, LOCATION, PERDIEM, USER_ID FROM "
			+ getTableName() + "";

	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/**
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName()
			+ " ( ID, CANDIDATE_ID, LOCATION, PERDIEM ,USER_ID) VALUES ( ?, ?, ?, ?, ?)";

	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE "
			+ getTableName()
			+ " SET ID = ?, CANDIDATE_ID = ?, LOCATION = ?, PERDIEM = ?, USER_ID =? WHERE ID = ?";

	/**
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName()
			+ " WHERE ID = ?";

	/**
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/**
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 2;

	/**
	 * Index of column LOCATION
	 */
	protected static final int COLUMN_LOCATION = 3;

	/**
	 * Index of column PERDIEM
	 */
	protected static final int COLUMN_PERDIEM = 4;
	
	/**
	 * Index of column PERDIEM
	 */
	protected static final int COLUMN_USER_ID = 5;

	/**
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/**
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/**
	 * Inserts a new row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public CandidatePerdiemDetailsPk insert(CandidatePerdiemDetails dto)
			throws CandidatePerdiemDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			stmt = conn.prepareStatement(SQL_INSERT,
					Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getCandidateId());
			stmt.setString(index++, dto.getLocation());
			stmt.setString(index++, dto.getPerdiem());
			stmt.setString(index++, dto.getUserId());
			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}

			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId(rs.getInt(1));
			}

			reset(dto);
			return dto.createPk();
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public void update(CandidatePerdiemDetailsPk pk, CandidatePerdiemDetails dto)
			throws CandidatePerdiemDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}

			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getCandidateId());
			stmt.setString(index++, dto.getLocation());
			stmt.setString(index++, dto.getPerdiem());
			stmt.setString(index++, dto.getUserId());
			stmt.setInt(6, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public void delete(CandidatePerdiemDetailsPk pk)
			throws CandidatePerdiemDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}

			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the CANDIDATE_PERDIEM_DETAILS table that matches
	 * the specified primary-key value.
	 */
	public CandidatePerdiemDetails findByPrimaryKey(CandidatePerdiemDetailsPk pk)
			throws CandidatePerdiemDetailsDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'ID = :id'.
	 */
	public CandidatePerdiemDetails findByPrimaryKey(int id)
			throws CandidatePerdiemDetailsDaoException {
		CandidatePerdiemDetails ret[] = findByDynamicSelect(SQL_SELECT
				+ " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria ''.
	 */
	public CandidatePerdiemDetails[] findAll()
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'ID = :id'.
	 */
	public CandidatePerdiemDetails[] findWhereIdEquals(int id)
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID",
				new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public CandidatePerdiemDetails[] findWhereCandidateIdEquals(int candidateId)
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID",
				new Object[] { new Integer(candidateId) });
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'LOCATION = :location'.
	 */
	public CandidatePerdiemDetails[] findWhereLocationEquals(String location)
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE LOCATION = ? ORDER BY LOCATION",
				new Object[] { location });
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'PERDIEM = :perdiem'.
	 */
	public CandidatePerdiemDetails[] findWherePerdiemEquals(String perdiem)
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE PERDIEM = ? ORDER BY PERDIEM",
				new Object[] { perdiem });
	}
	
	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'USER_ID = :userId'.
	 */
	public CandidatePerdiemDetails[] findWhereUserIdEquals(int userId)
			throws CandidatePerdiemDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE USER_ID = ? ORDER BY USER_ID",
				new Object[] { new Integer(userId) });
	}

	/**
	 * Method 'CandidatePerdiemDetailsDaoImpl'
	 * 
	 */
	public CandidatePerdiemDetailsDaoImpl() {
	}

	/**
	 * Method 'CandidatePerdiemDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public CandidatePerdiemDetailsDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "CANDIDATE_PERDIEM_DETAILS";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected CandidatePerdiemDetails fetchSingleResult(ResultSet rs)
			throws SQLException {
		if (rs.next()) {
			CandidatePerdiemDetails dto = new CandidatePerdiemDetails();
			populateDto(dto, rs);
			return dto;
		} else {
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected CandidatePerdiemDetails[] fetchMultiResults(ResultSet rs)
			throws SQLException {
		Collection<CandidatePerdiemDetails> resultList = new ArrayList<CandidatePerdiemDetails>();
		while (rs.next()) {
			CandidatePerdiemDetails dto = new CandidatePerdiemDetails();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		CandidatePerdiemDetails ret[] = new CandidatePerdiemDetails[resultList
				.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CandidatePerdiemDetails dto, ResultSet rs)
			throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setCandidateId(rs.getInt(COLUMN_CANDIDATE_ID));
		dto.setLocation(rs.getString(COLUMN_LOCATION));
		dto.setPerdiem(rs.getString(COLUMN_PERDIEM));
		dto.setUserId(rs.getString(COLUMN_USER_ID));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CandidatePerdiemDetails dto) {
	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * specified arbitrary SQL statement
	 */
	public CandidatePerdiemDetails[] findByDynamicSelect(String sql,
			Object[] sqlParams) throws CandidatePerdiemDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * specified arbitrary SQL statement
	 */
	public CandidatePerdiemDetails[] findByDynamicWhere(String sql,
			Object[] sqlParams) throws CandidatePerdiemDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}
	
	
	public String getPerdiemDetails(int candidateId) throws CandidatePerdiemDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = "SELECT LOCATION,PERDIEM FROM CANDIDATE_PERDIEM_DETAILS WHERE CANDIDATE_ID=?";

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			stmt.setObject(1, candidateId);
			

			rs = stmt.executeQuery();

			// fetch the results
			String result = new String();
			while(rs.next()){
				result = result + rs.getString("LOCATION");
				result = result + "~=~";
				result = result + rs.getString("PERDIEM");
				result = result + "~;~";
			}
			return result;
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}
	
	public String getPerdiemDetailsByUserID(int userId) throws CandidatePerdiemDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = "SELECT LOCATION,PERDIEM FROM CANDIDATE_PERDIEM_DETAILS WHERE USER_ID=?";

			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			stmt.setObject(1, userId);
			

			rs = stmt.executeQuery();

			// fetch the results
			String result = new String();
			while(rs.next()){
				result = result + rs.getString("LOCATION");
				result = result + "~=~";
				result = result + rs.getString("PERDIEM");
				result = result + "~;~";
			}
			return result;
		} catch (Exception _e) {
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new CandidatePerdiemDetailsDaoException("Exception: "
					+ _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

}
