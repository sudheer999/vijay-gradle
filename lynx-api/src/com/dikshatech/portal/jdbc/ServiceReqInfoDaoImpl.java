/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.ServiceReqInfoDao;
import com.dikshatech.portal.dto.ServiceReqInfo;
import com.dikshatech.portal.dto.ServiceReqInfoPk;
import com.dikshatech.portal.exceptions.ServiceReqInfoDaoException;

public class ServiceReqInfoDaoImpl extends AbstractDAO implements ServiceReqInfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ServiceReqInfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, ASSIGNED_TO_DIV, STATUS, ACTION_BY, HD_EST_DATE_RESOLVE, HD_COMMENTS, ESCALATE_TO, H_REMARKS, CREATION_DATETIME, SUMMARY, DESCRIPTION, EST_DATE_RESOLVE, COMMENT, DEP_SERV_REQ, ASSIGNED_TO, SEVERITY, PRIORITY FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, ASSIGNED_TO_DIV, STATUS, ACTION_BY, HD_EST_DATE_RESOLVE, HD_COMMENTS, ESCALATE_TO, H_REMARKS, CREATION_DATETIME, SUMMARY, DESCRIPTION, EST_DATE_RESOLVE, COMMENT, DEP_SERV_REQ, ASSIGNED_TO, SEVERITY, PRIORITY ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, ASSIGNED_TO_DIV = ?, STATUS = ?, ACTION_BY = ?, HD_EST_DATE_RESOLVE = ?, HD_COMMENTS = ?, ESCALATE_TO = ?, H_REMARKS = ?, CREATION_DATETIME = ?, SUMMARY = ?, DESCRIPTION = ?, EST_DATE_RESOLVE = ?, COMMENT = ?, DEP_SERV_REQ = ?, ASSIGNED_TO = ?, SEVERITY = ?, PRIORITY = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column ASSIGNED_TO_DIV
	 */
	protected static final int COLUMN_ASSIGNED_TO_DIV = 3;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 4;

	/** 
	 * Index of column ACTION_BY
	 */
	protected static final int COLUMN_ACTION_BY = 5;

	/** 
	 * Index of column HD_EST_DATE_RESOLVE
	 */
	protected static final int COLUMN_HD_EST_DATE_RESOLVE = 6;

	/** 
	 * Index of column HD_COMMENTS
	 */
	protected static final int COLUMN_HD_COMMENTS = 7;

	/** 
	 * Index of column ESCALATE_TO
	 */
	protected static final int COLUMN_ESCALATE_TO = 8;

	/** 
	 * Index of column H_REMARKS
	 */
	protected static final int COLUMN_H_REMARKS = 9;

	/** 
	 * Index of column CREATION_DATETIME
	 */
	protected static final int COLUMN_CREATION_DATETIME = 10;

	/** 
	 * Index of column SUMMARY
	 */
	protected static final int COLUMN_SUMMARY = 11;

	/** 
	 * Index of column DESCRIPTION
	 */
	protected static final int COLUMN_DESCRIPTION = 12;

	/** 
	 * Index of column EST_DATE_RESOLVE
	 */
	protected static final int COLUMN_EST_DATE_RESOLVE = 13;

	/** 
	 * Index of column COMMENT
	 */
	protected static final int COLUMN_COMMENT = 14;

	/** 
	 * Index of column DEP_SERV_REQ
	 */
	protected static final int COLUMN_DEP_SERV_REQ = 15;

	/** 
	 * Index of column ASSIGNED_TO
	 */
	protected static final int COLUMN_ASSIGNED_TO = 16;

	/** 
	 * Index of column SEVERITY
	 */
	protected static final int COLUMN_SEVERITY = 17;

	/** 
	 * Index of column PRIORITY
	 */
	protected static final int COLUMN_PRIORITY = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the SERVICE_REQ_INFO table.
	 */
	public ServiceReqInfoPk insert(ServiceReqInfo dto) throws ServiceReqInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isAssignedToDivNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignedToDiv() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isActionByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionBy() );
			}
		
			stmt.setDate(index++, dto.getHdEstDateResolve()==null ? null : new java.sql.Date( dto.getHdEstDateResolve().getTime() ) );
			stmt.setString( index++, dto.getHdComments() );
			if (dto.isEscalateToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEscalateTo() );
			}
		
			stmt.setString( index++, dto.getHRemarks() );
			stmt.setTimestamp(index++, dto.getCreationDatetime()==null ? null : new java.sql.Timestamp( dto.getCreationDatetime().getTime() ) );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setDate(index++, dto.getEstDateResolve()==null ? null : new java.sql.Date( dto.getEstDateResolve().getTime() ) );
			stmt.setString( index++, dto.getComment() );
			if (dto.isDepServReqNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDepServReq() );
			}
		
			if (dto.isAssignedToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignedTo() );
			}
		
			stmt.setString( index++, dto.getSeverity() );
			stmt.setString( index++, dto.getPriority() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ServiceReqInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SERVICE_REQ_INFO table.
	 */
	public void update(ServiceReqInfoPk pk, ServiceReqInfo dto) throws ServiceReqInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isAssignedToDivNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignedToDiv() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isActionByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionBy() );
			}
		
			stmt.setDate(index++, dto.getHdEstDateResolve()==null ? null : new java.sql.Date( dto.getHdEstDateResolve().getTime() ) );
			stmt.setString( index++, dto.getHdComments() );
			if (dto.isEscalateToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEscalateTo() );
			}
		
			stmt.setString( index++, dto.getHRemarks() );
			stmt.setTimestamp(index++, dto.getCreationDatetime()==null ? null : new java.sql.Timestamp( dto.getCreationDatetime().getTime() ) );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setDate(index++, dto.getEstDateResolve()==null ? null : new java.sql.Date( dto.getEstDateResolve().getTime() ) );
			stmt.setString( index++, dto.getComment() );
			if (dto.isDepServReqNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getDepServReq() );
			}
		
			if (dto.isAssignedToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignedTo() );
			}
		
			stmt.setString( index++, dto.getSeverity() );
			stmt.setString( index++, dto.getPriority() );
			stmt.setInt( 19, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ServiceReqInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SERVICE_REQ_INFO table.
	 */
	public void delete(ServiceReqInfoPk pk) throws ServiceReqInfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ServiceReqInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SERVICE_REQ_INFO table that matches the specified primary-key value.
	 */
	public ServiceReqInfo findByPrimaryKey(ServiceReqInfoPk pk) throws ServiceReqInfoDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ID = :id'.
	 */
	public ServiceReqInfo findByPrimaryKey(int id) throws ServiceReqInfoDaoException
	{
		ServiceReqInfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria ''.
	 */
	public ServiceReqInfo[] findAll() throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ID = :id'.
	 */
	public ServiceReqInfo[] findWhereIdEquals(int id) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ServiceReqInfo[] findWhereEsrMapIdEquals(int esrMapId) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ASSIGNED_TO_DIV = :assignedToDiv'.
	 */
	public ServiceReqInfo[] findWhereAssignedToDivEquals(int assignedToDiv) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASSIGNED_TO_DIV = ? ORDER BY ASSIGNED_TO_DIV", new Object[] {  new Integer(assignedToDiv) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'STATUS = :status'.
	 */
	public ServiceReqInfo[] findWhereStatusEquals(String status) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public ServiceReqInfo[] findWhereActionByEquals(int actionBy) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_BY = ? ORDER BY ACTION_BY", new Object[] {  new Integer(actionBy) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'HD_EST_DATE_RESOLVE = :hdEstDateResolve'.
	 */
	public ServiceReqInfo[] findWhereHdEstDateResolveEquals(Date hdEstDateResolve) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HD_EST_DATE_RESOLVE = ? ORDER BY HD_EST_DATE_RESOLVE", new Object[] { hdEstDateResolve==null ? null : new java.sql.Date( hdEstDateResolve.getTime() ) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'HD_COMMENTS = :hdComments'.
	 */
	public ServiceReqInfo[] findWhereHdCommentsEquals(String hdComments) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HD_COMMENTS = ? ORDER BY HD_COMMENTS", new Object[] { hdComments } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ESCALATE_TO = :escalateTo'.
	 */
	public ServiceReqInfo[] findWhereEscalateToEquals(int escalateTo) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESCALATE_TO = ? ORDER BY ESCALATE_TO", new Object[] {  new Integer(escalateTo) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'H_REMARKS = :hRemarks'.
	 */
	public ServiceReqInfo[] findWhereHRemarksEquals(String hRemarks) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE H_REMARKS = ? ORDER BY H_REMARKS", new Object[] { hRemarks } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'CREATION_DATETIME = :creationDatetime'.
	 */
	public ServiceReqInfo[] findWhereCreationDatetimeEquals(Date creationDatetime) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATION_DATETIME = ? ORDER BY CREATION_DATETIME", new Object[] { creationDatetime==null ? null : new java.sql.Timestamp( creationDatetime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'SUMMARY = :summary'.
	 */
	public ServiceReqInfo[] findWhereSummaryEquals(String summary) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMMARY = ? ORDER BY SUMMARY", new Object[] { summary } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'DESCRIPTION = :description'.
	 */
	public ServiceReqInfo[] findWhereDescriptionEquals(String description) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'EST_DATE_RESOLVE = :estDateResolve'.
	 */
	public ServiceReqInfo[] findWhereEstDateResolveEquals(Date estDateResolve) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EST_DATE_RESOLVE = ? ORDER BY EST_DATE_RESOLVE", new Object[] { estDateResolve==null ? null : new java.sql.Date( estDateResolve.getTime() ) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'COMMENT = :comment'.
	 */
	public ServiceReqInfo[] findWhereCommentEquals(String comment) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENT = ? ORDER BY COMMENT", new Object[] { comment } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'DEP_SERV_REQ = :depServReq'.
	 */
	public ServiceReqInfo[] findWhereDepServReqEquals(int depServReq) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEP_SERV_REQ = ? ORDER BY DEP_SERV_REQ", new Object[] {  new Integer(depServReq) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public ServiceReqInfo[] findWhereAssignedToEquals(int assignedTo) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASSIGNED_TO = ? ORDER BY ASSIGNED_TO", new Object[] {  new Integer(assignedTo) } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'SEVERITY = :severity'.
	 */
	public ServiceReqInfo[] findWhereSeverityEquals(String severity) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEVERITY = ? ORDER BY SEVERITY", new Object[] { severity } );
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the criteria 'PRIORITY = :priority'.
	 */
	public ServiceReqInfo[] findWherePriorityEquals(String priority) throws ServiceReqInfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIORITY = ? ORDER BY PRIORITY", new Object[] { priority } );
	}

	/**
	 * Method 'ServiceReqInfoDaoImpl'
	 * 
	 */
	public ServiceReqInfoDaoImpl()
	{
	}

	/**
	 * Method 'ServiceReqInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ServiceReqInfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SERVICE_REQ_INFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ServiceReqInfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ServiceReqInfo dto = new ServiceReqInfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ServiceReqInfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ServiceReqInfo> resultList = new ArrayList<ServiceReqInfo>();
		while (rs.next()) {
			ServiceReqInfo dto = new ServiceReqInfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ServiceReqInfo ret[] = new ServiceReqInfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ServiceReqInfo dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setAssignedToDiv( rs.getInt( COLUMN_ASSIGNED_TO_DIV ) );
		if (rs.wasNull()) {
			dto.setAssignedToDivNull( true );
		}
		
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setActionBy( rs.getInt( COLUMN_ACTION_BY ) );
		if (rs.wasNull()) {
			dto.setActionByNull( true );
		}
		
		dto.setHdEstDateResolve( rs.getDate(COLUMN_HD_EST_DATE_RESOLVE ) );
		dto.setHdComments( rs.getString( COLUMN_HD_COMMENTS ) );
		dto.setEscalateTo( rs.getInt( COLUMN_ESCALATE_TO ) );
		if (rs.wasNull()) {
			dto.setEscalateToNull( true );
		}
		
		dto.setHRemarks( rs.getString( COLUMN_H_REMARKS ) );
		dto.setCreationDatetime( rs.getTimestamp(COLUMN_CREATION_DATETIME ) );
		dto.setSummary( rs.getString( COLUMN_SUMMARY ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setEstDateResolve( rs.getDate(COLUMN_EST_DATE_RESOLVE ) );
		dto.setComment( rs.getString( COLUMN_COMMENT ) );
		dto.setDepServReq( rs.getInt( COLUMN_DEP_SERV_REQ ) );
		if (rs.wasNull()) {
			dto.setDepServReqNull( true );
		}
		
		dto.setAssignedTo( rs.getInt( COLUMN_ASSIGNED_TO ) );
		if (rs.wasNull()) {
			dto.setAssignedToNull( true );
		}
		
		dto.setSeverity( rs.getString( COLUMN_SEVERITY ) );
		dto.setPriority( rs.getString( COLUMN_PRIORITY ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ServiceReqInfo dto)
	{
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the specified arbitrary SQL statement
	 */
	public ServiceReqInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ServiceReqInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ServiceReqInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SERVICE_REQ_INFO table that match the specified arbitrary SQL statement
	 */
	public ServiceReqInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ServiceReqInfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ServiceReqInfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
