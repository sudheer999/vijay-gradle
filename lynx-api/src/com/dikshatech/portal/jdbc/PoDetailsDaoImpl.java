/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.PoDetailsDao;
import com.dikshatech.portal.dto.PoDetail;
import com.dikshatech.portal.dto.PoDetails;
import com.dikshatech.portal.dto.PoDetailsPk;
import com.dikshatech.portal.exceptions.PoDetailsDaoException;

public class PoDetailsDaoImpl extends AbstractDAO implements PoDetailsDao
{
	protected static final Logger	logger				= Logger.getLogger(PoDetailsDaoImpl.class);
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, PROJ_ID, PO_NUMBER, PO_DATE, PO_ST_DATE, PO_END_DATE, PO_DURATION, PAYMENT_TERMS, IS_DISABLE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, PROJ_ID, PO_NUMBER, PO_DATE, PO_ST_DATE, PO_END_DATE, PO_DURATION, PAYMENT_TERMS, IS_DISABLE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, PROJ_ID = ?, PO_NUMBER = ?, PO_DATE = ?, PO_ST_DATE = ?, PO_END_DATE = ?, PO_DURATION = ?, PAYMENT_TERMS = ?, IS_DISABLE = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column PROJ_ID
	 */
	protected static final int COLUMN_PROJ_ID = 2;

	/** 
	 * Index of column PO_NUMBER
	 */
	protected static final int COLUMN_PO_NUMBER = 3;

	/** 
	 * Index of column PO_DATE
	 */
	protected static final int COLUMN_PO_DATE = 4;

	/** 
	 * Index of column PO_ST_DATE
	 */
	protected static final int COLUMN_PO_ST_DATE = 5;

	/** 
	 * Index of column PO_END_DATE
	 */
	protected static final int COLUMN_PO_END_DATE = 6;

	/** 
	 * Index of column PO_DURATION
	 */
	protected static final int COLUMN_PO_DURATION = 7;

	/** 
	 * Index of column PAYMENT_TERMS
	 */
	protected static final int COLUMN_PAYMENT_TERMS = 8;

	/** 
	 * Index of column IS_DISABLE
	 */
	protected static final int COLUMN_IS_DISABLE = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the PO_DETAILS table.
	 */
	public PoDetailsPk insert(PoDetails dto) throws PoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getProjId() );
			stmt.setString( index++, dto.getPoNumber() );
			stmt.setDate(index++, dto.getPoDate()==null ? null : new java.sql.Date( dto.getPoDate().getTime() ) );
			stmt.setDate(index++, dto.getPoStDate()==null ? null : new java.sql.Date( dto.getPoStDate().getTime() ) );
			stmt.setDate(index++, dto.getPoEndDate()==null ? null : new java.sql.Date( dto.getPoEndDate().getTime() ) );
			stmt.setString( index++, dto.getPoDuration() );
			stmt.setString( index++, dto.getPaymentTerms() );
			if (dto.isIsDisableNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsDisable() );
			}
		
			logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public PoDetailsPk insert1(PoDetail dto) throws PoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getEmpPoId() );
			stmt.setInt( index++, dto.getEmpProjId() );
			stmt.setString( index++, dto.getEmpPoNumber() );
			stmt.setDate(index++, dto.getEmpPoDate()==null ? null : new java.sql.Date( dto.getEmpPoDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoStDate()==null ? null : new java.sql.Date( dto.getEmpPoDate().getTime() ) );
			stmt.setDate(index++, dto.getEmpPoEndDate()==null ? null : new java.sql.Date( dto.getEmpPoEndDate().getTime() ) );
			stmt.setString( index++, dto.getEmpPoDuration() );
			stmt.setString( index++, dto.getEmpPaymentTerms());
			if (dto.isDisableNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsDisable() );
			}
		
			logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setEmpPoId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the PO_DETAILS table.
	 */
	public void update(PoDetailsPk pk, PoDetails dto) throws PoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getProjId() );
			stmt.setString( index++, dto.getPoNumber() );
			stmt.setDate(index++, dto.getPoDate()==null ? null : new java.sql.Date( dto.getPoDate().getTime() ) );
			stmt.setDate(index++, dto.getPoStDate()==null ? null : new java.sql.Date( dto.getPoStDate().getTime() ) );
			stmt.setDate(index++, dto.getPoEndDate()==null ? null : new java.sql.Date( dto.getPoEndDate().getTime() ) );
			stmt.setString( index++, dto.getPoDuration() );
			stmt.setString( index++, dto.getPaymentTerms() );
			if (dto.isIsDisableNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsDisable() );
			}
		
			stmt.setInt( 10, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the PO_DETAILS table.
	 */
	public void delete(PoDetailsPk pk) throws PoDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the PO_DETAILS table that matches the specified primary-key value.
	 */
	public PoDetails findByPrimaryKey(PoDetailsPk pk) throws PoDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public PoDetails findByPrimaryKey(int id) throws PoDetailsDaoException
	{
		PoDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria ''.
	 */
	public PoDetails[] findAll() throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public PoDetails[] findWhereIdEquals(int id) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public PoDetails[] findWhereProjIdEquals(int projId) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROJ_ID = ? ORDER BY PROJ_ID", new Object[] {  new Integer(projId) } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_NUMBER = :poNumber'.
	 */
	public PoDetails[] findWherePoNumberEquals(String poNumber) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_NUMBER = ? ORDER BY PO_NUMBER", new Object[] { poNumber } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_DATE = :poDate'.
	 */
	public PoDetails[] findWherePoDateEquals(Date poDate) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_DATE = ? ORDER BY PO_DATE", new Object[] { poDate==null ? null : new java.sql.Date( poDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_ST_DATE = :poStDate'.
	 */
	public PoDetails[] findWherePoStDateEquals(Date poStDate) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_ST_DATE = ? ORDER BY PO_ST_DATE", new Object[] { poStDate==null ? null : new java.sql.Date( poStDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_END_DATE = :poEndDate'.
	 */
	public PoDetails[] findWherePoEndDateEquals(Date poEndDate) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_END_DATE = ? ORDER BY PO_END_DATE", new Object[] { poEndDate==null ? null : new java.sql.Date( poEndDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_DURATION = :poDuration'.
	 */
	public PoDetails[] findWherePoDurationEquals(String poDuration) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PO_DURATION = ? ORDER BY PO_DURATION", new Object[] { poDuration } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PAYMENT_TERMS = :paymentTerms'.
	 */
	public PoDetails[] findWherePaymentTermsEquals(String paymentTerms) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYMENT_TERMS = ? ORDER BY PAYMENT_TERMS", new Object[] { paymentTerms } );
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'IS_DISABLE = :isDisable'.
	 */
	public PoDetails[] findWhereIsDisableEquals(short isDisable) throws PoDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_DISABLE = ? ORDER BY IS_DISABLE", new Object[] {  new Short(isDisable) } );
	}

	/**
	 * Method 'PoDetailsDaoImpl'
	 * 
	 */
	public PoDetailsDaoImpl()
	{
	}

	/**
	 * Method 'PoDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public PoDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "PO_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PoDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PoDetails dto = new PoDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PoDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<PoDetails> resultList = new ArrayList<PoDetails>();
		while (rs.next()) {
			PoDetails dto = new PoDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PoDetails ret[] = new PoDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PoDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setProjId( rs.getInt( COLUMN_PROJ_ID ) );
		dto.setPoNumber( rs.getString( COLUMN_PO_NUMBER ) );
		dto.setPoDate( rs.getDate(COLUMN_PO_DATE ) );
		dto.setPoStDate( rs.getDate(COLUMN_PO_ST_DATE ) );
		dto.setPoEndDate( rs.getDate(COLUMN_PO_END_DATE ) );
		dto.setPoDuration( rs.getString( COLUMN_PO_DURATION ) );
		dto.setPaymentTerms( rs.getString( COLUMN_PAYMENT_TERMS ) );
		dto.setIsDisable( rs.getShort( COLUMN_IS_DISABLE ) );
		if (rs.wasNull()) {
			dto.setIsDisableNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PoDetails dto)
	{
	}
	
	protected void reset(PoDetail dto)
	{
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PoDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws PoDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the PO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PoDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws PoDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	@Override
	public int updatePoDetailsForProjectDisable(int projectId) throws PoDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		int noOfRowsUpddated = 0;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "UPDATE PO_DETAILS SET IS_DISABLE=1 WHERE PROJ_ID="+projectId;
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );		
			noOfRowsUpddated = stmt.executeUpdate();
			return noOfRowsUpddated;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	
	@Override
	public int updatePoDetailsForProjectEnable(int projectId) throws PoDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		int noOfRowsUpddated = 0;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "UPDATE PO_DETAILS SET IS_DISABLE=0 WHERE PROJ_ID="+projectId;
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );		
			noOfRowsUpddated = stmt.executeUpdate();
			return noOfRowsUpddated;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PoDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	

}
