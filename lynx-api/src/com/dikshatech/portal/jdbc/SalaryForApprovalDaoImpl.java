/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.SalaryDetailsDao;
import com.dikshatech.portal.dto.SalaryDetails;
import com.dikshatech.portal.dto.SalaryDetailsPk;
import com.dikshatech.portal.exceptions.SalaryDetailsDaoException;

public class SalaryForApprovalDaoImpl extends AbstractDAO implements SalaryDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( SalaryDetailsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, USER_ID, CANDIDATE_ID, FIELD_LABEL, MONTHLY, ANNUAL, SUM, FIELDTYPE, SAL_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, USER_ID, CANDIDATE_ID, FIELD_LABEL, MONTHLY, ANNUAL, SUM, FIELDTYPE, SAL_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, USER_ID = ?, CANDIDATE_ID = ?, FIELD_LABEL = ?, MONTHLY = ?, ANNUAL = ?, SUM = ?, FIELDTYPE = ?, SAL_ID = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 2;

	/** 
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 3;

	/** 
	 * Index of column FIELD_LABEL
	 */
	protected static final int COLUMN_FIELD_LABEL = 4;

	/** 
	 * Index of column MONTHLY
	 */
	protected static final int COLUMN_MONTHLY = 5;

	/** 
	 * Index of column ANNUAL
	 */
	protected static final int COLUMN_ANNUAL = 6;

	/** 
	 * Index of column SUM
	 */
	protected static final int COLUMN_SUM = 7;

	/** 
	 * Index of column FIELDTYPE
	 */
	protected static final int COLUMN_FIELDTYPE = 8;

	/** 
	 * Index of column SAL_ID
	 */
	protected static final int COLUMN_SAL_ID = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the SALARY_DETAILS table.
	 */
	public SalaryDetailsPk insert(SalaryDetails dto) throws SalaryDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			stmt.setString( index++, dto.getFieldLabel() );
			stmt.setString( index++, dto.getMonthly() );
			stmt.setString( index++, dto.getAnnual() );
			stmt.setString( index++, dto.getSum() );
			stmt.setString( index++, dto.getFieldtype() );
			if (dto.isSalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSalId() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SALARY_DETAILS table.
	 */
	public void update(SalaryDetailsPk pk, SalaryDetails dto) throws SalaryDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			stmt.setString( index++, dto.getFieldLabel() );
			stmt.setString( index++, dto.getMonthly() );
			stmt.setString( index++, dto.getAnnual() );
			stmt.setString( index++, dto.getSum() );
			stmt.setString( index++, dto.getFieldtype() );
			if (dto.isSalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSalId() );
			}
		
			stmt.setInt( 10, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SALARY_DETAILS table.
	 */
	public void delete(SalaryDetailsPk pk) throws SalaryDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SALARY_DETAILS table that matches the specified primary-key value.
	 */
	public SalaryDetails findByPrimaryKey(SalaryDetailsPk pk) throws SalaryDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SalaryDetails findByPrimaryKey(int id) throws SalaryDetailsDaoException
	{
		SalaryDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria ''.
	 */
	public SalaryDetails[] findAll() throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SalaryDetails[] findWhereIdEquals(int id) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'USER_ID = :userId'.
	 */
	public SalaryDetails[] findWhereUserIdEquals(int userId) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public SalaryDetails[] findWhereCandidateIdEquals(int candidateId) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID", new Object[] {  new Integer(candidateId) } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'FIELD_LABEL = :fieldLabel'.
	 */
	public SalaryDetails[] findWhereFieldLabelEquals(String fieldLabel) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FIELD_LABEL = ? ORDER BY FIELD_LABEL", new Object[] { fieldLabel } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'MONTHLY = :monthly'.
	 */
	public SalaryDetails[] findWhereMonthlyEquals(String monthly) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MONTHLY = ? ORDER BY MONTHLY", new Object[] { monthly } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ANNUAL = :annual'.
	 */
	public SalaryDetails[] findWhereAnnualEquals(String annual) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANNUAL = ? ORDER BY ANNUAL", new Object[] { annual } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'SUM = :sum'.
	 */
	public SalaryDetails[] findWhereSumEquals(String sum) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUM = ? ORDER BY SUM", new Object[] { sum } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'FIELDTYPE = :fieldtype'.
	 */
	public SalaryDetails[] findWhereFieldtypeEquals(String fieldtype) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FIELDTYPE = ? ORDER BY FIELDTYPE", new Object[] { fieldtype } );
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'SAL_ID = :salId'.
	 */
	public SalaryDetails[] findWhereSalIdEquals(int salId) throws SalaryDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SAL_ID = ? ORDER BY SAL_ID", new Object[] {  new Integer(salId) } );
	}

	/**
	 * Method 'SalaryDetailsDaoImpl'
	 * 
	 */
	public SalaryForApprovalDaoImpl()
	{
	}

	/**
	 * Method 'SalaryDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public SalaryForApprovalDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SALARY_FOR_APPROVAL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SalaryDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SalaryDetails dto = new SalaryDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SalaryDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<SalaryDetails> resultList = new ArrayList<SalaryDetails>();
		while (rs.next()) {
			SalaryDetails dto = new SalaryDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SalaryDetails ret[] = new SalaryDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SalaryDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
		if (rs.wasNull()) {
			dto.setUserIdNull( true );
		}
		
		dto.setCandidateId( rs.getInt( COLUMN_CANDIDATE_ID ) );
		if (rs.wasNull()) {
			dto.setCandidateIdNull( true );
		}
		
		dto.setFieldLabel( rs.getString( COLUMN_FIELD_LABEL ) );
		dto.setMonthly( rs.getString( COLUMN_MONTHLY ) );
		dto.setAnnual( rs.getString( COLUMN_ANNUAL ) );
		dto.setSum( rs.getString( COLUMN_SUM ) );
		dto.setFieldtype( rs.getString( COLUMN_FIELDTYPE ) );
		dto.setSalId( rs.getInt( COLUMN_SAL_ID ) );
		if (rs.wasNull()) {
			dto.setSalIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SalaryDetails dto)
	{
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SalaryDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SalaryDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	@Override
	public SalaryDetails[] findWhereUserIdEqualsCtc(int userId) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SalaryDetails[] findByDynamicSelectCtcAmt(String sql, Object[] sqlParams) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SalaryDetails[] findbyuserid(Integer userId) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SalaryDetails[] findByDynamicSelectBonus(String string, Object[] objects) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SalaryDetails[] findbyuser(Integer userId) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SalaryDetails[] findByDynamicWhereEsic(String string, Object[] objects) throws SalaryDetailsDaoException {
		// TODO Auto-generated method stub
		return null;
	}
}
