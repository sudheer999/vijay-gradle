/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.RequestedIssuesDao;
import com.dikshatech.portal.dto.RequestedIssues;
import com.dikshatech.portal.dto.RequestedIssuesPk;
import com.dikshatech.portal.exceptions.RequestedIssuesDaoException;

public class RequestedIssuesDaoImpl extends AbstractDAO implements RequestedIssuesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( RequestedIssuesDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, SUBMISSION_DATE, STATUS, SUMMARY, DESCRIPTION, AUTO_REQ_ID, DEPENDENT_ID, ESR_MAP_ID, COMMENT, ISSUE_ID, USER_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, SUBMISSION_DATE, STATUS, SUMMARY, DESCRIPTION, AUTO_REQ_ID, DEPENDENT_ID, ESR_MAP_ID, COMMENT, ISSUE_ID, USER_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, SUBMISSION_DATE = ?, STATUS = ?, SUMMARY = ?, DESCRIPTION = ?, AUTO_REQ_ID = ?, DEPENDENT_ID = ?, ESR_MAP_ID = ?, COMMENT = ?, ISSUE_ID = ?, USER_ID = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column SUBMISSION_DATE
	 */
	protected static final int COLUMN_SUBMISSION_DATE = 2;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 3;

	/** 
	 * Index of column SUMMARY
	 */
	protected static final int COLUMN_SUMMARY = 4;

	/** 
	 * Index of column DESCRIPTION
	 */
	protected static final int COLUMN_DESCRIPTION = 5;

	/** 
	 * Index of column AUTO_REQ_ID
	 */
	protected static final int COLUMN_AUTO_REQ_ID = 6;

	/** 
	 * Index of column DEPENDENT_ID
	 */
	protected static final int COLUMN_DEPENDENT_ID = 7;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 8;

	/** 
	 * Index of column COMMENT
	 */
	protected static final int COLUMN_COMMENT = 9;

	/** 
	 * Index of column ISSUE_ID
	 */
	protected static final int COLUMN_ISSUE_ID = 10;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the REQUESTED_ISSUES table.
	 */
	public RequestedIssuesPk insert(RequestedIssues dto) throws RequestedIssuesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setTimestamp(index++, dto.getSubmissionDate()==null ? null : new java.sql.Timestamp( dto.getSubmissionDate().getTime() ) );
			stmt.setString( index++, dto.getStatus() );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getAutoReqId() );
			stmt.setString( index++, dto.getDependentId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getComment() );
			if (dto.isIssueIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIssueId() );
			}
		
			stmt.setInt( index++, dto.getUserId() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RequestedIssuesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the REQUESTED_ISSUES table.
	 */
	public void update(RequestedIssuesPk pk, RequestedIssues dto) throws RequestedIssuesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setTimestamp(index++, dto.getSubmissionDate()==null ? null : new java.sql.Timestamp( dto.getSubmissionDate().getTime() ) );
			stmt.setString( index++, dto.getStatus() );
			stmt.setString( index++, dto.getSummary() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getAutoReqId() );
			stmt.setString( index++, dto.getDependentId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setString( index++, dto.getComment() );
			if (dto.isIssueIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIssueId() );
			}
		
			stmt.setInt( index++, dto.getUserId() );
			stmt.setInt( 12, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RequestedIssuesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the REQUESTED_ISSUES table.
	 */
	public void delete(RequestedIssuesPk pk) throws RequestedIssuesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RequestedIssuesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the REQUESTED_ISSUES table that matches the specified primary-key value.
	 */
	public RequestedIssues findByPrimaryKey(RequestedIssuesPk pk) throws RequestedIssuesDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ID = :id'.
	 */
	public RequestedIssues findByPrimaryKey(int id) throws RequestedIssuesDaoException
	{
		RequestedIssues ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria ''.
	 */
	public RequestedIssues[] findAll() throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ID = :id'.
	 */
	public RequestedIssues[] findWhereIdEquals(int id) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'SUBMISSION_DATE = :submissionDate'.
	 */
	public RequestedIssues[] findWhereSubmissionDateEquals(Date submissionDate) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBMISSION_DATE = ? ORDER BY SUBMISSION_DATE", new Object[] { submissionDate==null ? null : new java.sql.Timestamp( submissionDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'STATUS = :status'.
	 */
	public RequestedIssues[] findWhereStatusEquals(String status) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'SUMMARY = :summary'.
	 */
	public RequestedIssues[] findWhereSummaryEquals(String summary) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMMARY = ? ORDER BY SUMMARY", new Object[] { summary } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'DESCRIPTION = :description'.
	 */
	public RequestedIssues[] findWhereDescriptionEquals(String description) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'AUTO_REQ_ID = :autoReqId'.
	 */
	public RequestedIssues[] findWhereAutoReqIdEquals(String autoReqId) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AUTO_REQ_ID = ? ORDER BY AUTO_REQ_ID", new Object[] { autoReqId } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'DEPENDENT_ID = :dependentId'.
	 */
	public RequestedIssues[] findWhereDependentIdEquals(String dependentId) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEPENDENT_ID = ? ORDER BY DEPENDENT_ID", new Object[] { dependentId } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public RequestedIssues[] findWhereEsrMapIdEquals(int esrMapId) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'COMMENT = :comment'.
	 */
	public RequestedIssues[] findWhereCommentEquals(String comment) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENT = ? ORDER BY COMMENT", new Object[] { comment } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ISSUE_ID = :issueId'.
	 */
	public RequestedIssues[] findWhereIssueIdEquals(int issueId) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ISSUE_ID = ? ORDER BY ISSUE_ID", new Object[] {  new Integer(issueId) } );
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'USER_ID = :userId'.
	 */
	public RequestedIssues[] findWhereUserIdEquals(int userId) throws RequestedIssuesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/**
	 * Method 'RequestedIssuesDaoImpl'
	 * 
	 */
	public RequestedIssuesDaoImpl()
	{
	}

	/**
	 * Method 'RequestedIssuesDaoImpl'
	 * 
	 * @param userConn
	 */
	public RequestedIssuesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "REQUESTED_ISSUES";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RequestedIssues fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RequestedIssues dto = new RequestedIssues();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RequestedIssues[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<RequestedIssues> resultList = new ArrayList<RequestedIssues>();
		while (rs.next()) {
			RequestedIssues dto = new RequestedIssues();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RequestedIssues ret[] = new RequestedIssues[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RequestedIssues dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setSubmissionDate( rs.getTimestamp(COLUMN_SUBMISSION_DATE ) );
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setSummary( rs.getString( COLUMN_SUMMARY ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setAutoReqId( rs.getString( COLUMN_AUTO_REQ_ID ) );
		dto.setDependentId( rs.getString( COLUMN_DEPENDENT_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setComment( rs.getString( COLUMN_COMMENT ) );
		dto.setIssueId( rs.getInt( COLUMN_ISSUE_ID ) );
		if (rs.wasNull()) {
			dto.setIssueIdNull( true );
		}
		
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RequestedIssues dto)
	{
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the specified arbitrary SQL statement
	 */
	public RequestedIssues[] findByDynamicSelect(String sql, Object[] sqlParams) throws RequestedIssuesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RequestedIssuesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the specified arbitrary SQL statement
	 */
	public RequestedIssues[] findByDynamicWhere(String sql, Object[] sqlParams) throws RequestedIssuesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new RequestedIssuesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
