/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.TimeSheetDetailsDao;
import com.dikshatech.portal.dto.TimeSheetDetails;
import com.dikshatech.portal.dto.TimeSheetDetailsPk;
import com.dikshatech.portal.exceptions.TimeSheetDetailsDaoException;

public class TimeSheetDetailsDaoImpl extends AbstractDAO implements TimeSheetDetailsDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(TimeSheetDetailsDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, START_DATE, END_DATE, STATUS, SUBMISSION_DATE, USER_ID, COMP_OFF, IS_DELAYED FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, START_DATE, END_DATE, STATUS, SUBMISSION_DATE, USER_ID, COMP_OFF, IS_DELAYED ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, START_DATE = ?, END_DATE = ?, STATUS = ?, SUBMISSION_DATE = ?, USER_ID = ?, COMP_OFF = ?, IS_DELAYED = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column START_DATE
	 */
	protected static final int		COLUMN_START_DATE		= 2;
	/**
	 * Index of column END_DATE
	 */
	protected static final int		COLUMN_END_DATE			= 3;
	/**
	 * Index of column STATUS
	 */
	protected static final int		COLUMN_STATUS			= 4;
	/**
	 * Index of column SUBMISSION_DATE
	 */
	protected static final int		COLUMN_SUBMISSION_DATE	= 5;
	/**
	 * Index of column USER_ID
	 */
	protected static final int		COLUMN_USER_ID			= 6;
	/**
	 * Index of column COMP_OFF
	 */
	protected static final int		COLUMN_COMP_OFF			= 7;
	/**
	 * Index of column IS_DELAYED
	 */
	protected static final int		COLUMN_IS_DELAYED		= 8;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 8;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the TIME_SHEET_DETAILS table.
	 */
	public TimeSheetDetailsPk insert(TimeSheetDetails dto) throws TimeSheetDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setDate(index++, dto.getStartDate() == null ? null : new java.sql.Date(dto.getStartDate().getTime()));
			stmt.setDate(index++, dto.getEndDate() == null ? null : new java.sql.Date(dto.getEndDate().getTime()));
			stmt.setString(index++, dto.getStatus());
			stmt.setTimestamp(index++, dto.getSubmissionDate() == null ? null : new java.sql.Timestamp(dto.getSubmissionDate().getTime()));
			stmt.setInt(index++, dto.getUserId());
			stmt.setFloat(index++, dto.getComp_off());
			stmt.setShort(index++, dto.getIsDelayed());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new TimeSheetDetailsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the TIME_SHEET_DETAILS table.
	 */
	public void update(TimeSheetDetailsPk pk, TimeSheetDetails dto) throws TimeSheetDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setDate(index++, dto.getStartDate() == null ? null : new java.sql.Date(dto.getStartDate().getTime()));
			stmt.setDate(index++, dto.getEndDate() == null ? null : new java.sql.Date(dto.getEndDate().getTime()));
			stmt.setString(index++, dto.getStatus());
			stmt.setTimestamp(index++, dto.getSubmissionDate() == null ? null : new java.sql.Timestamp(dto.getSubmissionDate().getTime()));
			stmt.setInt(index++, dto.getUserId());
			stmt.setFloat(index++, dto.getComp_off());
			stmt.setShort(index++, dto.getIsDelayed());
			stmt.setInt(9, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new TimeSheetDetailsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the TIME_SHEET_DETAILS table.
	 */
	public void delete(TimeSheetDetailsPk pk) throws TimeSheetDetailsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new TimeSheetDetailsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the TIME_SHEET_DETAILS table that matches the specified primary-key value.
	 */
	public TimeSheetDetails findByPrimaryKey(TimeSheetDetailsPk pk) throws TimeSheetDetailsDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TimeSheetDetails findByPrimaryKey(int id) throws TimeSheetDetailsDaoException {
		TimeSheetDetails ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria ''.
	 */
	public TimeSheetDetails[] findAll() throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TimeSheetDetails[] findWhereIdEquals(int id) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'START_DATE = :startDate'.
	 */
	public TimeSheetDetails[] findWhereStartDateEquals(Date startDate) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE START_DATE = ? ORDER BY START_DATE", new Object[] { startDate == null ? null : new java.sql.Date(startDate.getTime()) });
	}

	public TimeSheetDetails[] findWhereStartDateEquals(Date startDate, int userId) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE START_DATE = ? AND USER_ID=? ORDER BY ID DESC", new Object[] { startDate == null ? null : new java.sql.Date(startDate.getTime()), userId });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'END_DATE = :endDate'.
	 */
	public TimeSheetDetails[] findWhereEndDateEquals(Date endDate) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE END_DATE = ? ORDER BY END_DATE", new Object[] { endDate == null ? null : new java.sql.Date(endDate.getTime()) });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'STATUS = :status'.
	 */
	public TimeSheetDetails[] findWhereStatusEquals(String status) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'SUBMISSION_DATE = :submissionDate'.
	 */
	public TimeSheetDetails[] findWhereSubmissionDateEquals(Date submissionDate) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SUBMISSION_DATE = ? ORDER BY SUBMISSION_DATE", new Object[] { submissionDate == null ? null : new java.sql.Timestamp(submissionDate.getTime()) });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'USER_ID = :userId'.
	 */
	public TimeSheetDetails[] findWhereUserIdEquals(int userId) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] { new Integer(userId) });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'COMP_OFF = :compOff'.
	 */
	public TimeSheetDetails[] findWhereCompOffEquals(float compOff) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMP_OFF = ? ORDER BY COMP_OFF", new Object[] { new Float(compOff) });
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'IS_DELAYED = :isDelayed'.
	 */
	public TimeSheetDetails[] findWhereIsDelayedEquals(short isDelayed) throws TimeSheetDetailsDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE IS_DELAYED = ? ORDER BY IS_DELAYED", new Object[] { new Short(isDelayed) });
	}

	/**
	 * Method 'TimeSheetDetailsDaoImpl'
	 */
	public TimeSheetDetailsDaoImpl() {}

	/**
	 * Method 'TimeSheetDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public TimeSheetDetailsDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "TIME_SHEET_DETAILS";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected TimeSheetDetails fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			TimeSheetDetails dto = new TimeSheetDetails();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected TimeSheetDetails[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<TimeSheetDetails> resultList = new ArrayList<TimeSheetDetails>();
		while (rs.next()){
			TimeSheetDetails dto = new TimeSheetDetails();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		TimeSheetDetails ret[] = new TimeSheetDetails[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TimeSheetDetails dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setStartDate(rs.getDate(COLUMN_START_DATE));
		dto.setEndDate(rs.getDate(COLUMN_END_DATE));
		dto.setStatus(rs.getString(COLUMN_STATUS));
		dto.setSubmissionDate(rs.getTimestamp(COLUMN_SUBMISSION_DATE));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
		dto.setComp_off(rs.getFloat(COLUMN_COMP_OFF));
		dto.setIsDelayed(rs.getShort(COLUMN_IS_DELAYED));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TimeSheetDetails dto) {}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TimeSheetDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws TimeSheetDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new TimeSheetDetailsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TimeSheetDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws TimeSheetDetailsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new TimeSheetDetailsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
