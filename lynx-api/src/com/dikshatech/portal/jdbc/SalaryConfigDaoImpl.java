/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.SalaryConfigDao;
import com.dikshatech.portal.dto.SalaryConfig;
import com.dikshatech.portal.dto.SalaryConfigPk;
import com.dikshatech.portal.exceptions.SalaryConfigDaoException;

public class SalaryConfigDaoImpl extends AbstractDAO implements SalaryConfigDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( SalaryConfigDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, HEAD, HEAD_ORDER, COMPONENT, VALUE, VALUE_TYPE, AUTO_CALC, COMPONENT_ORDER, FORMULA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, HEAD, HEAD_ORDER, COMPONENT, VALUE, VALUE_TYPE, AUTO_CALC, COMPONENT_ORDER, FORMULA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, HEAD = ?, HEAD_ORDER = ?, COMPONENT = ?, VALUE = ?, VALUE_TYPE = ?, AUTO_CALC = ?, COMPONENT_ORDER = ?, FORMULA = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column HEAD
	 */
	protected static final int COLUMN_HEAD = 2;

	/** 
	 * Index of column HEAD_ORDER
	 */
	protected static final int COLUMN_HEAD_ORDER = 3;

	/** 
	 * Index of column COMPONENT
	 */
	protected static final int COLUMN_COMPONENT = 4;

	/** 
	 * Index of column VALUE
	 */
	protected static final int COLUMN_VALUE = 5;

	/** 
	 * Index of column VALUE_TYPE
	 */
	protected static final int COLUMN_VALUE_TYPE = 6;

	/** 
	 * Index of column AUTO_CALC
	 */
	protected static final int COLUMN_AUTO_CALC = 7;

	/** 
	 * Index of column COMPONENT_ORDER
	 */
	protected static final int COLUMN_COMPONENT_ORDER = 8;

	/** 
	 * Index of column FORMULA
	 */
	protected static final int COLUMN_FORMULA = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the SALARY_CONFIG table.
	 */
	public SalaryConfigPk insert(SalaryConfig dto) throws SalaryConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getHead() );
			if (dto.isHeadOrderNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHeadOrder() );
			}
		
			stmt.setString( index++, dto.getComponent() );
			if (dto.isValueNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getValue() );
			}
		
			stmt.setString( index++, dto.getValueType() );
			if (dto.isAutoCalcNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getAutoCalc() );
			}
		
			if (dto.isComponentOrderNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getComponentOrder() );
			}
		
			if (dto.isFormulaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getFormula() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the SALARY_CONFIG table.
	 */
	public void update(SalaryConfigPk pk, SalaryConfig dto) throws SalaryConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setString( index++, dto.getHead() );
			if (dto.isHeadOrderNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getHeadOrder() );
			}
		
			stmt.setString( index++, dto.getComponent() );
			if (dto.isValueNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getValue() );
			}
		
			stmt.setString( index++, dto.getValueType() );
			if (dto.isAutoCalcNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getAutoCalc() );
			}
		
			if (dto.isComponentOrderNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getComponentOrder() );
			}
		
			if (dto.isFormulaNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getFormula() );
			}
		
			stmt.setInt( 10, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the SALARY_CONFIG table.
	 */
	public void delete(SalaryConfigPk pk) throws SalaryConfigDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the SALARY_CONFIG table that matches the specified primary-key value.
	 */
	public SalaryConfig findByPrimaryKey(SalaryConfigPk pk) throws SalaryConfigDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'ID = :id'.
	 */
	public SalaryConfig findByPrimaryKey(int id) throws SalaryConfigDaoException
	{
		SalaryConfig ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria ''.
	 */
	public SalaryConfig[] findAll() throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'ID = :id'.
	 */
	public SalaryConfig[] findWhereIdEquals(int id) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'HEAD = :head'.
	 */
	public SalaryConfig[] findWhereHeadEquals(String head) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEAD = ? ORDER BY HEAD", new Object[] { head } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'HEAD_ORDER = :headOrder'.
	 */
	public SalaryConfig[] findWhereHeadOrderEquals(int headOrder) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEAD_ORDER = ? ORDER BY HEAD_ORDER", new Object[] {  new Integer(headOrder) } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'COMPONENT = :component'.
	 */
	public SalaryConfig[] findWhereComponentEquals(String component) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPONENT = ? ORDER BY COMPONENT", new Object[] { component } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'VALUE = :value'.
	 */
	public SalaryConfig[] findWhereValueEquals(float value) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALUE = ? ORDER BY VALUE", new Object[] {  new Float(value) } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'VALUE_TYPE = :valueType'.
	 */
	public SalaryConfig[] findWhereValueTypeEquals(String valueType) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALUE_TYPE = ? ORDER BY VALUE_TYPE", new Object[] { valueType } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'AUTO_CALC = :autoCalc'.
	 */
	public SalaryConfig[] findWhereAutoCalcEquals(short autoCalc) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AUTO_CALC = ? ORDER BY AUTO_CALC", new Object[] {  new Short(autoCalc) } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'COMPONENT_ORDER = :componentOrder'.
	 */
	public SalaryConfig[] findWhereComponentOrderEquals(int componentOrder) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPONENT_ORDER = ? ORDER BY COMPONENT_ORDER", new Object[] {  new Integer(componentOrder) } );
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'FORMULA = :formula'.
	 */
	public SalaryConfig[] findWhereFormulaEquals(float formula) throws SalaryConfigDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FORMULA = ? ORDER BY FORMULA", new Object[] {  new Float(formula) } );
	}

	/**
	 * Method 'SalaryConfigDaoImpl'
	 * 
	 */
	public SalaryConfigDaoImpl()
	{
	}

	/**
	 * Method 'SalaryConfigDaoImpl'
	 * 
	 * @param userConn
	 */
	public SalaryConfigDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "SALARY_CONFIG";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SalaryConfig fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SalaryConfig dto = new SalaryConfig();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SalaryConfig[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<SalaryConfig> resultList = new ArrayList<SalaryConfig>();
		while (rs.next()) {
			SalaryConfig dto = new SalaryConfig();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SalaryConfig ret[] = new SalaryConfig[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SalaryConfig dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setHead( rs.getString( COLUMN_HEAD ) );
		dto.setHeadOrder( rs.getInt( COLUMN_HEAD_ORDER ) );
		if (rs.wasNull()) {
			dto.setHeadOrderNull( true );
		}
		
		dto.setComponent( rs.getString( COLUMN_COMPONENT ) );
		dto.setValue( rs.getFloat( COLUMN_VALUE ) );
		if (rs.wasNull()) {
			dto.setValueNull( true );
		}
		
		dto.setValueType( rs.getString( COLUMN_VALUE_TYPE ) );
		dto.setAutoCalc( rs.getShort( COLUMN_AUTO_CALC ) );
		if (rs.wasNull()) {
			dto.setAutoCalcNull( true );
		}
		
		dto.setComponentOrder( rs.getInt( COLUMN_COMPONENT_ORDER ) );
		if (rs.wasNull()) {
			dto.setComponentOrderNull( true );
		}
		
		dto.setFormula( rs.getFloat( COLUMN_FORMULA ) );
		if (rs.wasNull()) {
			dto.setFormulaNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SalaryConfig dto)
	{
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the specified arbitrary SQL statement
	 */
	public SalaryConfig[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryConfigDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the specified arbitrary SQL statement
	 */
	public SalaryConfig[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryConfigDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new SalaryConfigDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
