/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.SalaryReconciliationReqDao;
import com.dikshatech.portal.dto.SalaryReconciliationReq;
import com.dikshatech.portal.dto.SalaryReconciliationReqPk;
import com.dikshatech.portal.exceptions.SalaryReconciliationReqDaoException;

public class SalaryReconciliationReqDaoImpl extends AbstractDAO implements SalaryReconciliationReqDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger				= Logger.getLogger(SalaryReconciliationReqDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT			= "SELECT ID, SR_ID, ASSIGNED_TO, LEVEL, COMMENTS, CREATED_ON, ACTION_BY, ESCALATED_FROM, ACTION_ON FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT			= "INSERT INTO " + getTableName() + " ( ID, SR_ID, ASSIGNED_TO, LEVEL, COMMENTS, CREATED_ON, ACTION_BY, ESCALATED_FROM, ACTION_ON ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE			= "UPDATE " + getTableName() + " SET ID = ?, SR_ID = ?, ASSIGNED_TO = ?, LEVEL = ?, COMMENTS = ?, CREATED_ON = ?,ACTION_BY = ?, ESCALATED_FROM = ?, ACTION_ON = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE			= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID			= 1;
	/**
	 * Index of column SR_ID
	 */
	protected static final int		COLUMN_SR_ID		= 2;
	/**
	 * Index of column ASSIGNED_TO
	 */
	protected static final int		COLUMN_ASSIGNED_TO	= 3;
	/**
	 * Index of column LEVEL
	 */
	protected static final int		COLUMN_LEVEL		= 4;
	/**
	 * Index of column COMMENTS
	 */
	protected static final int		COLUMN_COMMENTS		= 5;
	/**
	 * Index of column CREATED_ON
	 */
	protected static final int		COLUMN_CREATED_ON	= 6;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS	= 6;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID		= 1;

	/**
	 * Inserts a new row in the salary_reconciliation_req table.
	 */
	public SalaryReconciliationReqPk insert(SalaryReconciliationReq dto) throws SalaryReconciliationReqDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getSrId());
			stmt.setInt(index++, dto.getAssignedTo());
			stmt.setInt(index++, dto.getLevel());
			stmt.setString(index++, dto.getComments());
			stmt.setTimestamp(index++, dto.getCreatedOn() == null ? null : new java.sql.Timestamp(dto.getCreatedOn().getTime()));
			stmt.setInt(index++, dto.getActionBy());
			stmt.setString(index++, dto.getEscalatedFrom());
			stmt.setTimestamp(index++, dto.getActionOn() == null ? null : new java.sql.Timestamp(dto.getActionOn().getTime()));
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReqDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the salary_reconciliation_req table.
	 */
	public void update(SalaryReconciliationReqPk pk, SalaryReconciliationReq dto) throws SalaryReconciliationReqDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getSrId());
			stmt.setInt(index++, dto.getAssignedTo());
			stmt.setInt(index++, dto.getLevel());
			stmt.setString(index++, dto.getComments());
			stmt.setTimestamp(index++, dto.getCreatedOn() == null ? null : new java.sql.Timestamp(dto.getCreatedOn().getTime()));
			stmt.setInt(index++, dto.getActionBy());
			stmt.setString(index++, dto.getEscalatedFrom());
			stmt.setTimestamp(index++, dto.getActionOn() == null ? null : new java.sql.Timestamp(dto.getActionOn().getTime()));
			stmt.setInt(index++, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReqDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the salary_reconciliation_req table.
	 */
	public void delete(SalaryReconciliationReqPk pk) throws SalaryReconciliationReqDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReqDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the salary_reconciliation_req table that matches the specified primary-key value.
	 */
	public SalaryReconciliationReq findByPrimaryKey(SalaryReconciliationReqPk pk) throws SalaryReconciliationReqDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the criteria 'ID = :id'.
	 */
	public SalaryReconciliationReq findByPrimaryKey(int id) throws SalaryReconciliationReqDaoException {
		SalaryReconciliationReq ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the criteria ''.
	 */
	public SalaryReconciliationReq[] findAll() throws SalaryReconciliationReqDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the criteria 'SR_ID = :srId'.
	 */
	public SalaryReconciliationReq[] findWhereSrIdEquals(Integer srId) throws SalaryReconciliationReqDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SR_ID = ? ORDER BY SR_ID", new Object[] { srId });
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public SalaryReconciliationReq[] findWhereAssignedToEquals(Integer assignedTo) throws SalaryReconciliationReqDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ASSIGNED_TO = ? ORDER BY ASSIGNED_TO", new Object[] { assignedTo });
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the criteria 'LEVEL = :level'.
	 */
	public SalaryReconciliationReq[] findWhereLevelEquals(Integer level) throws SalaryReconciliationReqDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LEVEL = ? ORDER BY LEVEL", new Object[] { level });
	}

	/**
	 * Method 'SalaryReconciliationReqDaoImpl'
	 */
	public SalaryReconciliationReqDaoImpl() {}

	/**
	 * Method 'SalaryReconciliationReqDaoImpl'
	 * 
	 * @param userConn
	 */
	public SalaryReconciliationReqDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "SALARY_RECONCILIATION_REQ";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected SalaryReconciliationReq fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			SalaryReconciliationReq dto = new SalaryReconciliationReq();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected SalaryReconciliationReq[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<SalaryReconciliationReq> resultList = new ArrayList<SalaryReconciliationReq>();
		while (rs.next()){
			SalaryReconciliationReq dto = new SalaryReconciliationReq();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		SalaryReconciliationReq ret[] = new SalaryReconciliationReq[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SalaryReconciliationReq dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setSrId(rs.getInt(COLUMN_SR_ID));
		dto.setAssignedTo(rs.getInt(COLUMN_ASSIGNED_TO));
		dto.setLevel(rs.getInt(COLUMN_LEVEL));
		dto.setComments(rs.getString(COLUMN_COMMENTS));
		dto.setCreatedOn(rs.getTimestamp(COLUMN_CREATED_ON));
		dto.setActionBy(rs.getInt(7));
		dto.setEscalatedFrom(rs.getString(8));
		dto.setActionOn(rs.getTimestamp(9));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SalaryReconciliationReq dto) {}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the specified arbitrary SQL statement
	 */
	public SalaryReconciliationReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryReconciliationReqDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReqDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the salary_reconciliation_req table that match the specified arbitrary SQL statement
	 */
	public SalaryReconciliationReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryReconciliationReqDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReqDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
