/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.DivisonDao;
import com.dikshatech.portal.dto.Divison;
import com.dikshatech.portal.dto.DivisonPk;
import com.dikshatech.portal.exceptions.DivisonDaoException;

public class DivisonDaoImpl extends AbstractDAO implements DivisonDao
{
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger(DivisonDaoImpl.class);

	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String SQL_SELECT = "SELECT ID, NAME, PARENT_ID, REGION_ID FROM " + getTableName() + "";

	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/**
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, NAME, PARENT_ID, REGION_ID ) VALUES ( ?, ?, ?, ? )";

	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, NAME = ?, PARENT_ID = ?, REGION_ID = ? WHERE ID = ?";

	/**
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/**
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/**
	 * Index of column NAME
	 */
	protected static final int COLUMN_NAME = 2;

	/**
	 * Index of column PARENT_ID
	 */
	protected static final int COLUMN_PARENT_ID = 3;

	/**
	 * Index of column REGION_ID
	 */
	protected static final int COLUMN_REGION_ID = 4;

	/**
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/**
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/**
	 * Inserts a new row in the DIVISON table.
	 */
	public DivisonPk insert(Divison dto) throws DivisonDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setString(index++, dto.getName());
			stmt.setInt(index++, dto.getParentId());
			stmt.setInt(index++, dto.getRegionId());
			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}

			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled())
			{
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next())
			{
				dto.setId(rs.getInt(1));
			}

			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DivisonDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the DIVISON table.
	 */
	public void update(DivisonPk pk, Divison dto) throws DivisonDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}

			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setString(index++, dto.getName());
			stmt.setInt(index++, dto.getParentId());
			stmt.setInt(index++, dto.getRegionId());
			stmt.setInt(5, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled())
			{
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		}
		catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DivisonDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the DIVISON table.
	 */
	public void delete(DivisonPk pk) throws DivisonDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}

			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled())
			{
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

		}
		catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DivisonDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the DIVISON table that matches the specified
	 * primary-key value.
	 */
	public Divison findByPrimaryKey(DivisonPk pk) throws DivisonDaoException
	{
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'ID =
	 * :id'.
	 */
	public Divison findByPrimaryKey(int id) throws DivisonDaoException
	{
		Divison ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[]
		{ new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria ''.
	 */
	public Divison[] findAll() throws DivisonDaoException
	{
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'ID =
	 * :id'.
	 */
	public Divison[] findWhereIdEquals(int id) throws DivisonDaoException
	{
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[]
		{ new Integer(id) });
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'NAME =
	 * :name'.
	 */
	public Divison[] findWhereNameEquals(String name) throws DivisonDaoException
	{
		return findByDynamicSelect(SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[]
		{ name });
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria
	 * 'PARENT_ID = :parentId'.
	 */
	public Divison[] findWhereParentIdEquals(int parentId) throws DivisonDaoException
	{
		return findByDynamicSelect(SQL_SELECT + " WHERE PARENT_ID = ? ORDER BY PARENT_ID", new Object[]
		{ new Integer(parentId) });
	}

	/**
	 * Returns all rows from the DIVISON table that match the criteria
	 * 'REGION_ID = :regionId'.
	 */
	public Divison[] findWhereRegionIdEquals(int regionId) throws DivisonDaoException
	{
		return findByDynamicSelect(SQL_SELECT + " WHERE REGION_ID = ? ORDER BY REGION_ID", new Object[]
		{ new Integer(regionId) });
	}

	/**
	 * Method 'DivisonDaoImpl'
	 * 
	 */
	public DivisonDaoImpl()
	{
	}

	/**
	 * Method 'DivisonDaoImpl'
	 * 
	 * @param userConn
	 */
	public DivisonDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "DIVISON";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected Divison fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next())
		{
			Divison dto = new Divison();
			populateDto(dto, rs);
			return dto;
		}
		else
		{
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected Divison[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Divison> resultList = new ArrayList<Divison>();
		while (rs.next())
		{
			Divison dto = new Divison();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		Divison ret[] = new Divison[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Divison dto, ResultSet rs) throws SQLException
	{
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setName(rs.getString(COLUMN_NAME));
		dto.setParentId(rs.getInt(COLUMN_PARENT_ID));
		dto.setRegionId(rs.getInt(COLUMN_REGION_ID));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Divison dto)
	{
	}

	/**
	 * Returns all rows from the DIVISON table that match the specified
	 * arbitrary SQL statement
	 */
	public Divison[] findByDynamicSelect(String sql, Object[] sqlParams) throws DivisonDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;

			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++)
			{
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DivisonDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the DIVISON table that match the specified
	 * arbitrary SQL statement
	 */
	public Divison[] findByDynamicWhere(String sql, Object[] sqlParams) throws DivisonDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try
		{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;

			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++)
			{
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DivisonDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}

	}
}
