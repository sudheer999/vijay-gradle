/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LoanDetailsDaoImpl extends AbstractDAO implements LoanDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( LoanDetailsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, REQUESTER_ID, ELIGIBILITY_AMOUNT, EMI_PERIOD, EMI_ELIGIBILITY, GROSS_SALARY, NET_SALARY, APPROVED_AMOUNT, EMI_PAID, REMAINING_AMOUNT, PURPOSE, STATUS_ID, APPLY_DATE, CREATE_DATE_TIME, RESPONSE_DATE, LOAN_TYPE_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, REQUESTER_ID, ELIGIBILITY_AMOUNT, EMI_PERIOD, EMI_ELIGIBILITY, GROSS_SALARY, NET_SALARY, APPROVED_AMOUNT, EMI_PAID, REMAINING_AMOUNT, PURPOSE, STATUS_ID, APPLY_DATE, CREATE_DATE_TIME, RESPONSE_DATE, LOAN_TYPE_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, REQUESTER_ID = ?, ELIGIBILITY_AMOUNT = ?, EMI_PERIOD = ?, EMI_ELIGIBILITY = ?, GROSS_SALARY = ?, NET_SALARY = ?, APPROVED_AMOUNT = ?, EMI_PAID = ?, REMAINING_AMOUNT = ?, PURPOSE = ?, STATUS_ID = ?, APPLY_DATE = ?, CREATE_DATE_TIME = ?, RESPONSE_DATE = ?, LOAN_TYPE_ID = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column REQUESTER_ID
	 */
	protected static final int COLUMN_REQUESTER_ID = 2;

	/** 
	 * Index of column ELIGIBILITY_AMOUNT
	 */
	protected static final int COLUMN_ELIGIBILITY_AMOUNT = 3;

	/** 
	 * Index of column EMI_PERIOD
	 */
	protected static final int COLUMN_EMI_PERIOD = 4;

	/** 
	 * Index of column EMI_ELIGIBILITY
	 */
	protected static final int COLUMN_EMI_ELIGIBILITY = 5;

	/** 
	 * Index of column GROSS_SALARY
	 */
	protected static final int COLUMN_GROSS_SALARY = 6;

	/** 
	 * Index of column NET_SALARY
	 */
	protected static final int COLUMN_NET_SALARY = 7;

	/** 
	 * Index of column APPROVED_AMOUNT
	 */
	protected static final int COLUMN_APPROVED_AMOUNT = 8;

	/** 
	 * Index of column EMI_PAID
	 */
	protected static final int COLUMN_EMI_PAID = 9;

	/** 
	 * Index of column REMAINING_AMOUNT
	 */
	protected static final int COLUMN_REMAINING_AMOUNT = 10;

	/** 
	 * Index of column PURPOSE
	 */
	protected static final int COLUMN_PURPOSE = 11;

	/** 
	 * Index of column STATUS_ID
	 */
	protected static final int COLUMN_STATUS_ID = 12;

	/** 
	 * Index of column APPLY_DATE
	 */
	protected static final int COLUMN_APPLY_DATE = 13;

	/** 
	 * Index of column CREATE_DATE_TIME
	 */
	protected static final int COLUMN_CREATE_DATE_TIME = 14;

	/** 
	 * Index of column RESPONSE_DATE
	 */
	protected static final int COLUMN_RESPONSE_DATE = 15;

	/** 
	 * Index of column LOAN_TYPE_ID
	 */
	protected static final int COLUMN_LOAN_TYPE_ID = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the LOAN_DETAILS table.
	 */
	public LoanDetailsPk insert(LoanDetails dto) throws LoanDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isEligibilityAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getEligibilityAmount() );
			}
		
			if (dto.isEmiPeriodNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPeriod() );
			}
		
			if (dto.isEmiEligibilityNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiEligibility() );
			}
		
			if (dto.isGrossSalaryNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getGrossSalary() );
			}
		
			if (dto.isNetSalaryNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getNetSalary() );
			}
		
			if (dto.isApprovedAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getApprovedAmount() );
			}
		
			if (dto.isEmiPaidNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPaid() );
			}
		
			if (dto.isRemainingAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getRemainingAmount() );
			}
		
			stmt.setString( index++, dto.getPurpose() );
			if (dto.isStatusIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatusId() );
			}
		
			stmt.setTimestamp(index++, dto.getApplyDate()==null ? null : new java.sql.Timestamp( dto.getApplyDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getCreateDateTime()==null ? null : new java.sql.Timestamp( dto.getCreateDateTime().getTime() ) );
			stmt.setTimestamp(index++, dto.getResponseDate()==null ? null : new java.sql.Timestamp( dto.getResponseDate().getTime() ) );
			if (dto.isLoanTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanTypeId() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the LOAN_DETAILS table.
	 */
	public void update(LoanDetailsPk pk, LoanDetails dto) throws LoanDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isEligibilityAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getEligibilityAmount() );
			}
		
			if (dto.isEmiPeriodNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPeriod() );
			}
		
			if (dto.isEmiEligibilityNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiEligibility() );
			}
		
			if (dto.isGrossSalaryNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getGrossSalary() );
			}
		
			if (dto.isNetSalaryNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getNetSalary() );
			}
		
			if (dto.isApprovedAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getApprovedAmount() );
			}
		
			if (dto.isEmiPaidNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPaid() );
			}
		
			if (dto.isRemainingAmountNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getRemainingAmount() );
			}
		
			stmt.setString( index++, dto.getPurpose() );
			if (dto.isStatusIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatusId() );
			}
		
			stmt.setTimestamp(index++, dto.getApplyDate()==null ? null : new java.sql.Timestamp( dto.getApplyDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getCreateDateTime()==null ? null : new java.sql.Timestamp( dto.getCreateDateTime().getTime() ) );
			stmt.setTimestamp(index++, dto.getResponseDate()==null ? null : new java.sql.Timestamp( dto.getResponseDate().getTime() ) );
			if (dto.isLoanTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanTypeId() );
			}
		
			stmt.setInt( 17, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the LOAN_DETAILS table.
	 */
	public void delete(LoanDetailsPk pk) throws LoanDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the LOAN_DETAILS table that matches the specified primary-key value.
	 */
	public LoanDetails findByPrimaryKey(LoanDetailsPk pk) throws LoanDetailsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ID = :id'.
	 */
	public LoanDetails findByPrimaryKey(int id) throws LoanDetailsDaoException
	{
		LoanDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria ''.
	 */
	public LoanDetails[] findAll() throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ID = :id'.
	 */
	public LoanDetails[] findWhereIdEquals(int id) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public LoanDetails[] findWhereRequesterIdEquals(int requesterId) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTER_ID = ? ORDER BY REQUESTER_ID", new Object[] {  new Integer(requesterId) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ELIGIBILITY_AMOUNT = :eligibilityAmount'.
	 */
	public LoanDetails[] findWhereEligibilityAmountEquals(double eligibilityAmount) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ELIGIBILITY_AMOUNT = ? ORDER BY ELIGIBILITY_AMOUNT", new Object[] {  new Double(eligibilityAmount) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_PERIOD = :emiPeriod'.
	 */
	public LoanDetails[] findWhereEmiPeriodEquals(int emiPeriod) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMI_PERIOD = ? ORDER BY EMI_PERIOD", new Object[] {  new Integer(emiPeriod) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_ELIGIBILITY = :emiEligibility'.
	 */
	public LoanDetails[] findWhereEmiEligibilityEquals(int emiEligibility) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMI_ELIGIBILITY = ? ORDER BY EMI_ELIGIBILITY", new Object[] {  new Integer(emiEligibility) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'GROSS_SALARY = :grossSalary'.
	 */
	public LoanDetails[] findWhereGrossSalaryEquals(double grossSalary) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GROSS_SALARY = ? ORDER BY GROSS_SALARY", new Object[] {  new Double(grossSalary) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'NET_SALARY = :netSalary'.
	 */
	public LoanDetails[] findWhereNetSalaryEquals(double netSalary) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NET_SALARY = ? ORDER BY NET_SALARY", new Object[] {  new Double(netSalary) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'APPROVED_AMOUNT = :approvedAmount'.
	 */
	public LoanDetails[] findWhereApprovedAmountEquals(double approvedAmount) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPROVED_AMOUNT = ? ORDER BY APPROVED_AMOUNT", new Object[] {  new Double(approvedAmount) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_PAID = :emiPaid'.
	 */
	public LoanDetails[] findWhereEmiPaidEquals(int emiPaid) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMI_PAID = ? ORDER BY EMI_PAID", new Object[] {  new Integer(emiPaid) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'REMAINING_AMOUNT = :remainingAmount'.
	 */
	public LoanDetails[] findWhereRemainingAmountEquals(double remainingAmount) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMAINING_AMOUNT = ? ORDER BY REMAINING_AMOUNT", new Object[] {  new Double(remainingAmount) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'PURPOSE = :purpose'.
	 */
	public LoanDetails[] findWherePurposeEquals(String purpose) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PURPOSE = ? ORDER BY PURPOSE", new Object[] { purpose } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'STATUS_ID = :statusId'.
	 */
	public LoanDetails[] findWhereStatusIdEquals(int statusId) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS_ID = ? ORDER BY STATUS_ID", new Object[] {  new Integer(statusId) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'APPLY_DATE = :applyDate'.
	 */
	public LoanDetails[] findWhereApplyDateEquals(Date applyDate) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPLY_DATE = ? ORDER BY APPLY_DATE", new Object[] { applyDate==null ? null : new java.sql.Timestamp( applyDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'CREATE_DATE_TIME = :createDateTime'.
	 */
	public LoanDetails[] findWhereCreateDateTimeEquals(Date createDateTime) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE_TIME = ? ORDER BY CREATE_DATE_TIME", new Object[] { createDateTime==null ? null : new java.sql.Timestamp( createDateTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'RESPONSE_DATE = :responseDate'.
	 */
	public LoanDetails[] findWhereResponseDateEquals(Date responseDate) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESPONSE_DATE = ? ORDER BY RESPONSE_DATE", new Object[] { responseDate==null ? null : new java.sql.Timestamp( responseDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'LOAN_TYPE_ID = :loanTypeId'.
	 */
	public LoanDetails[] findWhereLoanTypeIdEquals(int loanTypeId) throws LoanDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOAN_TYPE_ID = ? ORDER BY LOAN_TYPE_ID", new Object[] {  new Integer(loanTypeId) } );
	}

	/**
	 * Method 'LoanDetailsDaoImpl'
	 * 
	 */
	public LoanDetailsDaoImpl()
	{
	}

	/**
	 * Method 'LoanDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public LoanDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "LOAN_DETAILS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected LoanDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			LoanDetails dto = new LoanDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected LoanDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<LoanDetails> resultList = new ArrayList<LoanDetails>();
		while (rs.next()) {
			LoanDetails dto = new LoanDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		LoanDetails ret[] = new LoanDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LoanDetails dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setRequesterId( rs.getInt( COLUMN_REQUESTER_ID ) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setEligibilityAmount( rs.getDouble( COLUMN_ELIGIBILITY_AMOUNT ) );
		if (rs.wasNull()) {
			dto.setEligibilityAmountNull( true );
		}
		
		dto.setEmiPeriod( rs.getInt( COLUMN_EMI_PERIOD ) );
		if (rs.wasNull()) {
			dto.setEmiPeriodNull( true );
		}
		
		dto.setEmiEligibility( rs.getInt( COLUMN_EMI_ELIGIBILITY ) );
		if (rs.wasNull()) {
			dto.setEmiEligibilityNull( true );
		}
		
		dto.setGrossSalary( rs.getDouble( COLUMN_GROSS_SALARY ) );
		if (rs.wasNull()) {
			dto.setGrossSalaryNull( true );
		}
		
		dto.setNetSalary( rs.getDouble( COLUMN_NET_SALARY ) );
		if (rs.wasNull()) {
			dto.setNetSalaryNull( true );
		}
		
		dto.setApprovedAmount( rs.getDouble( COLUMN_APPROVED_AMOUNT ) );
		if (rs.wasNull()) {
			dto.setApprovedAmountNull( true );
		}
		
		dto.setEmiPaid( rs.getInt( COLUMN_EMI_PAID ) );
		if (rs.wasNull()) {
			dto.setEmiPaidNull( true );
		}
		
		dto.setRemainingAmount( rs.getDouble( COLUMN_REMAINING_AMOUNT ) );
		if (rs.wasNull()) {
			dto.setRemainingAmountNull( true );
		}
		
		dto.setPurpose( rs.getString( COLUMN_PURPOSE ) );
		dto.setStatusId( rs.getInt( COLUMN_STATUS_ID ) );
		if (rs.wasNull()) {
			dto.setStatusIdNull( true );
		}
		
		dto.setApplyDate( rs.getTimestamp(COLUMN_APPLY_DATE ) );
		dto.setCreateDateTime( rs.getTimestamp(COLUMN_CREATE_DATE_TIME ) );
		dto.setResponseDate( rs.getTimestamp(COLUMN_RESPONSE_DATE ) );
		dto.setLoanTypeId( rs.getInt( COLUMN_LOAN_TYPE_ID ) );
		if (rs.wasNull()) {
			dto.setLoanTypeIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LoanDetails dto)
	{
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the specified arbitrary SQL statement
	 */
	public LoanDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoanDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the specified arbitrary SQL statement
	 */
	public LoanDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoanDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
