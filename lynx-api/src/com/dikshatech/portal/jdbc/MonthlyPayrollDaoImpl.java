/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.beans.SalaryReportBean;
import com.dikshatech.portal.dao.MonthlyPayrollDao;
import com.dikshatech.portal.dto.MonthlyPayroll;
import com.dikshatech.portal.dto.MonthlyPayrollPk;
import com.dikshatech.portal.exceptions.MonthlyPayrollDaoException;

public class MonthlyPayrollDaoImpl extends AbstractDAO implements MonthlyPayrollDao {

	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
	takes no arguments and one that takes a Connection argument. If the Connection version
	is chosen then the connection will be stored in this attribute and will be used by all
	calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(MonthlyPayrollDaoImpl.class);
	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, USERID, COMPONENT, Amount, MONTHID, COMPONENT_TYPE FROM " + getTableName() + "";
	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, USERID, COMPONENT, Amount, MONTHID, COMPONENT_TYPE ) VALUES ( ?, ?, ?, ?, ?, ? )";
	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, USERID = ?, COMPONENT = ?, Amount = ?, MONTHID = ?, COMPONENT_TYPE = ? WHERE ID = ?";
	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/** 
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/** 
	 * Index of column USERID
	 */
	protected static final int		COLUMN_USERID			= 2;
	/** 
	 * Index of column COMPONENT
	 */
	protected static final int		COLUMN_COMPONENT		= 3;
	/** 
	 * Index of column Amount
	 */
	protected static final int		COLUMN_AMOUNT			= 4;
	/** 
	 * Index of column MONTHID
	 */
	protected static final int		COLUMN_MONTHID			= 5;
	/** 
	 * Index of column COMPONENT_TYPE
	 */
	protected static final int		COLUMN_COMPONENT_TYPE	= 6;
	/** 
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 6;
	/** 
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/** 
	 * Inserts a new row in the MONTHLY_PAYROLL table.
	 */
	public MonthlyPayrollPk insert(MonthlyPayroll dto) throws MonthlyPayrollDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isUseridNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserid());
			}
			stmt.setString(index++, dto.getComponent());
			stmt.setString(index++, dto.getAmount());
			stmt.setString(index++, dto.getMonthid());
			if (dto.isComponentTypeNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getComponentType());
			}
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new MonthlyPayrollDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Updates a single row in the MONTHLY_PAYROLL table.
	 */
	public void update(MonthlyPayrollPk pk, MonthlyPayroll dto) throws MonthlyPayrollDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isUseridNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserid());
			}
			stmt.setString(index++, dto.getComponent());
			stmt.setString(index++, dto.getAmount());
			stmt.setString(index++, dto.getMonthid());
			if (dto.isComponentTypeNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getComponentType());
			}
			stmt.setInt(7, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new MonthlyPayrollDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Deletes a single row in the MONTHLY_PAYROLL table.
	 */
	public void delete(MonthlyPayrollPk pk) throws MonthlyPayrollDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new MonthlyPayrollDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Returns the rows from the MONTHLY_PAYROLL table that matches the specified primary-key value.
	 */
	public MonthlyPayroll findByPrimaryKey(MonthlyPayrollPk pk) throws MonthlyPayrollDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'ID = :id'.
	 */
	public MonthlyPayroll findByPrimaryKey(int id) throws MonthlyPayrollDaoException {
		MonthlyPayroll ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria ''.
	 */
	public MonthlyPayroll[] findAll() throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'ID = :id'.
	 */
	public MonthlyPayroll[] findWhereIdEquals(int id) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'USERID = :userid'.
	 */
	public MonthlyPayroll[] findWhereUseridEquals(int userid) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE USERID = ? ORDER BY USERID", new Object[] { new Integer(userid) });
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'COMPONENT = :component'.
	 */
	public MonthlyPayroll[] findWhereComponentEquals(String component) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMPONENT = ? ORDER BY COMPONENT", new Object[] { component });
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'Amount = :amount'.
	 */
	public MonthlyPayroll[] findWhereAmountEquals(String amount) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE Amount = ? ORDER BY Amount", new Object[] { amount });
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'MONTHID = :monthid'.
	 */
	public MonthlyPayroll[] findWhereMonthidEquals(String monthid) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MONTHID = ? ORDER BY MONTHID", new Object[] { monthid });
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'COMPONENT_TYPE = :componentType'.
	 */
	public MonthlyPayroll[] findWhereComponentTypeEquals(int componentType) throws MonthlyPayrollDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMPONENT_TYPE = ? ORDER BY COMPONENT_TYPE", new Object[] { new Integer(componentType) });
	}

	/**
	 * Method 'MonthlyPayrollDaoImpl'
	 * 
	 */
	public MonthlyPayrollDaoImpl() {}

	/**
	 * Method 'MonthlyPayrollDaoImpl'
	 * 
	 * @param userConn
	 */
	public MonthlyPayrollDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "MONTHLY_PAYROLL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected MonthlyPayroll fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			MonthlyPayroll dto = new MonthlyPayroll();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected MonthlyPayroll[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<MonthlyPayroll> resultList = new ArrayList<MonthlyPayroll>();
		while (rs.next()){
			MonthlyPayroll dto = new MonthlyPayroll();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		MonthlyPayroll ret[] = new MonthlyPayroll[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(MonthlyPayroll dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setUserid(rs.getInt(COLUMN_USERID));
		if (rs.wasNull()){
			dto.setUseridNull(true);
		}
		dto.setComponent(rs.getString(COLUMN_COMPONENT));
		dto.setAmount(rs.getString(COLUMN_AMOUNT));
		dto.setMonthid(rs.getString(COLUMN_MONTHID));
		dto.setComponentType(rs.getInt(COLUMN_COMPONENT_TYPE));
		if (rs.wasNull()){
			dto.setComponentTypeNull(true);
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(MonthlyPayroll dto) {}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the specified arbitrary SQL statement
	 */
	public MonthlyPayroll[] findByDynamicSelect(String sql, Object[] sqlParams) throws MonthlyPayrollDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new MonthlyPayrollDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the specified arbitrary SQL statement
	 */
	public MonthlyPayroll[] findByDynamicWhere(String sql, Object[] sqlParams) throws MonthlyPayrollDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new MonthlyPayrollDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public String updateMonthlyPayroll(String amount, int userId, String monthId)
			throws MonthlyPayrollDaoException, SQLException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		PreparedStatement stmt = null;
		try{
			String sql="UPDATE MONTHLY_PAYROLL SET Amount =? WHERE USERID=? AND MONTHID = ? AND COMPONENT = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setObject(1, amount);
			stmt.setObject(2, userId);
			stmt.setObject(3, monthId);
			stmt.setObject(4, "TDS");
			
			int affectedrow=stmt.executeUpdate();
			logger.debug("Amount Updated in MONTHLY_PAYROLL ROW table AFFECTED"+affectedrow);
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		finally
		{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return "Updated TDS in MONTHLY_PAYROLL table";
		
	}
	
	protected MonthlyPayroll[] fetchMultiResultsTds(ResultSet rs) throws SQLException {
		Collection<MonthlyPayroll> resultList = new ArrayList<MonthlyPayroll>();
		while (rs.next()){
			MonthlyPayroll dto = new MonthlyPayroll();
			populateDtoTds(dto, rs);
			resultList.add(dto);
		}
		MonthlyPayroll ret[] = new MonthlyPayroll[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDtoTds(MonthlyPayroll dto, ResultSet rs) throws SQLException {
		dto.setAmount((rs.getString(COLUMN_AMOUNT)));
	}

	@Override
	public String salaryReport(String salDec, int userId, int srId) throws MonthlyPayrollDaoException, SQLException {
		// TODO Auto-generated method stub
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		PreparedStatement stmt = null;
		try{
			String sql="UPDATE SALARY_RECONCILIATION_REPORT SET SALARY =? WHERE USER_ID=? AND SR_ID = ?" ;
			stmt = conn.prepareStatement(sql);
			stmt.setObject(1, salDec);
			stmt.setObject(2, userId);
			stmt.setObject(3, srId);
			
			int affectedrow=stmt.executeUpdate();
			logger.debug("Salary Updated in SALARY_RECONCILIATION_REPORT ROW table AFFECTED"+affectedrow);
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		finally
		{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return "Updated Salary in SALARY_RECONCILIATION_REPORT table";
		
	}

	
	


		

}
