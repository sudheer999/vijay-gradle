/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.LoanRequestDao;
import com.dikshatech.portal.dto.LoanRequest;
import com.dikshatech.portal.dto.LoanRequestPk;
import com.dikshatech.portal.exceptions.LoanRequestDaoException;

public class LoanRequestDaoImpl extends AbstractDAO implements LoanRequestDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( LoanRequestDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, CREATED_DATETIME, REQUESTED_LOAN_AMT, EMI_PERIOD, STATUS_ID, ASSIGN_TO, LOAN_ID, LOAN_TYPE_ID, LOAN_USER_ID, EMAIL_DATA, ACTION_TAKEN_BY, ACTION_TAKEN_DATE, SEQUENCE, COMMENTS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, CREATED_DATETIME, REQUESTED_LOAN_AMT, EMI_PERIOD, STATUS_ID, ASSIGN_TO, LOAN_ID, LOAN_TYPE_ID, LOAN_USER_ID, EMAIL_DATA, ACTION_TAKEN_BY, ACTION_TAKEN_DATE, SEQUENCE, COMMENTS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, CREATED_DATETIME = ?, REQUESTED_LOAN_AMT = ?, EMI_PERIOD = ?, STATUS_ID = ?, ASSIGN_TO = ?, LOAN_ID = ?, LOAN_TYPE_ID = ?, LOAN_USER_ID = ?, EMAIL_DATA = ?, ACTION_TAKEN_BY = ?, ACTION_TAKEN_DATE = ?, SEQUENCE = ?, COMMENTS = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column CREATED_DATETIME
	 */
	protected static final int COLUMN_CREATED_DATETIME = 3;

	/** 
	 * Index of column REQUESTED_LOAN_AMT
	 */
	protected static final int COLUMN_REQUESTED_LOAN_AMT = 4;

	/** 
	 * Index of column EMI_PERIOD
	 */
	protected static final int COLUMN_EMI_PERIOD = 5;

	/** 
	 * Index of column STATUS_ID
	 */
	protected static final int COLUMN_STATUS_ID = 6;

	/** 
	 * Index of column ASSIGN_TO
	 */
	protected static final int COLUMN_ASSIGN_TO = 7;

	/** 
	 * Index of column LOAN_ID
	 */
	protected static final int COLUMN_LOAN_ID = 8;

	/** 
	 * Index of column LOAN_TYPE_ID
	 */
	protected static final int COLUMN_LOAN_TYPE_ID = 9;

	/** 
	 * Index of column LOAN_USER_ID
	 */
	protected static final int COLUMN_LOAN_USER_ID = 10;

	/** 
	 * Index of column EMAIL_DATA
	 */
	protected static final int COLUMN_EMAIL_DATA = 11;

	/** 
	 * Index of column ACTION_TAKEN_BY
	 */
	protected static final int COLUMN_ACTION_TAKEN_BY = 12;

	/** 
	 * Index of column ACTION_TAKEN_DATE
	 */
	protected static final int COLUMN_ACTION_TAKEN_DATE = 13;

	/** 
	 * Index of column SEQUENCE
	 */
	protected static final int COLUMN_SEQUENCE = 14;

	/** 
	 * Index of column COMMENTS
	 */
	protected static final int COLUMN_COMMENTS = 15;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 15;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the LOAN_REQUEST table.
	 */
	public LoanRequestPk insert(LoanRequest dto) throws LoanRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreatedDatetime()==null ? null : new java.sql.Timestamp( dto.getCreatedDatetime().getTime() ) );
			if (dto.isRequestedLoanAmtNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getRequestedLoanAmt() );
			}
		
			if (dto.isEmiPeriodNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPeriod() );
			}
		
			if (dto.isStatusIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatusId() );
			}
		
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			if (dto.isLoanIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanId() );
			}
		
			if (dto.isLoanTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanTypeId() );
			}
		
			if (dto.isLoanUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanUserId() );
			}
		
			stmt.setString( index++, dto.getEmailData() );
			stmt.setInt( index++, dto.getActionTakenBy() );
			stmt.setTimestamp(index++, dto.getActionTakenDate()==null ? null : new java.sql.Timestamp( dto.getActionTakenDate().getTime() ) );
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
		
			stmt.setString( index++, dto.getComments() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the LOAN_REQUEST table.
	 */
	public void update(LoanRequestPk pk, LoanRequest dto) throws LoanRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreatedDatetime()==null ? null : new java.sql.Timestamp( dto.getCreatedDatetime().getTime() ) );
			if (dto.isRequestedLoanAmtNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getRequestedLoanAmt() );
			}
		
			if (dto.isEmiPeriodNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEmiPeriod() );
			}
		
			if (dto.isStatusIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatusId() );
			}
		
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			if (dto.isLoanIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanId() );
			}
		
			if (dto.isLoanTypeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanTypeId() );
			}
		
			if (dto.isLoanUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLoanUserId() );
			}
		
			stmt.setString( index++, dto.getEmailData() );
			stmt.setInt( index++, dto.getActionTakenBy() );
			stmt.setTimestamp(index++, dto.getActionTakenDate()==null ? null : new java.sql.Timestamp( dto.getActionTakenDate().getTime() ) );
			if (dto.isSequenceNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSequence() );
			}
		
			stmt.setString( index++, dto.getComments() );
			stmt.setInt( 16, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the LOAN_REQUEST table.
	 */
	public void delete(LoanRequestPk pk) throws LoanRequestDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the LOAN_REQUEST table that matches the specified primary-key value.
	 */
	public LoanRequest findByPrimaryKey(LoanRequestPk pk) throws LoanRequestDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ID = :id'.
	 */
	public LoanRequest findByPrimaryKey(int id) throws LoanRequestDaoException
	{
		LoanRequest ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria ''.
	 */
	public LoanRequest[] findAll() throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_ID = :loanId'.
	 */
	public LoanRequest[] findByLoanDetails(int loanId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOAN_ID = ?", new Object[] {  new Integer(loanId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ID = :id'.
	 */
	public LoanRequest[] findWhereIdEquals(int id) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public LoanRequest[] findWhereEsrMapIdEquals(int esrMapId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'CREATED_DATETIME = :createdDatetime'.
	 */
	public LoanRequest[] findWhereCreatedDatetimeEquals(Date createdDatetime) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATED_DATETIME = ? ORDER BY CREATED_DATETIME", new Object[] { createdDatetime==null ? null : new java.sql.Timestamp( createdDatetime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'REQUESTED_LOAN_AMT = :requestedLoanAmt'.
	 */
	public LoanRequest[] findWhereRequestedLoanAmtEquals(double requestedLoanAmt) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTED_LOAN_AMT = ? ORDER BY REQUESTED_LOAN_AMT", new Object[] {  new Double(requestedLoanAmt) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'EMI_PERIOD = :emiPeriod'.
	 */
	public LoanRequest[] findWhereEmiPeriodEquals(int emiPeriod) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMI_PERIOD = ? ORDER BY EMI_PERIOD", new Object[] {  new Integer(emiPeriod) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'STATUS_ID = :statusId'.
	 */
	public LoanRequest[] findWhereStatusIdEquals(int statusId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS_ID = ? ORDER BY STATUS_ID", new Object[] {  new Integer(statusId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ASSIGN_TO = :assignTo'.
	 */
	public LoanRequest[] findWhereAssignToEquals(int assignTo) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASSIGN_TO = ? ORDER BY ASSIGN_TO", new Object[] {  new Integer(assignTo) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_ID = :loanId'.
	 */
	public LoanRequest[] findWhereLoanIdEquals(int loanId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOAN_ID = ? ORDER BY LOAN_ID", new Object[] {  new Integer(loanId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_TYPE_ID = :loanTypeId'.
	 */
	public LoanRequest[] findWhereLoanTypeIdEquals(int loanTypeId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOAN_TYPE_ID = ? ORDER BY LOAN_TYPE_ID", new Object[] {  new Integer(loanTypeId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_USER_ID = :loanUserId'.
	 */
	public LoanRequest[] findWhereLoanUserIdEquals(int loanUserId) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOAN_USER_ID = ? ORDER BY LOAN_USER_ID", new Object[] {  new Integer(loanUserId) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'EMAIL_DATA = :emailData'.
	 */
	public LoanRequest[] findWhereEmailDataEquals(String emailData) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMAIL_DATA = ? ORDER BY EMAIL_DATA", new Object[] { emailData } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ACTION_TAKEN_BY = :actionTakenBy'.
	 */
	public LoanRequest[] findWhereActionTakenByEquals(int actionTakenBy) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_TAKEN_BY = ? ORDER BY ACTION_TAKEN_BY", new Object[] {  new Integer(actionTakenBy) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ACTION_TAKEN_DATE = :actionTakenDate'.
	 */
	public LoanRequest[] findWhereActionTakenDateEquals(Date actionTakenDate) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_TAKEN_DATE = ? ORDER BY ACTION_TAKEN_DATE", new Object[] { actionTakenDate==null ? null : new java.sql.Timestamp( actionTakenDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'SEQUENCE = :sequence'.
	 */
	public LoanRequest[] findWhereSequenceEquals(int sequence) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEQUENCE = ? ORDER BY SEQUENCE", new Object[] {  new Integer(sequence) } );
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'COMMENTS = :comments'.
	 */
	public LoanRequest[] findWhereCommentsEquals(String comments) throws LoanRequestDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENTS = ? ORDER BY COMMENTS", new Object[] { comments } );
	}

	/**
	 * Method 'LoanRequestDaoImpl'
	 * 
	 */
	public LoanRequestDaoImpl()
	{
	}

	/**
	 * Method 'LoanRequestDaoImpl'
	 * 
	 * @param userConn
	 */
	public LoanRequestDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "LOAN_REQUEST";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected LoanRequest fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			LoanRequest dto = new LoanRequest();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected LoanRequest[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<LoanRequest> resultList = new ArrayList<LoanRequest>();
		while (rs.next()) {
			LoanRequest dto = new LoanRequest();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		LoanRequest ret[] = new LoanRequest[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LoanRequest dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setCreatedDatetime( rs.getTimestamp(COLUMN_CREATED_DATETIME ) );
		dto.setRequestedLoanAmt( rs.getDouble( COLUMN_REQUESTED_LOAN_AMT ) );
		if (rs.wasNull()) {
			dto.setRequestedLoanAmtNull( true );
		}
		
		dto.setEmiPeriod( rs.getInt( COLUMN_EMI_PERIOD ) );
		if (rs.wasNull()) {
			dto.setEmiPeriodNull( true );
		}
		
		dto.setStatusId( rs.getInt( COLUMN_STATUS_ID ) );
		if (rs.wasNull()) {
			dto.setStatusIdNull( true );
		}
		
		dto.setAssignTo( rs.getInt( COLUMN_ASSIGN_TO ) );
		if (rs.wasNull()) {
			dto.setAssignToNull( true );
		}
		
		dto.setLoanId( rs.getInt( COLUMN_LOAN_ID ) );
		if (rs.wasNull()) {
			dto.setLoanIdNull( true );
		}
		
		dto.setLoanTypeId( rs.getInt( COLUMN_LOAN_TYPE_ID ) );
		if (rs.wasNull()) {
			dto.setLoanTypeIdNull( true );
		}
		
		dto.setLoanUserId( rs.getInt( COLUMN_LOAN_USER_ID ) );
		if (rs.wasNull()) {
			dto.setLoanUserIdNull( true );
		}
		
		dto.setEmailData( rs.getString( COLUMN_EMAIL_DATA ) );
		dto.setActionTakenBy( rs.getInt( COLUMN_ACTION_TAKEN_BY ) );
		dto.setActionTakenDate( rs.getTimestamp(COLUMN_ACTION_TAKEN_DATE ) );
		dto.setSequence( rs.getInt( COLUMN_SEQUENCE ) );
		if (rs.wasNull()) {
			dto.setSequenceNull( true );
		}
		
		dto.setComments( rs.getString( COLUMN_COMMENTS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LoanRequest dto)
	{
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the specified arbitrary SQL statement
	 */
	public LoanRequest[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoanRequestDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the specified arbitrary SQL statement
	 */
	public LoanRequest[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoanRequestDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new LoanRequestDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
