/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.SalaryInfoDao;
import com.dikshatech.portal.dto.SalaryInfo;
import com.dikshatech.portal.dto.SalaryInfoPk;
import com.dikshatech.portal.exceptions.SalaryInfoDaoException;

public class SalaryInfoDaoImpl extends AbstractDAO implements SalaryInfoDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger						= Logger.getLogger(SalaryInfoDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT					= "SELECT ID, BASIC, USER_ID, HRA, CONVEYANCE, MEDICAL_ALLOWANCE, SPECIAL_ALLOWANCE, PF_EMP_CONTRIBUTION, ANNUAL_INCENTIVE, RELOCATION_BONUS, JOINING_BONUS_STRING, JOINING_BONUS_AMOUNT,RETENTION_BONUS, PAYMENT_TERMS, PERDIEM_STRING, TOTAL_SALARY, MEDI_CLAIM_POLICY, PER_ACCIDENT_POLICY,RETENTION_BONUS_INSTALL,PERDIEM_OFFER_STRING,RELOCATION_PLACE,PERDIEM_TYPE FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT					= "INSERT INTO " + getTableName() + " ( ID, BASIC, USER_ID, HRA, CONVEYANCE, MEDICAL_ALLOWANCE, SPECIAL_ALLOWANCE, PF_EMP_CONTRIBUTION, ANNUAL_INCENTIVE, RELOCATION_BONUS, JOINING_BONUS_STRING, JOINING_BONUS_AMOUNT, RETENTION_BONUS, PAYMENT_TERMS, PERDIEM_STRING, TOTAL_SALARY, MEDI_CLAIM_POLICY, PER_ACCIDENT_POLICY, RETENTION_BONUS_INSTALL,PERDIEM_OFFER_STRING,RELOCATION_PLACE,PERDIEM_TYPE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,?,?,?,?)";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE					= "UPDATE " + getTableName() + " SET ID = ?, BASIC = ?, USER_ID=?, HRA = ?, CONVEYANCE = ?, MEDICAL_ALLOWANCE = ?, SPECIAL_ALLOWANCE = ?, PF_EMP_CONTRIBUTION = ?, ANNUAL_INCENTIVE = ?, RELOCATION_BONUS = ?, JOINING_BONUS_STRING = ?, JOINING_BONUS_AMOUNT = ?, RETENTION_BONUS= ?, PAYMENT_TERMS = ?, PERDIEM_STRING = ?, TOTAL_SALARY = ?, MEDI_CLAIM_POLICY = ?, PER_ACCIDENT_POLICY = ? , RETENTION_BONUS_INSTALL = ? , PERDIEM_OFFER_STRING = ?, RELOCATION_PLACE=?, PERDIEM_TYPE=? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE					= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID					= 1;
	/**
	 * Index of column BASIC
	 */
	protected static final int		COLUMN_BASIC				= 2;
	/**
	 * Index of column HRA
	 */
	protected static final int		COLUMN_USER_ID				= 3;
	/**
	 * Index of column HRA
	 */
	protected static final int		COLUMN_HRA					= 4;
	/**
	 * Index of column CONVEYANCE
	 */
	protected static final int		COLUMN_CONVEYANCE			= 5;
	/**
	 * Index of column MEDICAL_ALLOWANCE
	 */
	protected static final int		COLUMN_MEDICAL_ALLOWANCE	= 6;
	/**
	 * Index of column SPECIAL_ALLOWANCE
	 */
	protected static final int		COLUMN_SPECIAL_ALLOWANCE	= 7;
	/**
	 * Index of column PF_EMP_CONTRIBUTION
	 */
	protected static final int		COLUMN_PF_EMP_CONTRIBUTION	= 8;
	/**
	 * Index of column ANNUAL_INCENTIVE
	 */
	protected static final int		COLUMN_ANNUAL_INCENTIVE		= 9;
	/**
	 * Index of column RELOCATION_BONUS
	 */
	protected static final int		COLUMN_RELOCATION_BONUS		= 10;
	/**
	 * Index of column JOINING_BONUS_STRING
	 */
	protected static final int		COLUMN_JOINING_BONUS_STRING	= 11;
	
	/**
	 * Index of column JOINING_BONUS
	 */
	protected static final int		COLUMN_JOINING_BONUS_AMOUNT	= 12;
	/**
	 * Index of column RETENTION_BONUS
	 */
	protected static final int		COLUMN_RETENTION_BONUS	= 13;
	
	/**
	 * Index of column PAYMENT_TERMS
	 */
	protected static final int		COLUMN_PAYMENT_TERMS		= 14;
	/**
	 * Index of column PERDIEM_STRING
	 */
	protected static final int		COLUMN_PERDIEM_STRING		= 15;
	/**
	 * Index of column TOTAL_SALARY
	 */
	protected static final int		COLUMN_TOTAL_SALARY			= 16;
	/**
	 * Index of column MEDI_CLAIM_POLICY
	 */
	protected static final int		COLUMN_MEDI_CLAIM_POLICY	= 17;
	/**
	 * Index of column PER_ACCIDENT_POLICY
	 */
	protected static final int		COLUMN_PER_ACCIDENT_POLICY	= 18;
	
	/** 
	 * Index of column RETENTION_BONUS_INSTALL
	 */
	protected static final int COLUMN_RETENTION_BONUS_INSTALL = 19;
	
	/** 
	 * Index of column PERDIEM_OFFER_STRING
	 */
	protected static final int COLUMN_PERDIEM_OFFER_STRING = 20;
	
	/** 
	 * Index of column PERDIEM_OFFER_STRING
	 */
	protected static final int COLUMN_RELOCATION_PLACE = 21;
	/** 
	 * Index of column PERDIEM_OFFER_STRING
	 */
	protected static final int COLUMN_PERDIEM_TYPE = 22;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS			= 22;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID				= 1;

	/**
	 * Inserts a new row in the SALARY_INFO table.
	 */
	public SalaryInfoPk insert(SalaryInfo dto) throws SalaryInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isBasicNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getBasic());
			}
			if (dto.isUserIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserId());
			}
			if (dto.isHraNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getHra());
			}
			if (dto.isConveyanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getConveyance());
			}
			if (dto.isMedicalAllowanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getMedicalAllowance());
			}
			if (dto.isSpecialAllowanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getSpecialAllowance());
			}
			if (dto.isPfEmpContributionNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPfEmpContribution());
			}
			if (dto.isAnnualIncentiveNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getAnnualIncentive());
			}
			stmt.setString(index++, dto.getRelocationBonus());
			stmt.setString(index++, dto.getJoiningBonusString());
			stmt.setString(index++, dto.getJoiningBonusAmount());
			stmt.setString(index++, dto.getRetentionBonus());
			stmt.setString(index++, dto.getPaymentTerms());
			stmt.setString(index++, dto.getPerdiemString());
			if (dto.isTotalSalaryNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getTotalSalary());
			}
			if (dto.isMediClaimPolicyNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getMediClaimPolicy());
			}
			if (dto.isPerAccidentPolicyNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPerAccidentPolicy());
			}
			
			stmt.setString(index++, dto.getRetentionInstallments());
			
			stmt.setString(index++, dto.getPerdiemOffered());
			stmt.setString(index++, dto.getRelocationCity());
			stmt.setInt(index++, dto.getPerdiemType());
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the SALARY_INFO table.
	 */
	public void update(SalaryInfoPk pk, SalaryInfo dto) throws SalaryInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isBasicNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getBasic());
			}
			if (dto.isUserIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getUserId());
			}
			if (dto.isHraNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getHra());
			}
			if (dto.isConveyanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getConveyance());
			}
			if (dto.isMedicalAllowanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getMedicalAllowance());
			}
			if (dto.isSpecialAllowanceNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getSpecialAllowance());
			}
			if (dto.isPfEmpContributionNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPfEmpContribution());
			}
			if (dto.isAnnualIncentiveNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getAnnualIncentive());
			}
			stmt.setString(index++, dto.getRelocationBonus());
			stmt.setString(index++, dto.getJoiningBonusString());
			stmt.setString(index++, dto.getJoiningBonusAmount());
			stmt.setString(index++, dto.getRetentionBonus());
			stmt.setString(index++, dto.getPaymentTerms());
			stmt.setString(index++, dto.getPerdiemString());
			if (dto.isTotalSalaryNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getTotalSalary());
			}
			if (dto.isMediClaimPolicyNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getMediClaimPolicy());
			}
			if (dto.isPerAccidentPolicyNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPerAccidentPolicy());
			}
			stmt.setString(index++, dto.getRetentionInstallments());
			
			stmt.setString(index++, dto.getPerdiemOffered());
			stmt.setString(index++, dto.getRelocationCity());
			stmt.setInt(index++, dto.getPerdiemType());
			stmt.setInt(23, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the SALARY_INFO table.
	 */
	public void delete(SalaryInfoPk pk) throws SalaryInfoDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the SALARY_INFO table that matches the specified primary-key value.
	 */
	public SalaryInfo findByPrimaryKey(SalaryInfoPk pk) throws SalaryInfoDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ID = :id'.
	 */
	public SalaryInfo findByPrimaryKey(int id) throws SalaryInfoDaoException {
		SalaryInfo ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria ''.
	 */
	public SalaryInfo[] findAll() throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ID = :id'.
	 */
	public SalaryInfo[] findWhereIdEquals(int id) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'BASIC = :basic'.
	 */
	public SalaryInfo[] findWhereBasicEquals(int basic) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BASIC = ? ORDER BY BASIC", new Object[] { new Integer(basic) });
	}

	
	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'USER_ID = :userId'.
	 */
	public SalaryInfo[] findWhereuserIdEquals(int userId) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] { new Integer(userId) });
	}
	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'HRA = :hra'.
	 */
	public SalaryInfo[] findWhereHraEquals(int hra) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE HRA = ? ORDER BY HRA", new Object[] { new Integer(hra) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'CONVEYANCE = :conveyance'.
	 */
	public SalaryInfo[] findWhereConveyanceEquals(int conveyance) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CONVEYANCE = ? ORDER BY CONVEYANCE", new Object[] { new Integer(conveyance) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'MEDICAL_ALLOWANCE = :medicalAllowance'.
	 */
	public SalaryInfo[] findWhereMedicalAllowanceEquals(int medicalAllowance) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MEDICAL_ALLOWANCE = ? ORDER BY MEDICAL_ALLOWANCE", new Object[] { new Integer(medicalAllowance) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'SPECIAL_ALLOWANCE = :specialAllowance'.
	 */
	public SalaryInfo[] findWhereSpecialAllowanceEquals(int specialAllowance) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SPECIAL_ALLOWANCE = ? ORDER BY SPECIAL_ALLOWANCE", new Object[] { new Integer(specialAllowance) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PF_EMP_CONTRIBUTION = :pfEmpContribution'.
	 */
	public SalaryInfo[] findWherePfEmpContributionEquals(int pfEmpContribution) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PF_EMP_CONTRIBUTION = ? ORDER BY PF_EMP_CONTRIBUTION", new Object[] { new Integer(pfEmpContribution) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ANNUAL_INCENTIVE = :annualIncentive'.
	 */
	public SalaryInfo[] findWhereAnnualIncentiveEquals(int annualIncentive) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ANNUAL_INCENTIVE = ? ORDER BY ANNUAL_INCENTIVE", new Object[] { new Integer(annualIncentive) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'RELOCATION_BONUS = :relocationBonus'.
	 */
	public SalaryInfo[] findWhereRelocationBonusEquals(String relocationBonus) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE RELOCATION_BONUS = ? ORDER BY RELOCATION_BONUS", new Object[] { relocationBonus });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'JOINING_BONUS_STRING = :joiningBonusString'.
	 */
	public SalaryInfo[] findWhereJoiningBonusStringEquals(String joiningBonusString) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE JOINING_BONUS_STRING = ? ORDER BY JOINING_BONUS_STRING", new Object[] { joiningBonusString });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'JOINING_BONUS_DATE = :joiningBonusDate'.
	 */
	public SalaryInfo[] findWhereJoiningBonusDateEquals(String joiningBonusDate) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE JOINING_BONUS_DATE = ? ORDER BY JOINING_BONUS_DATE", new Object[] { joiningBonusDate });
	}
	
	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'RETENTION_BONUS = :retentionBonus'.
	 */
	public SalaryInfo[] findWhereRetentionBonusEquals(String retentionBonus) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE RETENTION_BONUS= ? ORDER BY RETENTION_BONUS", new Object[] { retentionBonus });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PAYMENT_TERMS = :paymentTerms'.
	 */
	public SalaryInfo[] findWherePaymentTermsEquals(String paymentTerms) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PAYMENT_TERMS = ? ORDER BY PAYMENT_TERMS", new Object[] { paymentTerms });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PERDIEM_STRING = :perdiemString'.
	 */
	public SalaryInfo[] findWherePerdiemStringEquals(String perdiemString) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PERDIEM_STRING = ? ORDER BY PERDIEM_STRING", new Object[] { perdiemString });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'TOTAL_SALARY = :totalSalary'.
	 */
	public SalaryInfo[] findWhereTotalSalaryEquals(int totalSalary) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE TOTAL_SALARY = ? ORDER BY TOTAL_SALARY", new Object[] { new Integer(totalSalary) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'MEDI_CLAIM_POLICY = :mediClaimPolicy'.
	 */
	public SalaryInfo[] findWhereMediClaimPolicyEquals(int mediClaimPolicy) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MEDI_CLAIM_POLICY = ? ORDER BY MEDI_CLAIM_POLICY", new Object[] { new Integer(mediClaimPolicy) });
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PER_ACCIDENT_POLICY = :perAccidentPolicy'.
	 */
	public SalaryInfo[] findWherePerAccidentPolicyEquals(int perAccidentPolicy) throws SalaryInfoDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PER_ACCIDENT_POLICY = ? ORDER BY PER_ACCIDENT_POLICY", new Object[] { new Integer(perAccidentPolicy) });
	}

	/**
	 * Method 'SalaryInfoDaoImpl'
	 */
	public SalaryInfoDaoImpl() {}

	/**
	 * Method 'SalaryInfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SalaryInfoDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "SALARY_INFO";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected SalaryInfo fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			SalaryInfo dto = new SalaryInfo();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected SalaryInfo[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<SalaryInfo> resultList = new ArrayList<SalaryInfo>();
		while (rs.next()){
			SalaryInfo dto = new SalaryInfo();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		SalaryInfo ret[] = new SalaryInfo[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SalaryInfo dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setBasic(rs.getInt(COLUMN_BASIC));
		if (rs.wasNull()){
			dto.setBasicNull(true);
		}
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
		if (rs.wasNull()){
			dto.setUserIdNull(true);
		}
		dto.setHra(rs.getInt(COLUMN_HRA));
		if (rs.wasNull()){
			dto.setHraNull(true);
		}
		dto.setConveyance(rs.getInt(COLUMN_CONVEYANCE));
		if (rs.wasNull()){
			dto.setConveyanceNull(true);
		}
		dto.setMedicalAllowance(rs.getInt(COLUMN_MEDICAL_ALLOWANCE));
		if (rs.wasNull()){
			dto.setMedicalAllowanceNull(true);
		}
		dto.setSpecialAllowance(rs.getInt(COLUMN_SPECIAL_ALLOWANCE));
		if (rs.wasNull()){
			dto.setSpecialAllowanceNull(true);
		}
		dto.setPfEmpContribution(rs.getInt(COLUMN_PF_EMP_CONTRIBUTION));
		if (rs.wasNull()){
			dto.setPfEmpContributionNull(true);
		}
		dto.setAnnualIncentive(rs.getInt(COLUMN_ANNUAL_INCENTIVE));
		if (rs.wasNull()){
			dto.setAnnualIncentiveNull(true);
		}
		dto.setRelocationBonus(rs.getString(COLUMN_RELOCATION_BONUS));
		dto.setJoiningBonusString(rs.getString(COLUMN_JOINING_BONUS_STRING));
		dto.setJoiningBonusAmount(rs.getString(COLUMN_JOINING_BONUS_AMOUNT));
		dto.setRetentionBonus(rs.getString(COLUMN_RETENTION_BONUS));
		dto.setPaymentTerms(rs.getString(COLUMN_PAYMENT_TERMS));
		dto.setPerdiemString(rs.getString(COLUMN_PERDIEM_STRING));
		dto.setTotalSalary(rs.getInt(COLUMN_TOTAL_SALARY));
		if (rs.wasNull()){
			dto.setTotalSalaryNull(true);
		}
		dto.setMediClaimPolicy(rs.getInt(COLUMN_MEDI_CLAIM_POLICY));
		if (rs.wasNull()){
			dto.setMediClaimPolicyNull(true);
		}
		dto.setPerAccidentPolicy(rs.getInt(COLUMN_PER_ACCIDENT_POLICY));
		if (rs.wasNull()){
			dto.setPerAccidentPolicyNull(true);
		}
		
		dto.setRetentionInstallments(rs.getString(COLUMN_RETENTION_BONUS_INSTALL));
		dto.setPerdiemOffered(rs.getString(COLUMN_PERDIEM_OFFER_STRING));
		dto.setRelocationCity(rs.getString(COLUMN_RELOCATION_PLACE));
		dto.setPerdiemType(rs.getInt(COLUMN_PERDIEM_TYPE));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SalaryInfo dto) {}

	/**
	 * Returns all rows from the SALARY_INFO table that match the specified arbitrary SQL statement
	 */
	public SalaryInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the SALARY_INFO table that match the specified arbitrary SQL statement
	 */
	public SalaryInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryInfoDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryInfoDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
