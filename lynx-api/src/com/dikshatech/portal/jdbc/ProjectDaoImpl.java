/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.beans.ProjectBean;
import com.dikshatech.portal.dao.ProjectDao;
import com.dikshatech.portal.dto.Project;
import com.dikshatech.portal.dto.ProjectPk;
import com.dikshatech.portal.exceptions.ProjectDaoException;

public class ProjectDaoImpl extends AbstractDAO implements ProjectDao {
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(ProjectDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, OWNER_ID, CREATOR_ID, NAME, DESCRIPTION, COMPANY_ID, BILL_ADDRESS, BILL_CITY, BILL_ZIP_CODE, BILL_STATE, BILL_COUNTRY, BILL_TEL_NUM, BILL_FAX_NUM, IS_ENABLE, MESSAGE_BODY, ESRQM_ID, CREATE_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_ON FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, OWNER_ID, CREATOR_ID, NAME, DESCRIPTION, COMPANY_ID, BILL_ADDRESS, BILL_CITY, BILL_ZIP_CODE, BILL_STATE, BILL_COUNTRY, BILL_TEL_NUM, BILL_FAX_NUM, IS_ENABLE, MESSAGE_BODY, ESRQM_ID, CREATE_DATE, LAST_MODIFIED_BY, LAST_MODIFIED_ON ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, OWNER_ID = ?, CREATOR_ID = ?, NAME = ?, DESCRIPTION = ?, COMPANY_ID = ?, BILL_ADDRESS = ?, BILL_CITY = ?, BILL_ZIP_CODE = ?, BILL_STATE = ?, BILL_COUNTRY = ?, BILL_TEL_NUM = ?, BILL_FAX_NUM = ?, IS_ENABLE = ?, MESSAGE_BODY = ?, ESRQM_ID = ?, CREATE_DATE = ?, LAST_MODIFIED_BY = ?, LAST_MODIFIED_ON = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column OWNER_ID
	 */
	protected static final int		COLUMN_OWNER_ID			= 2;
	/**
	 * Index of column CREATOR_ID
	 */
	protected static final int		COLUMN_CREATOR_ID		= 3;
	/**
	 * Index of column NAME
	 */
	protected static final int		COLUMN_NAME				= 4;
	/**
	 * Index of column DESCRIPTION
	 */
	protected static final int		COLUMN_DESCRIPTION		= 5;
	/**
	 * Index of column COMPANY_ID
	 */
	protected static final int		COLUMN_COMPANY_ID		= 6;
	/**
	 * Index of column BILL_ADDRESS
	 */
	protected static final int		COLUMN_BILL_ADDRESS		= 7;
	/**
	 * Index of column BILL_CITY
	 */
	protected static final int		COLUMN_BILL_CITY		= 8;
	/**
	 * Index of column BILL_ZIP_CODE
	 */
	protected static final int		COLUMN_BILL_ZIP_CODE	= 9;
	/**
	 * Index of column BILL_STATE
	 */
	protected static final int		COLUMN_BILL_STATE		= 10;
	/**
	 * Index of column BILL_COUNTRY
	 */
	protected static final int		COLUMN_BILL_COUNTRY		= 11;
	/**
	 * Index of column BILL_TEL_NUM
	 */
	protected static final int		COLUMN_BILL_TEL_NUM		= 12;
	/**
	 * Index of column BILL_FAX_NUM
	 */
	protected static final int		COLUMN_BILL_FAX_NUM		= 13;
	/**
	 * Index of column IS_ENABLE
	 */
	protected static final int		COLUMN_IS_ENABLE		= 14;
	/**
	 * Index of column MESSAGE_BODY
	 */
	protected static final int		COLUMN_MESSAGE_BODY		= 15;
	/**
	 * Index of column ESRQM_ID
	 */
	protected static final int		COLUMN_ESRQM_ID			= 16;
	/**
	 * Index of column CREATE_DATE
	 */
	protected static final int		COLUMN_CREATE_DATE		= 17;
	/**
	 * Index of column LAST_MODIFIED_BY
	 */
	protected static final int		COLUMN_LAST_MODIFIED_BY	= 18;
	/**
	 * Index of column LAST_MODIFIED_ON
	 */
	protected static final int		COLUMN_LAST_MODIFIED_ON	= 19;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 19;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the PROJECT table.
	 */
	public ProjectPk insert(Project dto) throws ProjectDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getOwnerId());
			stmt.setInt(index++, dto.getCreatorId());
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getDescription());
			if (dto.isCompanyIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getCompanyId());
			}

			stmt.setString(index++, dto.getBillAddress());
			stmt.setString(index++, dto.getBillCity());
			if (dto.isBillZipCodeNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getBillZipCode());
			}

			stmt.setString(index++, dto.getBillState());
			stmt.setString(index++, dto.getBillCountry());
			stmt.setString(index++, dto.getBillTelNum());
			stmt.setString(index++, dto.getBillFaxNum());
			stmt.setString(index++, dto.getIsEnable());
			stmt.setString(index++, dto.getMessageBody());
			stmt.setInt(index++, dto.getEsrqmId());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			stmt.setInt(index++, dto.getLastModifiedBy());
			stmt.setTimestamp(index++, dto.getLastModifiedOn() == null ? null : new java.sql.Timestamp(dto.getLastModifiedOn().getTime()));
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}

			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}

			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}

			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProjectDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the PROJECT table.
	 */
	public void update(ProjectPk pk, Project dto) throws ProjectDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}

			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getOwnerId());
			stmt.setInt(index++, dto.getCreatorId());
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getDescription());
			if (dto.isCompanyIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getCompanyId());
			}

			stmt.setString(index++, dto.getBillAddress());
			stmt.setString(index++, dto.getBillCity());
			if (dto.isBillZipCodeNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getBillZipCode());
			}

			stmt.setString(index++, dto.getBillState());
			stmt.setString(index++, dto.getBillCountry());
			stmt.setString(index++, dto.getBillTelNum());
			stmt.setString(index++, dto.getBillFaxNum());
			stmt.setString(index++, dto.getIsEnable());
			stmt.setString(index++, dto.getMessageBody());
			stmt.setInt(index++, dto.getEsrqmId());
			stmt.setTimestamp(index++, dto.getCreateDate() == null ? null : new java.sql.Timestamp(dto.getCreateDate().getTime()));
			stmt.setInt(index++, dto.getLastModifiedBy());
			stmt.setTimestamp(index++, dto.getLastModifiedOn() == null ? null : new java.sql.Timestamp(dto.getLastModifiedOn().getTime()));
			stmt.setInt(20, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProjectDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the PROJECT table.
	 */
	public void delete(ProjectPk pk) throws ProjectDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}

			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProjectDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the PROJECT table that matches the specified
	 * primary-key value.
	 */
	public Project findByPrimaryKey(ProjectPk pk) throws ProjectDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria 'ID =
	 * :id'.
	 */
	public Project findByPrimaryKey(int id) throws ProjectDaoException {
		Project ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria ''.
	 */
	public Project[] findAll() throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria 'ID =
	 * :id'.
	 */
	public Project[] findWhereIdEquals(int id) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria 'OWNER_ID
	 * = :ownerId'.
	 */
	public Project[] findWhereOwnerIdEquals(int ownerId) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE OWNER_ID = ? ORDER BY OWNER_ID", new Object[] { new Integer(ownerId) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'CREATOR_ID = :creatorId'.
	 */
	public Project[] findWhereCreatorIdEquals(int creatorId) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATOR_ID = ? ORDER BY CREATOR_ID", new Object[] { new Integer(creatorId) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria 'NAME =
	 * :name'.
	 */
	public Project[] findWhereNameEquals(String name) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[] { name });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'DESCRIPTION = :description'.
	 */
	public Project[] findWhereDescriptionEquals(String description) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'COMPANY_ID = :companyId'.
	 */
	public Project[] findWhereCompanyIdEquals(int companyId) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMPANY_ID = ? ORDER BY COMPANY_ID", new Object[] { new Integer(companyId) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_ADDRESS = :billAddress'.
	 */
	public Project[] findWhereBillAddressEquals(String billAddress) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_ADDRESS = ? ORDER BY BILL_ADDRESS", new Object[] { billAddress });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_CITY = :billCity'.
	 */
	public Project[] findWhereBillCityEquals(String billCity) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_CITY = ? ORDER BY BILL_CITY", new Object[] { billCity });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_ZIP_CODE = :billZipCode'.
	 */
	public Project[] findWhereBillZipCodeEquals(int billZipCode) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_ZIP_CODE = ? ORDER BY BILL_ZIP_CODE", new Object[] { new Integer(billZipCode) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_STATE = :billState'.
	 */
	public Project[] findWhereBillStateEquals(String billState) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_STATE = ? ORDER BY BILL_STATE", new Object[] { billState });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_COUNTRY = :billCountry'.
	 */
	public Project[] findWhereBillCountryEquals(String billCountry) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_COUNTRY = ? ORDER BY BILL_COUNTRY", new Object[] { billCountry });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_TEL_NUM = :billTelNum'.
	 */
	public Project[] findWhereBillTelNumEquals(String billTelNum) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_TEL_NUM = ? ORDER BY BILL_TEL_NUM", new Object[] { billTelNum });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'BILL_FAX_NUM = :billFaxNum'.
	 */
	public Project[] findWhereBillFaxNumEquals(String billFaxNum) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BILL_FAX_NUM = ? ORDER BY BILL_FAX_NUM", new Object[] { billFaxNum });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'IS_ENABLE = :isEnable'.
	 */
	public Project[] findWhereIsEnableEquals(String isEnable) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE IS_ENABLE = ? ORDER BY IS_ENABLE", new Object[] { isEnable });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'MESSAGE_BODY = :messageBody'.
	 */
	public Project[] findWhereMessageBodyEquals(String messageBody) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria 'ESRQM_ID
	 * = :esrqmId'.
	 */
	public Project[] findWhereEsrqmIdEquals(int esrqmId) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ESRQM_ID = ? ORDER BY ESRQM_ID", new Object[] { new Integer(esrqmId) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'CREATE_DATE = :createDate'.
	 */
	public Project[] findWhereCreateDateEquals(Date createDate) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate == null ? null : new java.sql.Timestamp(createDate.getTime()) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'LAST_MODIFIED_BY = :lastModifiedBy'.
	 */
	public Project[] findWhereLastModifiedByEquals(int lastModifiedBy) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LAST_MODIFIED_BY = ? ORDER BY LAST_MODIFIED_BY", new Object[] { new Integer(lastModifiedBy) });
	}

	/**
	 * Returns all rows from the PROJECT table that match the criteria
	 * 'LAST_MODIFIED_ON = :lastModifiedOn'.
	 */
	public Project[] findWhereLastModifiedOnEquals(Date lastModifiedOn) throws ProjectDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE LAST_MODIFIED_ON = ? ORDER BY LAST_MODIFIED_ON", new Object[] { lastModifiedOn == null ? null : new java.sql.Timestamp(lastModifiedOn.getTime()) });
	}

	/**
	 * Method 'ProjectDaoImpl'
	 */
	public ProjectDaoImpl() {}

	/**
	 * Method 'ProjectDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProjectDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "PROJECT";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected Project fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			Project dto = new Project();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected Project[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<Project> resultList = new ArrayList<Project>();
		while (rs.next()){
			Project dto = new Project();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		Project ret[] = new Project[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Project dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setOwnerId(rs.getInt(COLUMN_OWNER_ID));
		dto.setCreatorId(rs.getInt(COLUMN_CREATOR_ID));
		dto.setName(rs.getString(COLUMN_NAME));
		dto.setDescription(rs.getString(COLUMN_DESCRIPTION));
		dto.setCompanyId(rs.getInt(COLUMN_COMPANY_ID));
		if (rs.wasNull()){
			dto.setCompanyIdNull(true);
		}

		dto.setBillAddress(rs.getString(COLUMN_BILL_ADDRESS));
		dto.setBillCity(rs.getString(COLUMN_BILL_CITY));
		dto.setBillZipCode(rs.getInt(COLUMN_BILL_ZIP_CODE));
		if (rs.wasNull()){
			dto.setBillZipCodeNull(true);
		}

		dto.setBillState(rs.getString(COLUMN_BILL_STATE));
		dto.setBillCountry(rs.getString(COLUMN_BILL_COUNTRY));
		dto.setBillTelNum(rs.getString(COLUMN_BILL_TEL_NUM));
		dto.setBillFaxNum(rs.getString(COLUMN_BILL_FAX_NUM));
		dto.setIsEnable(rs.getString(COLUMN_IS_ENABLE));
		dto.setMessageBody(rs.getString(COLUMN_MESSAGE_BODY));
		dto.setEsrqmId(rs.getInt(COLUMN_ESRQM_ID));
		dto.setCreateDate(rs.getTimestamp(COLUMN_CREATE_DATE));
		dto.setLastModifiedBy(rs.getInt(COLUMN_LAST_MODIFIED_BY));
		dto.setLastModifiedOn(rs.getTimestamp(COLUMN_LAST_MODIFIED_ON));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Project dto) {}

	/**
	 * Returns all rows from the PROJECT table that match the specified
	 * arbitrary SQL statement
	 */
	public Project[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProjectDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the PROJECT table that match the specified
	 * arbitrary SQL statement
	 */
	public Project[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}

			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ProjectDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	public boolean deleteAllByProject(int projectId) {

		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		boolean isDone = false;
		String SQL = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			// Delete All Data in Project_div_Map By Project
			SQL = "DELETE FROM PROJECT_MAP WHERE PROJ_ID=" + projectId + "";
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();

			// Delete All Data in Proj_Client_Map By Project
			SQL = "DELETE FROM PROJ_CLIENT_MAP WHERE PROJ_ID=" + projectId + "";
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();
			
			// Delete ALl Data in Proj_Cont_Info By Project
			SQL = "DELETE FROM PROJ_CONT_INFO WHERE PROJ_ID=" + projectId + "";
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();

			// Delete All Data In Proj_Locations BY Project
			SQL = "DELETE FROM PROJ_LOCATIONS WHERE PROJ_ID=" + projectId + "";
			stmt = conn.prepareStatement(SQL);
			stmt.executeUpdate();
			isDone = true;
		} catch (Exception e){
			isDone = false;
			e.printStackTrace();
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return isDone;
	}

	public Project[] findProjectFromTasks(String sql, Object[] sqlParams) {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement

			// prepare statement
			stmt = conn.prepareStatement(sql);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			_e.printStackTrace();
			return null;
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}

		}

	}

	public ProjectBean[] getProjectDetails(String whereCluse, Object[] sqlParams) {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			// prepare statement
			stmt = conn.prepareStatement("SELECT P.ID, P.NAME, C.NAME, PL.CITY FROM PROJECT P LEFT JOIN PROJ_LOCATIONS PL ON P.ID=PL.PROJ_ID LEFT JOIN PROJ_CLIENT_MAP PCM ON P.ID=PCM.PROJ_ID LEFT JOIN CLIENT C ON PCM.CLIENT_ID=C.ID " + whereCluse);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			Collection<ProjectBean> resultList = new ArrayList<ProjectBean>();
			while (rs.next()){
				resultList.add(new ProjectBean(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4)));
			}
			ProjectBean ret[] = new ProjectBean[resultList.size()];
			return (ProjectBean[]) resultList.toArray(ret);
		} catch (Exception _e){
			_e.printStackTrace();
			return null;
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
