/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ContactTypeDaoImpl extends AbstractDAO implements ContactTypeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ContactTypeDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, CANDIDATE_ID, USER_ID, TYPE, NAME, DESIGNATION, PHONE_NUMBER, EMAIL_ID, RELATIONSHIP FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, CANDIDATE_ID, USER_ID, TYPE, NAME, DESIGNATION, PHONE_NUMBER, EMAIL_ID, RELATIONSHIP ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, CANDIDATE_ID = ?, USER_ID = ?, TYPE = ?, NAME = ?, DESIGNATION = ?, PHONE_NUMBER = ?, EMAIL_ID = ?, RELATIONSHIP = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column CANDIDATE_ID
	 */
	protected static final int COLUMN_CANDIDATE_ID = 2;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 3;

	/** 
	 * Index of column TYPE
	 */
	protected static final int COLUMN_TYPE = 4;

	/** 
	 * Index of column NAME
	 */
	protected static final int COLUMN_NAME = 5;

	/** 
	 * Index of column DESIGNATION
	 */
	protected static final int COLUMN_DESIGNATION = 6;

	/** 
	 * Index of column PHONE_NUMBER
	 */
	protected static final int COLUMN_PHONE_NUMBER = 7;

	/** 
	 * Index of column EMAIL_ID
	 */
	protected static final int COLUMN_EMAIL_ID = 8;

	/** 
	 * Index of column RELATIONSHIP
	 */
	protected static final int COLUMN_RELATIONSHIP = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the CONTACT_TYPE table.
	 */
	public ContactTypePk insert(ContactType dto) throws ContactTypeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDesignation() );
			stmt.setString( index++, dto.getPhoneNumber() );
			stmt.setString( index++, dto.getEmailId() );
			stmt.setString( index++, dto.getRelationship() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ContactTypeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CONTACT_TYPE table.
	 */
	public void update(ContactTypePk pk, ContactType dto) throws ContactTypeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isCandidateIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCandidateId() );
			}
		
			if (dto.isUserIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUserId() );
			}
		
			stmt.setString( index++, dto.getType() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDesignation() );
			stmt.setString( index++, dto.getPhoneNumber() );
			stmt.setString( index++, dto.getEmailId() );
			stmt.setString( index++, dto.getRelationship() );
			stmt.setInt( 10, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ContactTypeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CONTACT_TYPE table.
	 */
	public void delete(ContactTypePk pk) throws ContactTypeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ContactTypeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CONTACT_TYPE table that matches the specified primary-key value.
	 */
	public ContactType findByPrimaryKey(ContactTypePk pk) throws ContactTypeDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'ID = :id'.
	 */
	public ContactType findByPrimaryKey(int id) throws ContactTypeDaoException
	{
		ContactType ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria ''.
	 */
	public ContactType[] findAll() throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'ID = :id'.
	 */
	public ContactType[] findWhereIdEquals(int id) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public ContactType[] findWhereCandidateIdEquals(int candidateId) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANDIDATE_ID = ? ORDER BY CANDIDATE_ID", new Object[] {  new Integer(candidateId) } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'USER_ID = :userId'.
	 */
	public ContactType[] findWhereUserIdEquals(int userId) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] {  new Integer(userId) } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'TYPE = :type'.
	 */
	public ContactType[] findWhereTypeEquals(String type) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TYPE = ? ORDER BY TYPE", new Object[] { type } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'NAME = :name'.
	 */
	public ContactType[] findWhereNameEquals(String name) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'DESIGNATION = :designation'.
	 */
	public ContactType[] findWhereDesignationEquals(String designation) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESIGNATION = ? ORDER BY DESIGNATION", new Object[] { designation } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'PHONE_NUMBER = :phoneNumber'.
	 */
	public ContactType[] findWherePhoneNumberEquals(String phoneNumber) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PHONE_NUMBER = ? ORDER BY PHONE_NUMBER", new Object[] { phoneNumber } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'EMAIL_ID = :emailId'.
	 */
	public ContactType[] findWhereEmailIdEquals(String emailId) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMAIL_ID = ? ORDER BY EMAIL_ID", new Object[] { emailId } );
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'RELATIONSHIP = :relationship'.
	 */
	public ContactType[] findWhereRelationshipEquals(String relationship) throws ContactTypeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RELATIONSHIP = ? ORDER BY RELATIONSHIP", new Object[] { relationship } );
	}

	/**
	 * Method 'ContactTypeDaoImpl'
	 * 
	 */
	public ContactTypeDaoImpl()
	{
	}

	/**
	 * Method 'ContactTypeDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContactTypeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CONTACT_TYPE";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ContactType fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ContactType dto = new ContactType();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ContactType[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ContactType> resultList = new ArrayList<ContactType>();
		while (rs.next()) {
			ContactType dto = new ContactType();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ContactType ret[] = new ContactType[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ContactType dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setCandidateId( rs.getInt( COLUMN_CANDIDATE_ID ) );
		if (rs.wasNull()) {
			dto.setCandidateIdNull( true );
		}
		
		dto.setUserId( rs.getInt( COLUMN_USER_ID ) );
		if (rs.wasNull()) {
			dto.setUserIdNull( true );
		}
		
		dto.setType( rs.getString( COLUMN_TYPE ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setDesignation( rs.getString( COLUMN_DESIGNATION ) );
		dto.setPhoneNumber( rs.getString( COLUMN_PHONE_NUMBER ) );
		dto.setEmailId( rs.getString( COLUMN_EMAIL_ID ) );
		dto.setRelationship( rs.getString( COLUMN_RELATIONSHIP ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ContactType dto)
	{
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the specified arbitrary SQL statement
	 */
	public ContactType[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContactTypeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ContactTypeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the specified arbitrary SQL statement
	 */
	public ContactType[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContactTypeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ContactTypeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
