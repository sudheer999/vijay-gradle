/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.LeaveLwpDao;
import com.dikshatech.portal.dto.LeaveBalancePk;
import com.dikshatech.portal.dto.LeaveLwp;
import com.dikshatech.portal.dto.LeaveLwpPk;
import com.dikshatech.portal.exceptions.LeaveBalanceDaoException;
import com.dikshatech.portal.exceptions.LeaveLwpDaoException;

public class LeaveLwpDaoImpl extends AbstractDAO implements LeaveLwpDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger						= Logger.getLogger(LeaveLwpDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT					= "SELECT ID, USER_ID, MONTH_CYCLE, LWP FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT					= "INSERT INTO " + getTableName() + " ( USER_ID, MONTH_CYCLE, LWP) VALUES ( ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE					= "UPDATE " + getTableName() + " SET ID = ?, USER_ID = ?, MONTH_CYCLE = ?, LWP = ? WHERE ID = ?";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE_FROM_XLS			= "UPDATE " + getTableName() + " SET LEAVE_ACCUMALATED = ?, PATERNITY = ?, MARRIAGE = ?, BEREAVEMENT = ?, MATERNITY = ?, LEAVES_TAKEN = ?, Lwp = ? WHERE USER_ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE					= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID					= 1;
	/**
	 * Index of column USER_ID
	 */
	protected static final int		COLUMN_USER_ID				= 2;
	/**
	 * Index of column MONTH_CYCLE
	 */
	protected static final int		COLUMN_MONTH_CYCLE	        = 3;
	/**
	 * Index of column LWP
	 */
	protected static final int		COLUMN_LWP			        = 4;

	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID				= 1;

	/**
	 * Inserts a new row in the LEAVE_Lwp table.
	 */
	public LeaveLwpPk insert(LeaveLwp dto) throws LeaveLwpDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			//stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getUserId());
			stmt.setString(index++, dto.getMonthCycle());
		    stmt.setFloat(index++, dto.getLwp());
            if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the LEAVE_Lwp table.
	 */
	public void update(LeaveLwpPk pk, LeaveLwp dto) throws LeaveLwpDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getUserId());
			stmt.setString(index++, dto.getMonthCycle());
			stmt.setFloat(index++, dto.getLwp());
			stmt.setInt(index++, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	/**
	 * Deletes a single row in the LEAVE_BALANCE table.
	 */
	public void delete(LeaveLwpPk pk) throws LeaveLwpDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}


	


	/**
	 * Returns the rows from the LEAVE_Lwp table that matches the specified primary-key value.
	 */
	public LeaveLwp findByPrimaryKey(LeaveLwpPk pk) throws LeaveLwpDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'ID = :id'.
	 */
	public LeaveLwp findByPrimaryKey(int id) throws LeaveLwpDaoException {
		LeaveLwp ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria ''.
	 */
	public LeaveLwp[] findAll() throws LeaveLwpDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'ID = :id'.
	 */
	public LeaveLwp[] findWhereIdEquals(int id) throws LeaveLwpDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'USER_ID = :userId'.
	 */
	public LeaveLwp findWhereUserIdEquals(int userId) throws LeaveLwpDaoException {
		LeaveLwp ret[] = findByDynamicSelect(SQL_SELECT + " WHERE USER_ID = ?", new Object[] { new Integer(userId) });
		return ret.length == 0 ? null : ret[0];
	}
	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'MONTH_CYCLE = :monthCycle'.
	 */
	public LeaveLwp findWhereUserIdEquals(String monthCycle) throws LeaveLwpDaoException {
		LeaveLwp ret[] = findByDynamicSelect(SQL_SELECT + " WHERE MONTH_CYCLE = ?", new Object[] { new String(monthCycle) });
		return ret.length == 0 ? null : ret[0];
	}
	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'USER_ID = :userId' and 'MONTH_CYCLE = :monthCycle'.
	 */
	public LeaveLwp findWhereUserIdEquals(int userId,String monthCycle) throws LeaveLwpDaoException {
		LeaveLwp ret[] = findByDynamicSelect(SQL_SELECT + " WHERE USER_ID =? AND MONTH_CYCLE = ?", new Object[] { new Integer(userId),new String(monthCycle) });
		return ret.length == 0 ? null : ret[0];
	}

	
	/**
	 * Returns all rows from the LEAVE_Lwp table that match the criteria 'Lwp = :Lwp'.
	 */
	public LeaveLwp[] findWhereLwpEquals(float Lwp) throws LeaveLwpDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE Lwp = ? ORDER BY Lwp", new Object[] { new Float(Lwp) });
	}


	

	/**
	 * Method 'LeaveLwpDaoImpl'
	 */
	public LeaveLwpDaoImpl() {}

	/**
	 * Method 'LeaveLwpDaoImpl'
	 * 
	 * @param userConn
	 */
	public LeaveLwpDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "LEAVE_LWP";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected LeaveLwp fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			LeaveLwp dto = new LeaveLwp();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected LeaveLwp[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<LeaveLwp> resultList = new ArrayList<LeaveLwp>();
		while (rs.next()){
			LeaveLwp dto = new LeaveLwp();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		LeaveLwp ret[] = new LeaveLwp[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	protected LeaveLwp[] fetchMultiResultsLeave(ResultSet rs) throws SQLException {
		Collection<LeaveLwp> resultList = new ArrayList<LeaveLwp>();
		while (rs.next()){
			LeaveLwp dto = new LeaveLwp();
			populateDtoLeave(dto, rs);
			resultList.add(dto);
		}
		LeaveLwp ret[] = new LeaveLwp[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	protected void populateDtoLeave(LeaveLwp dto, ResultSet rs) throws SQLException {

		dto.setLwp(rs.getFloat(COLUMN_LWP));
		
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LeaveLwp dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
		dto.setMonthCycle(rs.getString(COLUMN_MONTH_CYCLE));
		dto.setLwp(rs.getFloat(COLUMN_LWP));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LeaveLwp dto) {}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the specified arbitrary SQL statement
	 */
	public LeaveLwp[] findByDynamicSelect(String sql, Object[] sqlParams) throws LeaveLwpDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the LEAVE_Lwp table that match the specified arbitrary SQL statement
	 */
	public LeaveLwp[] findByDynamicWhere(String sql, Object[] sqlParams) throws LeaveLwpDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public LeaveLwp[] findByUserID(String sql, Object[] sqlParams) throws LeaveLwpDaoException {
		// declare variables
				final boolean isConnSupplied = (userConn != null);
				Connection conn = null;
				PreparedStatement stmt = null;
				ResultSet rs = null;
				try{
					// get the user-specified connection or get a connection from the ResourceManager
					conn = isConnSupplied ? userConn : ResourceManager.getConnection();
					// construct the SQL statement
					
					final String SQL = "SELECT LWP FROM LEAVE_Lwp "+ " WHERE " + sql;
					if (logger.isDebugEnabled()){
						logger.debug("Executing " + SQL);
					}
					// prepare statement
					stmt = conn.prepareStatement(SQL);
					stmt.setMaxRows(maxRows);
					// bind parameters
					for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
						stmt.setObject(i + 1, sqlParams[i]);
					}
					rs = stmt.executeQuery();
					// fetch the results
					return fetchMultiResultsLeave(rs);
				} catch (Exception _e){
					logger.error("Exception: " + _e.getMessage(), _e);
					throw new LeaveLwpDaoException("Exception: " + _e.getMessage(), _e);
				} finally{
					ResourceManager.close(rs);
					ResourceManager.close(stmt);
					if (!isConnSupplied){
						ResourceManager.close(conn);
					}
				}
			}








	}
