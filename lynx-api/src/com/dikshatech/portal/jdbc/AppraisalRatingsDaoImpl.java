/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.AppraisalRatingsDao;
import com.dikshatech.portal.dto.AppraisalRatings;
import com.dikshatech.portal.dto.AppraisalRatingsPk;
import com.dikshatech.portal.exceptions.AppraisalRatingsDaoException;

public class AppraisalRatingsDaoImpl extends AbstractDAO implements AppraisalRatingsDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(AppraisalRatingsDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, APPRAISAL_ID, QUESTION_ID, APPRAISEE_RATING, APPRAISER_RATING FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, APPRAISAL_ID, QUESTION_ID, APPRAISEE_RATING, APPRAISER_RATING ) VALUES ( ?, ?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, APPRAISAL_ID = ?, QUESTION_ID = ?, APPRAISEE_RATING = ?, APPRAISER_RATING = ? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column APPRAISAL_ID
	 */
	protected static final int		COLUMN_APPRAISAL_ID		= 2;
	/**
	 * Index of column QUESTION_ID
	 */
	protected static final int		COLUMN_QUESTION_ID		= 3;
	/**
	 * Index of column APPRAISEE_RATING
	 */
	protected static final int		COLUMN_APPRAISEE_RATING	= 4;
	/**
	 * Index of column APPRAISER_RATING
	 */
	protected static final int		COLUMN_APPRAISER_RATING	= 5;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 5;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the APPRAISAL_RATINGS table.
	 */
	public AppraisalRatingsPk insert(AppraisalRatings dto) throws AppraisalRatingsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getAppraisalId());
			if (dto.getQuestionId() != null){
				stmt.setShort(index++, dto.getQuestionId().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			if (dto.getAppraiseeRating() != null){
				stmt.setShort(index++, dto.getAppraiseeRating().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			if (dto.getAppraiserRating() != null){
				stmt.setShort(index++, dto.getAppraiserRating().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new AppraisalRatingsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the APPRAISAL_RATINGS table.
	 */
	public void update(AppraisalRatingsPk pk, AppraisalRatings dto) throws AppraisalRatingsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			stmt.setInt(index++, dto.getAppraisalId());
			if (dto.getQuestionId() != null){
				stmt.setShort(index++, dto.getQuestionId().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			if (dto.getAppraiseeRating() != null){
				stmt.setShort(index++, dto.getAppraiseeRating().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			if (dto.getAppraiserRating() != null){
				stmt.setShort(index++, dto.getAppraiserRating().shortValue());
			} else{
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			stmt.setInt(6, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new AppraisalRatingsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the APPRAISAL_RATINGS table.
	 */
	public void delete(AppraisalRatingsPk pk) throws AppraisalRatingsDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new AppraisalRatingsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the APPRAISAL_RATINGS table that matches the specified primary-key value.
	 */
	public AppraisalRatings findByPrimaryKey(AppraisalRatingsPk pk) throws AppraisalRatingsDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the APPRAISAL_RATINGS table that match the criteria 'ID = :id'.
	 */
	public AppraisalRatings findByPrimaryKey(int id) throws AppraisalRatingsDaoException {
		AppraisalRatings ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the APPRAISAL_RATINGS table that match the criteria ''.
	 */
	public AppraisalRatings[] findAll() throws AppraisalRatingsDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the APPRAISAL_RATINGS table that match the criteria 'APPRAISAL_ID = :appraisalId'.
	 */
	public AppraisalRatings[] findWhereAppraisalIdEquals(Integer appraisalId) throws AppraisalRatingsDaoException {
		return findByDynamicSelect("SELECT AR.*, QUESTION  FROM " + getTableName() + " AR LEFT JOIN APPRAISAL_QUESTIONS AQ ON AQ.ID=AR.QUESTION_ID WHERE APPRAISAL_ID = ? ORDER BY ID", new Object[] { appraisalId });
	}

	public HashMap<String, String>[] findAppraisalRatings(Integer appraisalId, boolean isAppraisee) throws AppraisalRatingsDaoException {
		Set<HashMap<String, String>> list = new HashSet<HashMap<String, String>>();
		for (AppraisalRatings ratings : findByDynamicSelect("SELECT AR.*, QUESTION  FROM " + getTableName() + " AR RIGHT JOIN APPRAISAL_QUESTIONS AQ ON AQ.ID=AR.QUESTION_ID WHERE APPRAISAL_ID = ? ORDER BY ID", new Object[] { appraisalId })){
			list.add(ratings.toHashMap(isAppraisee));
		}
		return list.toArray(new HashMap[list.size()]);
	}

	public HashMap<String, String>[] findAllRatings(Integer appraisalId) throws AppraisalRatingsDaoException {
		HashMap<Short, HashMap<String, String>> map = new HashMap<Short, HashMap<String, String>>();
		Set<HashMap<String, String>> list = new HashSet<HashMap<String, String>>();
		for (AppraisalRatings ratings : findByDynamicSelect("SELECT AR.*, QUESTION  FROM " + getTableName() + " AR RIGHT JOIN APPRAISAL_QUESTIONS AQ ON AQ.ID=AR.QUESTION_ID WHERE APPRAISAL_ID = ? ORDER BY ID", new Object[] { appraisalId })){
			map.put(ratings.getQuestionId(), ratings.toHashMap(true));
		}
		for (AppraisalRatings ratings : findByDynamicSelect("SELECT 0, 0, ID , 0, 0, QUESTION  FROM APPRAISAL_QUESTIONS", null)){
			list.add(map.containsKey(ratings.getQuestionId()) ? map.get(ratings.getQuestionId()) : ratings.toHashMap(true));
		}
		return list.toArray(new HashMap[list.size()]);
	}

	/**
	 * Method 'AppraisalRatingsDaoImpl'
	 */
	public AppraisalRatingsDaoImpl() {}

	/**
	 * Method 'AppraisalRatingsDaoImpl'
	 * 
	 * @param userConn
	 */
	public AppraisalRatingsDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "APPRAISAL_RATINGS";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected AppraisalRatings fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			AppraisalRatings dto = new AppraisalRatings();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected AppraisalRatings[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<AppraisalRatings> resultList = new ArrayList<AppraisalRatings>();
		while (rs.next()){
			AppraisalRatings dto = new AppraisalRatings();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		AppraisalRatings ret[] = new AppraisalRatings[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(AppraisalRatings dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setAppraisalId(rs.getInt(COLUMN_APPRAISAL_ID));
		dto.setQuestionId(new Short(rs.getShort(COLUMN_QUESTION_ID)));
		dto.setAppraiseeRating(new Short(rs.getShort(COLUMN_APPRAISEE_RATING)));
		dto.setAppraiserRating(new Short(rs.getShort(COLUMN_APPRAISER_RATING)));
		try{
			dto.setQuestion(rs.getString(6));
		} catch (Exception e){
			e.printStackTrace();
		}
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(AppraisalRatings dto) {}

	/**
	 * Returns all rows from the APPRAISAL_RATINGS table that match the specified arbitrary SQL statement
	 */
	public AppraisalRatings[] findByDynamicSelect(String sql, Object[] sqlParams) throws AppraisalRatingsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new AppraisalRatingsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the APPRAISAL_RATINGS table that match the specified arbitrary SQL statement
	 */
	public AppraisalRatings[] findByDynamicWhere(String sql, Object[] sqlParams) throws AppraisalRatingsDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new AppraisalRatingsDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
}
