/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import com.dikshatech.portal.dao.*;
import com.dikshatech.portal.factory.*;
import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CandidateDaoImpl extends AbstractDAO implements CandidateDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( CandidateDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, PROFILE_ID, EDUCATION_ID, EXPERIENCE_ID, PERSONAL_ID, FINANCIAL_ID, PASSPORT_ID, LEVEL_ID, IS_EMPLOYEE, IS_ACTIVE, CREATE_DATE, STATUS, DATE_OF_OFFER, TAT_ID, NOMINEE_ID, OFFER_LETTER, UUID, PRO_APPROVAL_ID, PER_APPROVAL_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, PROFILE_ID, EDUCATION_ID, EXPERIENCE_ID, PERSONAL_ID, FINANCIAL_ID, PASSPORT_ID, LEVEL_ID, IS_EMPLOYEE, IS_ACTIVE, CREATE_DATE, STATUS, DATE_OF_OFFER, TAT_ID, NOMINEE_ID, OFFER_LETTER, UUID, PRO_APPROVAL_ID, PER_APPROVAL_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, PROFILE_ID = ?, EDUCATION_ID = ?, EXPERIENCE_ID = ?, PERSONAL_ID = ?, FINANCIAL_ID = ?, PASSPORT_ID = ?, LEVEL_ID = ?, IS_EMPLOYEE = ?, IS_ACTIVE = ?, CREATE_DATE = ?, STATUS = ?, DATE_OF_OFFER = ?, TAT_ID = ?, NOMINEE_ID = ?, OFFER_LETTER = ?, UUID = ?, PRO_APPROVAL_ID = ?, PER_APPROVAL_ID = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column PROFILE_ID
	 */
	protected static final int COLUMN_PROFILE_ID = 2;

	/** 
	 * Index of column EDUCATION_ID
	 */
	protected static final int COLUMN_EDUCATION_ID = 3;

	/** 
	 * Index of column EXPERIENCE_ID
	 */
	protected static final int COLUMN_EXPERIENCE_ID = 4;

	/** 
	 * Index of column PERSONAL_ID
	 */
	protected static final int COLUMN_PERSONAL_ID = 5;

	/** 
	 * Index of column FINANCIAL_ID
	 */
	protected static final int COLUMN_FINANCIAL_ID = 6;

	/** 
	 * Index of column PASSPORT_ID
	 */
	protected static final int COLUMN_PASSPORT_ID = 7;

	/** 
	 * Index of column LEVEL_ID
	 */
	protected static final int COLUMN_LEVEL_ID = 8;

	/** 
	 * Index of column IS_EMPLOYEE
	 */
	protected static final int COLUMN_IS_EMPLOYEE = 9;

	/** 
	 * Index of column IS_ACTIVE
	 */
	protected static final int COLUMN_IS_ACTIVE = 10;

	/** 
	 * Index of column CREATE_DATE
	 */
	protected static final int COLUMN_CREATE_DATE = 11;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 12;

	/** 
	 * Index of column DATE_OF_OFFER
	 */
	protected static final int COLUMN_DATE_OF_OFFER = 13;

	/** 
	 * Index of column TAT_ID
	 */
	protected static final int COLUMN_TAT_ID = 14;

	/** 
	 * Index of column NOMINEE_ID
	 */
	protected static final int COLUMN_NOMINEE_ID = 15;

	/** 
	 * Index of column OFFER_LETTER
	 */
	protected static final int COLUMN_OFFER_LETTER = 16;

	/** 
	 * Index of column UUID
	 */
	protected static final int COLUMN_UUID = 17;

	/** 
	 * Index of column PRO_APPROVAL_ID
	 */
	protected static final int COLUMN_PRO_APPROVAL_ID = 18;

	/** 
	 * Index of column PER_APPROVAL_ID
	 */
	protected static final int COLUMN_PER_APPROVAL_ID = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the CANDIDATE table.
	 */
	public CandidatePk insert(Candidate dto) throws CandidateDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isProfileIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProfileId() );
			}
		
			if (dto.isEducationIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEducationId() );
			}
		
			if (dto.isExperienceIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getExperienceId() );
			}
		
			if (dto.isPersonalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPersonalId() );
			}
		
			if (dto.isFinancialIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFinancialId() );
			}
		
			if (dto.isPassportIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPassportId() );
			}
		
			if (dto.isLevelIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLevelId() );
			}
		
			stmt.setShort( index++, dto.getIsEmployee() );
			stmt.setShort( index++, dto.getIsActive() );
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			stmt.setDate(index++, dto.getDateOfOffer()==null ? null : new java.sql.Date( dto.getDateOfOffer().getTime() ) );
			if (dto.isTatIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getTatId() );
			}
		
			if (dto.isNomineeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNomineeId() );
			}
		
			stmt.setString( index++, dto.getOfferLetter() );
			stmt.setString( index++, dto.getUuid() );
			if (dto.isProApprovalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProApprovalId() );
			}
		
			if (dto.isPerApprovalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPerApprovalId() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CandidateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CANDIDATE table.
	 */
	public void update(CandidatePk pk, Candidate dto) throws CandidateDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isProfileIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProfileId() );
			}
		
			if (dto.isEducationIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEducationId() );
			}
		
			if (dto.isExperienceIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getExperienceId() );
			}
		
			if (dto.isPersonalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPersonalId() );
			}
		
			if (dto.isFinancialIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getFinancialId() );
			}
		
			if (dto.isPassportIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPassportId() );
			}
		
			if (dto.isLevelIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getLevelId() );
			}
		
			stmt.setShort( index++, dto.getIsEmployee() );
			stmt.setShort( index++, dto.getIsActive() );
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			stmt.setDate(index++, dto.getDateOfOffer()==null ? null : new java.sql.Date( dto.getDateOfOffer().getTime() ) );
			if (dto.isTatIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getTatId() );
			}
		
			if (dto.isNomineeIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getNomineeId() );
			}
		
			stmt.setString( index++, dto.getOfferLetter() );
			stmt.setString( index++, dto.getUuid() );
			if (dto.isProApprovalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProApprovalId() );
			}
		
			if (dto.isPerApprovalIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPerApprovalId() );
			}
		
			stmt.setInt( 20, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CandidateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CANDIDATE table.
	 */
	public void delete(CandidatePk pk) throws CandidateDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CandidateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CANDIDATE table that matches the specified primary-key value.
	 */
	public Candidate findByPrimaryKey(CandidatePk pk) throws CandidateDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'ID = :id'.
	 */
	public Candidate findByPrimaryKey(int id) throws CandidateDaoException
	{
		Candidate ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria ''.
	 */
	public Candidate[] findAll() throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'ID = :id'.
	 */
	public Candidate[] findWhereIdEquals(int id) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PROFILE_ID = :profileId'.
	 */
	public Candidate[] findWhereProfileIdEquals(int profileId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROFILE_ID = ? ORDER BY PROFILE_ID", new Object[] {  new Integer(profileId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'EDUCATION_ID = :educationId'.
	 */
	public Candidate[] findWhereEducationIdEquals(int educationId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EDUCATION_ID = ? ORDER BY EDUCATION_ID", new Object[] {  new Integer(educationId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public Candidate[] findWhereExperienceIdEquals(int experienceId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPERIENCE_ID = ? ORDER BY EXPERIENCE_ID", new Object[] {  new Integer(experienceId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PERSONAL_ID = :personalId'.
	 */
	public Candidate[] findWherePersonalIdEquals(int personalId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERSONAL_ID = ? ORDER BY PERSONAL_ID", new Object[] {  new Integer(personalId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'FINANCIAL_ID = :financialId'.
	 */
	public Candidate[] findWhereFinancialIdEquals(int financialId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FINANCIAL_ID = ? ORDER BY FINANCIAL_ID", new Object[] {  new Integer(financialId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Candidate[] findWherePassportIdEquals(int passportId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSPORT_ID = ? ORDER BY PASSPORT_ID", new Object[] {  new Integer(passportId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public Candidate[] findWhereLevelIdEquals(int levelId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LEVEL_ID = ? ORDER BY LEVEL_ID", new Object[] {  new Integer(levelId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'IS_EMPLOYEE = :isEmployee'.
	 */
	public Candidate[] findWhereIsEmployeeEquals(short isEmployee) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_EMPLOYEE = ? ORDER BY IS_EMPLOYEE", new Object[] {  new Short(isEmployee) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'IS_ACTIVE = :isActive'.
	 */
	public Candidate[] findWhereIsActiveEquals(short isActive) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IS_ACTIVE = ? ORDER BY IS_ACTIVE", new Object[] {  new Short(isActive) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Candidate[] findWhereCreateDateEquals(Date createDate) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate==null ? null : new java.sql.Timestamp( createDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'STATUS = :status'.
	 */
	public Candidate[] findWhereStatusEquals(int status) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] {  new Integer(status) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'DATE_OF_OFFER = :dateOfOffer'.
	 */
	public Candidate[] findWhereDateOfOfferEquals(Date dateOfOffer) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATE_OF_OFFER = ? ORDER BY DATE_OF_OFFER", new Object[] { dateOfOffer==null ? null : new java.sql.Date( dateOfOffer.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'TAT_ID = :tatId'.
	 */
	public Candidate[] findWhereTatIdEquals(int tatId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TAT_ID = ? ORDER BY TAT_ID", new Object[] {  new Integer(tatId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'NOMINEE_ID = :nomineeId'.
	 */
	public Candidate[] findWhereNomineeIdEquals(int nomineeId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMINEE_ID = ? ORDER BY NOMINEE_ID", new Object[] {  new Integer(nomineeId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'OFFER_LETTER = :offerLetter'.
	 */
	public Candidate[] findWhereOfferLetterEquals(String offerLetter) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OFFER_LETTER = ? ORDER BY OFFER_LETTER", new Object[] { offerLetter } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'UUID = :uuid'.
	 */
	public Candidate[] findWhereUuidEquals(String uuid) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UUID = ? ORDER BY UUID", new Object[] { uuid } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PRO_APPROVAL_ID = :proApprovalId'.
	 */
	public Candidate[] findWhereProApprovalIdEquals(int proApprovalId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRO_APPROVAL_ID = ? ORDER BY PRO_APPROVAL_ID", new Object[] {  new Integer(proApprovalId) } );
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PER_APPROVAL_ID = :perApprovalId'.
	 */
	public Candidate[] findWherePerApprovalIdEquals(int perApprovalId) throws CandidateDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PER_APPROVAL_ID = ? ORDER BY PER_APPROVAL_ID", new Object[] {  new Integer(perApprovalId) } );
	}

	/**
	 * Method 'CandidateDaoImpl'
	 * 
	 */
	public CandidateDaoImpl()
	{
	}

	/**
	 * Method 'CandidateDaoImpl'
	 * 
	 * @param userConn
	 */
	public CandidateDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CANDIDATE";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Candidate fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Candidate dto = new Candidate();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Candidate[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Candidate> resultList = new ArrayList<Candidate>();
		while (rs.next()) {
			Candidate dto = new Candidate();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Candidate ret[] = new Candidate[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Candidate dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setProfileId( rs.getInt( COLUMN_PROFILE_ID ) );
		if (rs.wasNull()) {
			dto.setProfileIdNull( true );
		}
		
		dto.setEducationId( rs.getInt( COLUMN_EDUCATION_ID ) );
		if (rs.wasNull()) {
			dto.setEducationIdNull( true );
		}
		
		dto.setExperienceId( rs.getInt( COLUMN_EXPERIENCE_ID ) );
		if (rs.wasNull()) {
			dto.setExperienceIdNull( true );
		}
		
		dto.setPersonalId( rs.getInt( COLUMN_PERSONAL_ID ) );
		if (rs.wasNull()) {
			dto.setPersonalIdNull( true );
		}
		
		dto.setFinancialId( rs.getInt( COLUMN_FINANCIAL_ID ) );
		if (rs.wasNull()) {
			dto.setFinancialIdNull( true );
		}
		
		dto.setPassportId( rs.getInt( COLUMN_PASSPORT_ID ) );
		if (rs.wasNull()) {
			dto.setPassportIdNull( true );
		}
		
		dto.setLevelId( rs.getInt( COLUMN_LEVEL_ID ) );
		if (rs.wasNull()) {
			dto.setLevelIdNull( true );
		}
		
		dto.setIsEmployee( rs.getShort( COLUMN_IS_EMPLOYEE ) );
		dto.setIsActive( rs.getShort( COLUMN_IS_ACTIVE ) );
		dto.setCreateDate( rs.getTimestamp(COLUMN_CREATE_DATE ) );
		dto.setStatus( rs.getInt( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
		dto.setDateOfOffer( rs.getDate(COLUMN_DATE_OF_OFFER ) );
		dto.setTatId( rs.getInt( COLUMN_TAT_ID ) );
		if (rs.wasNull()) {
			dto.setTatIdNull( true );
		}
		
		dto.setNomineeId( rs.getInt( COLUMN_NOMINEE_ID ) );
		if (rs.wasNull()) {
			dto.setNomineeIdNull( true );
		}
		
		dto.setOfferLetter( rs.getString( COLUMN_OFFER_LETTER ) );
		dto.setUuid( rs.getString( COLUMN_UUID ) );
		dto.setProApprovalId( rs.getInt( COLUMN_PRO_APPROVAL_ID ) );
		if (rs.wasNull()) {
			dto.setProApprovalIdNull( true );
		}
		
		dto.setPerApprovalId( rs.getInt( COLUMN_PER_APPROVAL_ID ) );
		if (rs.wasNull()) {
			dto.setPerApprovalIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Candidate dto)
	{
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the specified arbitrary SQL statement
	 */
	public Candidate[] findByDynamicSelect(String sql, Object[] sqlParams) throws CandidateDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CandidateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CANDIDATE table that match the specified arbitrary SQL statement
	 */
	public Candidate[] findByDynamicWhere(String sql, Object[] sqlParams) throws CandidateDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CandidateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
