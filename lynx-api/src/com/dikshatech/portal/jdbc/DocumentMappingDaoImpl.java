/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.log4j.Logger;

import com.dikshatech.beans.SalaryReportBean;
import com.dikshatech.portal.dao.DocumentMappingDao;
import com.dikshatech.portal.dto.DocumentMapping;
import com.dikshatech.portal.dto.DocumentMappingPk;
import com.dikshatech.portal.exceptions.DocumentMappingDaoException;
import com.dikshatech.portal.exceptions.SalaryReconciliationReportDaoException;

public class DocumentMappingDaoImpl extends AbstractDAO implements DocumentMappingDao {

	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	protected static final Logger	logger					= Logger.getLogger(DocumentMappingDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT				= "SELECT ID, DOCUMENT_ID, EXPERIENCE_ID, EDUCATION_ID, PASSPORT_ID, FINANCE_ID,BACKGROUND_VERI_ID,USER_SEPRATION_ID FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT				= "INSERT INTO " + getTableName() + " ( ID, DOCUMENT_ID, EXPERIENCE_ID, EDUCATION_ID, PASSPORT_ID, FINANCE_ID,BACKGROUND_VERI_ID,USER_SEPRATION_ID ) VALUES ( ?, ?, ?,?,?, ?, ?, ? )";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE				= "UPDATE " + getTableName() + " SET ID = ?, DOCUMENT_ID = ?, EXPERIENCE_ID = ?, EDUCATION_ID = ?, PASSPORT_ID = ?, FINANCE_ID = ?,BACKGROUND_VERI_ID=?,USER_SEPRATION_ID=? WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE				= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID				= 1;
	/**
	 * Index of column DOCUMENT_ID
	 */
	protected static final int		COLUMN_DOCUMENT_ID		= 2;
	/**
	 * Index of column EXPERIENCE_ID
	 */
	protected static final int		COLUMN_EXPERIENCE_ID	= 3;
	/**
	 * Index of column EDUCATION_ID
	 */
	protected static final int		COLUMN_EDUCATION_ID		= 4;
	/**
	 * Index of column PASSPORT_ID
	 */
	protected static final int		COLUMN_PASSPORT_ID		= 5;
	/**
	 * Index of column FINANCE_ID
	 */
	protected static final int		COLUMN_FINANCE_ID		= 6;
	
	protected static final int		COLUMN_BACKGROUND_VERI_ID		= 7;
	
	protected static final int		USER_SEPRATION_ID		= 8;
	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS		= 8;
	/**
	 * Index of primary-key column ID
	 */
	
	protected static final int		PK_COLUMN_ID			= 1;

	/**
	 * Inserts a new row in the DOCUMENT_MAPPING table.
	 */
	public DocumentMappingPk insert(DocumentMapping dto) throws DocumentMappingDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isDocumentIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getDocumentId());
			}
			if (dto.isExperienceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getExperienceId());
			}
			if (dto.isEducationIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getEducationId());
			}
			if (dto.isPassportIdNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getPassportId());
			}
			if (dto.isFinanceIdNull()) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getFinanceId());
			}
			if (dto.getBackGroundVerificationId() == 0) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setNull(index++, dto.getBackGroundVerificationId());
			}
			if (dto.getUserSeprationId() == 0) {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else {
				stmt.setInt(index++, dto.getUserSeprationId());
			}
			if (logger.isDebugEnabled()) {
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the DOCUMENT_MAPPING table.
	 */
	public void update(DocumentMappingPk pk, DocumentMapping dto) throws DocumentMappingDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getId());
			if (dto.isDocumentIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getDocumentId());
			}
			if (dto.isExperienceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getExperienceId());
			}
			if (dto.isEducationIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getEducationId());
			}
			if (dto.isPassportIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getPassportId());
			}
			if (dto.isFinanceIdNull()){
				stmt.setNull(index++, java.sql.Types.INTEGER);
			} else{
				stmt.setInt(index++, dto.getFinanceId());
			}
			stmt.setInt(index++, 0);
			stmt.setInt(index++, dto.getUserSeprationId());
			
			stmt.setInt(9, pk.getId());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the DOCUMENT_MAPPING table.
	 */
	public void delete(DocumentMappingPk pk) throws DocumentMappingDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * @author gurunath.rokkam
	 *         Updates multipule row in the DOCUMENT_MAPPING table.
	 */
	public int update(String sql) throws DocumentMappingDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		int rows = 0;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + sql);
			}
			stmt = conn.prepareStatement(sql);
			rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return rows;
	}

	/**
	 * Returns the rows from the DOCUMENT_MAPPING table that matches the specified primary-key value.
	 */
	public DocumentMapping findByPrimaryKey(DocumentMappingPk pk) throws DocumentMappingDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public DocumentMapping findByPrimaryKey(int id) throws DocumentMappingDaoException {
		DocumentMapping ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria ''.
	 */
	public DocumentMapping[] findAll() throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY ID", null);
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'DOCUMENT_ID = :documentId'.
	 */
	public DocumentMapping[] findByDocuments(int documentId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DOCUMENT_ID = ?", new Object[] { new Integer(documentId) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public DocumentMapping[] findWhereIdEquals(int id) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] { new Integer(id) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'DOCUMENT_ID = :documentId'.
	 */
	public DocumentMapping[] findWhereDocumentIdEquals(int documentId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE DOCUMENT_ID = ? ORDER BY DOCUMENT_ID", new Object[] { new Integer(documentId) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public DocumentMapping[] findWhereExperienceIdEquals(int experienceId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EXPERIENCE_ID = ? ORDER BY EXPERIENCE_ID", new Object[] { new Integer(experienceId) });
	}
	
	public DocumentMapping[] findWhereBackGroudVeriId(int backGroundVeri) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE BACKGROUND_VERI_ID = ? ORDER BY BACKGROUND_VERI_ID", new Object[] { new Integer(backGroundVeri) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'EDUCATION_ID = :educationId'.
	 */
	public DocumentMapping[] findWhereEducationIdEquals(int educationId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE EDUCATION_ID = ? ORDER BY EDUCATION_ID", new Object[] { new Integer(educationId) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public DocumentMapping[] findWherePassportIdEquals(int passportId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PASSPORT_ID = ? ORDER BY PASSPORT_ID", new Object[] { new Integer(passportId) });
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'FINANCE_ID = :financeId'.
	 */
	public DocumentMapping[] findWhereFinanceIdEquals(int financeId) throws DocumentMappingDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE FINANCE_ID = ? ORDER BY FINANCE_ID", new Object[] { new Integer(financeId) });
	}

	/**
	 * Method 'DocumentMappingDaoImpl'
	 */
	public DocumentMappingDaoImpl() {}

	/**
	 * Method 'DocumentMappingDaoImpl'
	 * 
	 * @param userConn
	 */
	public DocumentMappingDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "DOCUMENT_MAPPING";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected DocumentMapping fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			DocumentMapping dto = new DocumentMapping();
			populateDto(dto, rs);
			return dto;
		}
		return null;
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected DocumentMapping[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<DocumentMapping> resultList = new ArrayList<DocumentMapping>();
		while (rs.next()){
			DocumentMapping dto = new DocumentMapping();
			populateDto(dto, rs);
			resultList.add(dto);
		}
		DocumentMapping ret[] = new DocumentMapping[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(DocumentMapping dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setDocumentId(rs.getInt(COLUMN_DOCUMENT_ID));
		if (rs.wasNull()){
			dto.setDocumentIdNull(true);
		}
		dto.setExperienceId(rs.getInt(COLUMN_EXPERIENCE_ID));
		if (rs.wasNull()){
			dto.setExperienceIdNull(true);
		}
		dto.setEducationId(rs.getInt(COLUMN_EDUCATION_ID));
		if (rs.wasNull()){
			dto.setEducationIdNull(true);
		}
		dto.setPassportId(rs.getInt(COLUMN_PASSPORT_ID));
		if (rs.wasNull()){
			dto.setPassportIdNull(true);
		}
		dto.setFinanceId(rs.getInt(COLUMN_FINANCE_ID));
		if (rs.wasNull()){
			dto.setFinanceIdNull(true);
		}
		dto.setBackGroundVerificationId(rs.getInt(COLUMN_BACKGROUND_VERI_ID));
		if (rs.wasNull()){
			dto.setBackGroundVerificationId(0);
		}
		
		dto.setUserSeprationId(rs.getInt(USER_SEPRATION_ID));
		if (rs.wasNull()){
			dto.setUserSeprationId(0);
		}
	}
	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(DocumentMapping dto) {}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public DocumentMapping[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocumentMappingDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the DOCUMENT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public DocumentMapping[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocumentMappingDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public String updateBackGroundVerivication(int user_id,Integer files_id) throws DocumentMappingDaoException {
		

		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		int bgc_Id = 0;
		String sql1="INSERT INTO BACKGROUND_VERIFICATION ( ID,USER_ID,DOCUMENT_ID) VALUES (?,?,?)";
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(sql1, Statement.RETURN_GENERATED_KEYS);
			
			
			int index = 1;
			int i=3;
			stmt.setInt(index++, 0);
			stmt.setInt(index++, user_id);
			stmt.setInt(index++, files_id);
			
			
			
			//stmt = conn.prepareStatement(sql1);
			
			
			int affectedrow=stmt.executeUpdate();
			
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				
				bgc_Id=rs.getInt(1);
			}
			//return "Successfully updated";
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} 
		
		try{
			String sql="INSERT INTO DOCUMENT_MAPPING ( ID,DOCUMENT_ID,BACKGROUND_VERI_ID) VALUES  (?,?,?)";
			stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, 0);
			stmt.setInt(index++, files_id);
			stmt.setInt(index++, bgc_Id);
			int affectedrow=stmt.executeUpdate();
		}catch(Exception _e){
			
		}
		finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return "successful";
		
		
	
	}
	
	public Integer[] findBackGroundVerivicationId(int user_id) throws DocumentMappingDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<Integer> list = new ArrayList<Integer>();
		Integer backGroundVerificationId = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL ="SELECT * FROM BACKGROUND_VERIFICATION WHERE USER_ID=?";
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			stmt.setObject(1, user_id);
			rs = stmt.executeQuery();
			// fetch the results
			 while(rs.next()){
		         //Retrieve by column name
		         backGroundVerificationId  = rs.getInt("ID");
		         list.add(backGroundVerificationId);

		      }
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return list.toArray(new Integer[list.size()]);
	}
	
	@Override
	public String updateBackGroundVerivicationById(int user_id,Integer files_id,Integer id) throws DocumentMappingDaoException {
		

		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		int bgc_Id = 0;
		String sql1="UPDATE BACKGROUND_VERIFICATION SET USER_ID=?, DOCUMENT_ID=? WHERE ID=?";
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(sql1);
			
			
			int index = 1;
			int i=3;
			stmt.setInt(index++, user_id);
			stmt.setInt(index++, files_id);
			stmt.setInt(index++, id);
		
			int affectedrow=stmt.executeUpdate();
			
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new DocumentMappingDaoException("Exception: " + _e.getMessage(), _e);
		} 
		
		try{
			String sql="INSERT INTO DOCUMENT_MAPPING ( ID,DOCUMENT_ID,BACKGROUND_VERI_ID) VALUES  (?,?,?)";
			stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, 0);
			stmt.setInt(index++, files_id);
			stmt.setInt(index++, id);
			int affectedrow=stmt.executeUpdate();
		}catch(Exception _e){
			
		}
		finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		return "successful";
		
		
	
	}
	@Override
	public DocumentMapping findByUserSepId(int id) throws DocumentMappingDaoException {
		DocumentMapping ret[] = findByDynamicSelect(SQL_SELECT + " WHERE USER_SEPRATION_ID = ?", new Object[] { new Integer(id) });
		return ret.length == 0 ? null : ret[0];
	}
}
