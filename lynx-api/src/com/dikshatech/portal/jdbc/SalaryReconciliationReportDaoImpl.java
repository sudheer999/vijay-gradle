/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.Normalizer.Form;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.common.utils.DesEncrypterDecrypter;
import com.dikshatech.portal.dao.ProfileInfoDao;
import com.dikshatech.portal.dao.SalaryReconciliationReportDao;
import com.dikshatech.portal.dao.TdsDao;
import com.dikshatech.portal.dto.ProfileInfo;
import com.dikshatech.portal.dto.SalaryReconciliation;
import com.dikshatech.portal.dto.SalaryReconciliationReport;
import com.dikshatech.portal.dto.SalaryReconciliationReportPk;
import com.dikshatech.portal.dto.Tds;
import com.dikshatech.portal.exceptions.SalaryReconciliationDaoException;
import com.dikshatech.portal.exceptions.SalaryReconciliationReportDaoException;
import com.dikshatech.portal.factory.ProfileInfoDaoFactory;
import com.dikshatech.portal.factory.SalaryReconciliationDaoFactory;
import com.dikshatech.portal.factory.TdsDaoFactory;
import com.dikshatech.portal.models.FBPModel;

public class SalaryReconciliationReportDaoImpl extends AbstractDAO implements SalaryReconciliationReportDao {



	/**
	 * The factory class for this DAO has two versions of the create() method - one that
	 * takes no arguments and one that takes a Connection argument. If the Connection version
	 * is chosen then the connection will be stored in this attribute and will be used by all
	 * calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection	userConn;
	private static final String		reportingMgrQuery			= "(SELECT CONCAT(RMPF.FIRST_NAME,' ',RMPF.LAST_NAME,'(',RMU.EMP_ID,')') FROM PROFILE_INFO RMPF JOIN USERS RMU ON RMPF.ID=RMU.PROFILE_ID WHERE RMU.ID=(SELECT REPORTING_MGR FROM PROFILE_INFO P JOIN USERS U ON U.PROFILE_ID = P.ID WHERE U.ID=?))";
	public static final String		projectQuery				= "(SELECT NAME FROM PROJECT WHERE ID = (SELECT PROJ_ID FROM ROLL_ON_PROJ_MAP WHERE ROLL_ON_ID =(SELECT MAX(ID) FROM ROLL_ON WHERE EMP_ID=? AND CURRENT=1)))";
	private static final String		clientQuery					= "IFNULL((SELECT C.NAME FROM CLIENT C JOIN PROJ_CLIENT_MAP PCM ON PCM.CLIENT_ID= C.ID JOIN PROJECT_MAPPING P ON  P.PROJECT_ID= PCM.PROJ_ID  WHERE USER_ID=? ORDER BY P.ID DESC LIMIT 0,1),'Diksha')";
	protected static final Logger	logger						= Logger.getLogger(SalaryReconciliationReportDaoImpl.class);
	/**
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String			SQL_SELECT					= "SELECT ID, SR_ID, USER_ID, SALARY, PAYABLE_DAYS, COMMENTS, REPORTING_MANAGER, PROJECT, MODIFIED_BY, MODIFIED_ON, STATUS, ACCOUNT_TYPE,PAID,SALARY_CYCLE,NO_OF_MODIFICATIONS,REASON_FOR_NONPAYMENT,DATE FROM " + getTableName() + "";

	protected final String			SQL_SELECTL					= "SELECT SR.ID, SR.SR_ID, SR.USER_ID, SR.SALARY, SR.PAYABLE_DAYS, SR.COMMENTS, SR.REPORTING_MANAGER, SR.PROJECT, SR.MODIFIED_BY, SR.MODIFIED_ON, SR.STATUS, SR.ACCOUNT_TYPE,SR.PAID,SR.SALARY_CYCLE FROM " + getTableName() + "";
	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int					maxRows;
	/**
	 * SQL INSERT statement for this table
	 */
	protected final String			SQL_INSERT					= "INSERT INTO " + getTableName()  + " ( ID, SR_ID, USER_ID, SALARY, PAYABLE_DAYS, COMMENTS, REPORTING_MANAGER, PROJECT, MODIFIED_BY, MODIFIED_ON, STATUS, ACCOUNT_TYPE,PAID,SALARY_CYCLE ) VALUES ( ?, ?, ?, ?, ?, ?," + reportingMgrQuery + ", " + clientQuery + ", ?, ?, ?, ?,?,?)";
	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String			SQL_UPDATE					= "UPDATE " + getTableName() + " SET ID = ?, SR_ID = ?, USER_ID = ?, SALARY = ?, PAYABLE_DAYS = ?, COMMENTS = ?, REPORTING_MANAGER = ?, PROJECT = ?, MODIFIED_BY = ?, MODIFIED_ON = ?, STATUS = ?, ACCOUNT_TYPE = ? ,PAID=?,SALARY_CYCLE =?,NO_OF_MODIFICATIONS=?,REASON_FOR_NONPAYMENT = ?,DATE = ?  WHERE ID = ?";
	/**
	 * SQL DELETE statement for this table
	 */
	protected final String			SQL_DELETE					= "DELETE FROM " + getTableName() + " WHERE ID = ?";
	/**
	 * Index of column ID
	 */
	protected static final int		COLUMN_ID					= 1;
	/**
	 * Index of column SR_ID
	 */
	protected static final int		COLUMN_SR_ID				= 2;
	/**
	 * Index of column USER_ID
	 */
	protected static final int		COLUMN_USER_ID				= 3;
	/**
	 * Index of column SALARY
	 */
	protected static final int		COLUMN_SALARY				= 4;
	/**
	 * Index of column PAYABLE_DAYS
	 */
	protected static final int		COLUMN_PAYABLE_DAYS			= 5;
	/**
	 * Index of column COMMENTS
	 */
	protected static final int		COLUMN_COMMENTS				= 6;
	/**
	 * Index of column REPORTING_MANAGER
	 */
	protected static final int		COLUMN_REPORTING_MANAGER	= 7;
	/**
	 * Index of column PROJECT
	 */
	protected static final int		COLUMN_PROJECT				= 8;
	/**
	 * Index of column MODIFIED_BY
	 */
	protected static final int		COLUMN_MODIFIED_BY			= 9;
	/**
	 * Index of column MODIFIED_ON
	 */
	protected static final int		COLUMN_MODIFIED_ON			= 10;
	protected static final int		COLUMN_STATUS				= 11;
	protected static final int		COLUMN_ACCOUNT_TYPE			= 12;
	protected static final int		COLUMN_PAID			        = 13;
	protected static final int		COLUMN_SALARY_CYCLE		    = 14;
	protected static final int		COLUMN_NO_OF_MODIFICATIONS	= 15;
	protected static final int		COLUMN_REASON_FOR_NONPAYMENT			        = 16;
	protected static final int		COLUMN_DATE		        = 17;
	
	

	/**
	 * Number of columns
	 */
	protected static final int		NUMBER_OF_COLUMNS			= 17;
	/**
	 * Index of primary-key column ID
	 */
	protected static final int		PK_COLUMN_ID				= 1;

	/**
	 * Inserts a new row in the salary_reconciliation_report table.
	 */
	public SalaryReconciliationReportPk insert(SalaryReconciliationReport dto) throws SalaryReconciliationReportDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setDouble(index++, dto.getId());
			stmt.setInt(index++, dto.getSrId());
			stmt.setInt(index++, dto.getUserId());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getSalary()));
			stmt.setDouble(index++, dto.getPayableDays());
			stmt.setString(index++, dto.getComments());
			stmt.setInt(index++, dto.getUserId());// for getting reporting manager from user id
			stmt.setInt(index++, dto.getUserId());// for getting project for user.
			stmt.setString(index++, dto.getModifiedBy());
			stmt.setTimestamp(index++, dto.getModifiedOn() == null ? null : new java.sql.Timestamp(dto.getModifiedOn().getTime()));
			stmt.setShort(index++, dto.getStatus());
			stmt.setShort(index++, dto.getAccountType());
			stmt.setString(index++, dto.getPaid());
			stmt.setString(index++, dto.getSalaryCycle());
		/*	stmt.setString(index++,dto.getNo_of_modifications());
			stmt.setString(index++, dto.getReason());
			stmt.setString(index++, dto.getDate().toString());*/
			
			

			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto);
			}
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()){
				dto.setId(rs.getInt(1));
			}
			reset(dto);
			return dto.createPk();
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Updates a single row in the salary_reconciliation_report table.
	 */
	public void update(SalaryReconciliationReportPk pk, SalaryReconciliationReport dto) throws SalaryReconciliationReportDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setDouble(index++, dto.getId());
			stmt.setInt(index++, dto.getSrId());
			stmt.setInt(index++, dto.getUserId());
			stmt.setString(index++, DesEncrypterDecrypter.getInstance().encrypt(dto.getSalary()));
			stmt.setDouble(index++, dto.getPayableDays());
			stmt.setString(index++, dto.getComments());
			stmt.setString(index++, dto.getReportingManager());
			stmt.setString(index++, dto.getProject());
			stmt.setString(index++, dto.getModifiedBy());
			stmt.setTimestamp(index++, dto.getModifiedOn() == null ? null : new java.sql.Timestamp(dto.getModifiedOn().getTime()));
			stmt.setShort(index++, dto.getStatus());
			stmt.setShort(index++, dto.getAccountType());
			stmt.setString(index++, dto.getPaid());
			stmt.setString(index++, dto.getSalaryCycle());
			stmt.setString(index++, dto.getNo_of_modifications());
			stmt.setString(index++, dto.getReason());
			stmt.setString(index++, dto.getDate());
		
			
			stmt.setLong(index++, pk.getId());


		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Deletes a single row in the salary_reconciliation_report table.
	 */
	public void delete(SalaryReconciliationReportPk pk) throws SalaryReconciliationReportDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_DELETE + " with PK: " + pk);
			}
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setDouble(1, pk.getId());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()){
				logger.debug(rows + " rows affected (" + (t2 - t1) + " ms)");
			}
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns the rows from the salary_reconciliation_report table that matches the specified primary-key value.
	 */
	public SalaryReconciliationReport findByPrimaryKey(SalaryReconciliationReportPk pk) throws SalaryReconciliationReportDaoException {
		return findByPrimaryKey(pk.getId());
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'ID = :id'.
	 */
	public SalaryReconciliationReport findByPrimaryKey(long id) throws SalaryReconciliationReportDaoException {
		SalaryReconciliationReport ret[] = findByDynamicSelect(SQL_SELECT + " WHERE ID = ?  ORDER BY MODIFIED_ON DESC", new Object[] { new Double(id) });
		return ret.length == 0 ? null : ret[0];
	}
	
	
	public SalaryReconciliationReport findByPrimaryKeyTds(long id) throws SalaryReconciliationReportDaoException {
		SalaryReconciliationReport ret[] = findByDynamicSelectt(SQL_SELECT + " WHERE ID = ?  ORDER BY MODIFIED_ON DESC", new Object[] { new Double(id) });
		return ret.length == 0 ? null : ret[0];
	}
	
	
	
	 				 
	/*public SalaryReconciliationReport[] findByLeave(long id) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelectLeave("SELECT SR.ID, SR.SR_ID, SR.USER_ID, SR.SALARY, SR.PAYABLE_DAYS, SR.COMMENTS, SR.REPORTING_MANAGER, SR.PROJECT, SR.MODIFIED_BY, SR.MODIFIED_ON, SR.STATUS, SR.ACCOUNT_TYPE,SR.PAID,SR.SALARY_CYCLE,LB.LWP FROM SALARY_RECONCILIATION_REPORT SR  LEFT JOIN  LEAVE_BALANCE LB ON LB.USER_ID = SR.USER_ID"+ " WHERE ID = ?  ORDER BY MODIFIED_ON DESC", new Object[] { new Double(id) });
		
	}*/

	

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria ''.
	 */
	public SalaryReconciliationReport[] findAll() throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY MODIFIED_ON DESC", null);
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'ID = :id'.
	 */
	public SalaryReconciliationReport[] findWhereIdEquals(Double id) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE ID = ? ORDER BY MODIFIED_ON DESC", new Object[] { id });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'SR_ID = :srId'.
	 */
	public SalaryReconciliationReport[] findWhereSrIdEquals(Integer srId) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SR_ID = ? ORDER BY MODIFIED_ON DESC", new Object[] { srId });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'USER_ID = :userId'.
	 */
	public SalaryReconciliationReport[] findWhereUserIdEquals(Integer userId) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE USER_ID = ? ORDER BY MODIFIED_ON DESC", new Object[] { userId });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'SALARY = :salary'.
	 */
	public SalaryReconciliationReport[] findWhereSalaryEquals(String salary) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE SALARY = ? ORDER BY MODIFIED_ON DESC", new Object[] { salary });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'PAYABLE_DAYS = :payableDays'.
	 */
	public SalaryReconciliationReport[] findWherePayableDaysEquals(Integer payableDays) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PAYABLE_DAYS = ? ORDER BY MODIFIED_ON DESC", new Object[] { payableDays });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'COMMENTS = :comments'.
	 */
	public SalaryReconciliationReport[] findWhereCommentsEquals(String comments) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE COMMENTS = ? ORDER BY MODIFIED_ON DESC", new Object[] { comments });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'REPORTING_MANAGER = :reportingManager'.
	 */
	public SalaryReconciliationReport[] findWhereReportingManagerEquals(String reportingManager) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE REPORTING_MANAGER = ? ORDER BY MODIFIED_ON DESC", new Object[] { reportingManager });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'PROJECT = :project'.
	 */
	public SalaryReconciliationReport[] findWhereProjectEquals(String project) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE PROJECT = ? ORDER BY MODIFIED_ON DESC", new Object[] { project });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'MODIFIED_BY = :modifiedBy'.
	 */
	public SalaryReconciliationReport[] findWhereModifiedByEquals(String modifiedBy) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MODIFIED_BY = ? ORDER BY MODIFIED_ON DESC", new Object[] { modifiedBy });
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'MODIFIED_ON = :modifiedOn'.
	 */
	public SalaryReconciliationReport[] findWhereModifiedOnEquals(Date modifiedOn) throws SalaryReconciliationReportDaoException {
		return findByDynamicSelect(SQL_SELECT + " WHERE MODIFIED_ON = ? ORDER BY MODIFIED_ON DESC", new Object[] { modifiedOn == null ? null : new java.sql.Timestamp(modifiedOn.getTime()) });
	}

	/**
	 * Method 'SalaryReconciliationReportDaoImpl'
	 */
	public SalaryReconciliationReportDaoImpl() {}

	/**
	 * Method 'SalaryReconciliationReportDaoImpl'
	 * 
	 * @param userConn
	 */
	public SalaryReconciliationReportDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "SALARY_RECONCILIATION_REPORT";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected SalaryReconciliationReport fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()){
			SalaryReconciliationReport dto = new SalaryReconciliationReport();
			populateDto(dto, rs);
			return dto;
		} else{
			return null;
		}
	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected SalaryReconciliationReport[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
		while (rs.next()){
			SalaryReconciliationReport dto = new SalaryReconciliationReport();
		
			populateDto(dto, rs);
			resultList.add(dto);
		}
		SalaryReconciliationReport ret[] = new SalaryReconciliationReport[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}
	
	protected SalaryReconciliationReport[] fetchMultiResultsSal(ResultSet rs) throws SQLException {
		Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
		while (rs.next()){
			SalaryReconciliationReport dto = new SalaryReconciliationReport();
		
			populateDtoSal(dto, rs);
			resultList.add(dto);
		}
		SalaryReconciliationReport[] ret = new SalaryReconciliationReport[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SalaryReconciliationReport dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setSrId(rs.getInt(COLUMN_SR_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
//		String sal = (new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)))));
	float	sal = (float) Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)));
		try{
			float tdsAmt = 0;
			float finalSal  = 0;
			
//			String monthIdT = FBPModel.getMonthId();
			SalaryReconciliation reconciliation = null;
			try {
				reconciliation = SalaryReconciliationDaoFactory.create().findByPrimaryKey(dto.getSrId());
			} catch (SalaryReconciliationDaoException e1) {
				e1.printStackTrace();
			}
			String month = reconciliation.getMonth().toString();
			if(reconciliation.getMonth() < 10) {
				month = "0"+month;
			}
			String monthIdT =  reconciliation.getYear().toString() + month; 
			TdsDao tdsdao = TdsDaoFactory.create();
		
               Tds[]tds = tdsdao.findByStatus( " USERID = ? AND MONTH_ID = ? ", new Object[] { dto.getUserId(), monthIdT });
				
				for(Tds t:tds)
				{
			     tdsAmt=   Float.valueOf(t.getAmount());
			     finalSal= sal-tdsAmt;
				}
			dto.setSalary(String.valueOf(finalSal));
		} catch (Exception e){}
		dto.setPayableDays(rs.getDouble(COLUMN_PAYABLE_DAYS));
		dto.setComments(rs.getString(COLUMN_COMMENTS));
		dto.setReportingManager(rs.getString(COLUMN_REPORTING_MANAGER));
		dto.setProject(rs.getString(COLUMN_PROJECT));
		dto.setModifiedBy(rs.getString(COLUMN_MODIFIED_BY));
	//	dto.setModifiedOn(rs.getTimestamp(COLUMN_MODIFIED_ON));
		dto.setModifiedOn(rs.getDate(COLUMN_MODIFIED_ON));
		dto.setStatus(rs.getShort(COLUMN_STATUS));
		dto.setAccountType(rs.getShort(COLUMN_ACCOUNT_TYPE));
		dto.setPaid(rs.getString(COLUMN_PAID));
		dto.setSalaryCycle(rs.getString(COLUMN_SALARY_CYCLE));
		dto.setNo_of_modifications(rs.getString(COLUMN_NO_OF_MODIFICATIONS));

		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setEmpName(rs.getString("NAME"));
				dto.setEmpId(rs.getInt("EMP_ID") + "");
			} catch (Exception e){}
		}
		/*dto.setDeptName(rs.getString("DEPT_NAME"));*/
	}
	protected void populateDtoSal(SalaryReconciliationReport dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setSrId(rs.getInt(COLUMN_SR_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
		
			dto.setSalary(String.valueOf(COLUMN_SALARY));
		
		dto.setPayableDays(rs.getDouble(COLUMN_PAYABLE_DAYS));
		dto.setComments(rs.getString(COLUMN_COMMENTS));
		dto.setReportingManager(rs.getString(COLUMN_REPORTING_MANAGER));
		dto.setProject(rs.getString(COLUMN_PROJECT));
		dto.setModifiedBy(rs.getString(COLUMN_MODIFIED_BY));
	//	dto.setModifiedOn(rs.getTimestamp(COLUMN_MODIFIED_ON));
		dto.setModifiedOn(rs.getDate(COLUMN_MODIFIED_ON));
		dto.setStatus(rs.getShort(COLUMN_STATUS));
		dto.setAccountType(rs.getShort(COLUMN_ACCOUNT_TYPE));
		dto.setPaid(rs.getString(COLUMN_PAID));
		dto.setSalaryCycle(rs.getString(COLUMN_SALARY_CYCLE));
		dto.setNo_of_modifications(rs.getString(COLUMN_NO_OF_MODIFICATIONS));

		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setEmpName(rs.getString("NAME"));
				dto.setEmpId(rs.getInt("EMP_ID") + "");
			} catch (Exception e){}
		}
		/*dto.setDeptName(rs.getString("DEPT_NAME"));*/
	}
	
	
	protected void populateDto1(SalaryReconciliationReport dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setSrId(rs.getInt(COLUMN_SR_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
	//	 sal = (new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)))));
		float	sal = (float) Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)));
		try{
			float tdsAmt = 0;
			float finalSal  = 0;
		
	//		String monthIdT = FBPModel.getMonthId();
			SalaryReconciliation reconciliation = null;
			try {
				reconciliation = SalaryReconciliationDaoFactory.create().findByPrimaryKey(dto.getSrId());
			} catch (SalaryReconciliationDaoException e1) {
				e1.printStackTrace();
			}
			String month = reconciliation.getMonth().toString();
			if(reconciliation.getMonth() < 10) {
				month = "0"+month;
			}
			String monthIdT =  reconciliation.getYear().toString() + month; 
			
			
			
			
			TdsDao tdsdao = TdsDaoFactory.create();
		
               Tds[]tds = tdsdao.findByStatus( " USERID = ? AND MONTH_ID = ? ", new Object[] { dto.getUserId(), monthIdT });
				
				for(Tds t:tds)
				{
			     tdsAmt=   Float.valueOf(t.getAmount());
			     finalSal= sal-tdsAmt;
				}
			dto.setSalary(String.valueOf(finalSal));
		} catch (Exception e){}
		dto.setPayableDays(rs.getDouble(COLUMN_PAYABLE_DAYS));
		dto.setComments(rs.getString(COLUMN_COMMENTS));
		dto.setReportingManager(rs.getString(COLUMN_REPORTING_MANAGER));
		dto.setProject(rs.getString(COLUMN_PROJECT));
		dto.setModifiedBy(rs.getString(COLUMN_MODIFIED_BY));
	//	dto.setModifiedOn(rs.getTimestamp(COLUMN_MODIFIED_ON));
		dto.setModifiedOn(rs.getDate(COLUMN_MODIFIED_ON));
		dto.setStatus(rs.getShort(COLUMN_STATUS));
		dto.setAccountType(rs.getShort(COLUMN_ACCOUNT_TYPE));

		if(rs.getString(COLUMN_PAID)==null||dto.getPaid() =="")
		{
			dto.setPaid("un paid");
		}
		else
		{
			dto.setPaid(rs.getString(COLUMN_PAID));
		}

		dto.setSalaryCycle(rs.getString(COLUMN_SALARY_CYCLE));
		dto.setNo_of_modifications(rs.getString(COLUMN_NO_OF_MODIFICATIONS));
		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setEmpName(rs.getString("NAME"));
				dto.setEmpId(rs.getInt("EMP_ID") + "");
			} catch (Exception e){}
		}
		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setDeptName(rs.getString("DEPT_NAME"));
			
			} catch (Exception e){}
			
		}
		dto.setReason(rs.getString(COLUMN_REASON_FOR_NONPAYMENT));
		
		dto.setDate(rs.getString(COLUMN_DATE));
		
		
		
		
	}
	protected void populateDtoAmount(SalaryReconciliationReport dto, ResultSet rs) throws SQLException {
		dto.setId(rs.getInt(COLUMN_ID));
		dto.setSrId(rs.getInt(COLUMN_SR_ID));
		dto.setUserId(rs.getInt(COLUMN_USER_ID));
	//	String sal = (new DecimalFormat("0.00").format(Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)))));
		float	sal = (float) Double.parseDouble(DesEncrypterDecrypter.getInstance().decrypt(rs.getString(COLUMN_SALARY)));

		dto.setSalary(String.valueOf(sal));
		 
		dto.setPayableDays(rs.getDouble(COLUMN_PAYABLE_DAYS));
		dto.setComments(rs.getString(COLUMN_COMMENTS));
		dto.setReportingManager(rs.getString(COLUMN_REPORTING_MANAGER));
		dto.setProject(rs.getString(COLUMN_PROJECT));
		dto.setModifiedBy(rs.getString(COLUMN_MODIFIED_BY));
	//	dto.setModifiedOn(rs.getTimestamp(COLUMN_MODIFIED_ON));
		dto.setModifiedOn(rs.getDate(COLUMN_MODIFIED_ON));
		dto.setStatus(rs.getShort(COLUMN_STATUS));
		dto.setAccountType(rs.getShort(COLUMN_ACCOUNT_TYPE));
		dto.setPaid(rs.getString(COLUMN_PAID));
		dto.setSalaryCycle(rs.getString(COLUMN_SALARY_CYCLE));
		dto.setNo_of_modifications(rs.getString(COLUMN_NO_OF_MODIFICATIONS));
		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setEmpName(rs.getString("NAME"));
				dto.setEmpId(rs.getInt("EMP_ID") + "");
			} catch (Exception e){}
		}
		if (rs.getMetaData().getColumnCount() > NUMBER_OF_COLUMNS){
			try{
				dto.setDeptName(rs.getString("DEPT_NAME"));
			
			} catch (Exception e){}
		}
		
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SalaryReconciliationReport dto) {}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the specified arbitrary SQL statement
	 */
	public SalaryReconciliationReport[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	
		// declare variables
	
	/*public SalaryReconciliationReport[] findByPrimaryKeyLeave(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
		
	}*/
	
	public SalaryReconciliationReport[] findByDynamicSelectBank(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
			while (rs.next()){
				SalaryReconciliationReport dto = new SalaryReconciliationReport();
				populateDto1(dto, rs);
				resultList.add(dto);
			}
			SalaryReconciliationReport ret[] = new SalaryReconciliationReport[resultList.size()];
			resultList.toArray(ret);
			return ret;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	public SalaryReconciliationReport[] findByUserID(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
			while (rs.next()){
				SalaryReconciliationReport dto = new SalaryReconciliationReport();
				populateDtoAmount(dto, rs);
				resultList.add(dto);
			}
			SalaryReconciliationReport ret[] = new SalaryReconciliationReport[resultList.size()];
			resultList.toArray(ret);
			return ret;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	/**
	 * Returns all rows from the salary_reconciliation_report table that match the specified arbitrary SQL statement
	 */
	public SalaryReconciliationReport[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);
			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	public SalaryReconciliationReport[] findAllPaidAndUnpaid(int id,String flag) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			

			// construct the SQL statement
			String SQL_HDFC="SELECT SRR.*, CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME, U.EMP_ID,(CASE ACCOUNT_TYPE WHEN 0 THEN F.PRIM_BANK_ACC_NO WHEN 1 THEN F.PRIM_BANK_ACC_NO WHEN 2 THEN F.SEC_BANK_ACC_NO END) AS BANK_ACC_NO,(CASE ACCOUNT_TYPE WHEN 0 THEN F.PRIM_BANK_NAME WHEN 1 THEN F.PRIM_BANK_NAME WHEN 2 THEN F.SEC_BANK_NAME END) AS BANK_NAME FROM SALARY_RECONCILIATION_REPORT SRR JOIN USERS U ON SRR.USER_ID = U.ID JOIN PROFILE_INFO PF ON PF.ID=U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID=U.FINANCE_ID WHERE SR_ID=? AND F.PRIM_BANK_NAME LIKE '%HDFC%' ORDER BY U.EMP_ID,SRR.MODIFIED_ON DESC,SRR.ID ASC";
			//String SQL_HDFC="SELECT SRR.*, CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME, U.EMP_ID " + "FROM SALARY_RECONCILIATION_REPORT SRR JOIN USERS U ON SRR.USER_ID = U.ID JOIN PROFILE_INFO PF ON PF.ID=U.PROFILE_ID WHERE SR_ID=? ORDER BY SRR.MODIFIED_ON DESC,SRR.ID ASC";
			//String SQL_NON_HDFC="SELECT SRR.*, CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME, U.EMP_ID " + "FROM SALARY_RECONCILIATION_REPORT SRR JOIN USERS U ON SRR.USER_ID = U.ID JOIN PROFILE_INFO PF ON PF.ID=U.PROFILE_ID WHERE SR_ID=? ORDER BY SRR.MODIFIED_ON DESC,SRR.ID ASC";
           String SQL_NON_HDFC="SELECT SRR.*, CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME, U.EMP_ID,(CASE ACCOUNT_TYPE WHEN 0 THEN F.PRIM_BANK_ACC_NO WHEN 1 THEN F.PRIM_BANK_ACC_NO WHEN 2 THEN F.SEC_BANK_ACC_NO END) AS BANK_ACC_NO,(CASE ACCOUNT_TYPE WHEN 0 THEN F.PRIM_BANK_NAME WHEN 1 THEN F.PRIM_BANK_NAME WHEN 2 THEN F.SEC_BANK_NAME END) AS BANK_NAME FROM SALARY_RECONCILIATION_REPORT SRR JOIN USERS U ON SRR.USER_ID = U.ID JOIN PROFILE_INFO PF ON PF.ID=U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID=U.FINANCE_ID WHERE SR_ID=? AND F.PRIM_BANK_NAME NOT LIKE '%HDFC%' ORDER BY U.EMP_ID,SRR.MODIFIED_ON DESC,SRR.ID ASC";

			// prepare statement
			if(flag.equals("HDFC_BANK")){
				stmt = conn.prepareStatement(SQL_HDFC);
			}else{
				stmt = conn.prepareStatement(SQL_NON_HDFC);
			}
		
			stmt.setMaxRows(maxRows);
			stmt.setObject(1, id);
			// bind parameters
			
			rs = stmt.executeQuery();
			// fetch the results
			Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
			while (rs.next()){
				SalaryReconciliationReport dto = new SalaryReconciliationReport();
				populateDto1(dto, rs);
				resultList.add(dto);
			}
			SalaryReconciliationReport ret[] = new SalaryReconciliationReport[resultList.size()];
			resultList.toArray(ret);
			return ret;
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}
	
	public String updateAllReceivedPay(int sr_id,ArrayList<Integer> ssr_id,String flag) throws SalaryReconciliationReportDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			


			int retval = ssr_id.size();
			int count=1;
			StringBuilder builder = new StringBuilder();
			for( int i = 0 ; i < retval; i++ ) {
				if(count<retval){
				    builder.append("?,");
					count++;
				}else{
					builder.append("?");
				}
			
			}
			
			String sql="UPDATE SALARY_RECONCILIATION_REPORT SET PAID=? WHERE SR_ID=? AND ID IN("+builder+") ";
			int i=3;
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			stmt = conn.prepareStatement(sql);
			stmt.setObject(1, "paid");
			stmt.setObject(2, sr_id);
			for(i=3;i<ssr_id.size()+3;i++){
				stmt.setObject(i,ssr_id.get(i-3));	
			}
			int affectedrow=stmt.executeUpdate();
			return "Successfully updated";
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
		
		
	}

	public String reasonForNonPay(String reason, String date ,int srId, int userId) throws SalaryReconciliationReportDaoException {
		
		// declare variables
				final boolean isConnSupplied = (userConn != null);
				Connection conn = null;
				PreparedStatement stmt = null;
				ResultSet rs = null;
				
				try{
				
					conn = isConnSupplied ? userConn : ResourceManager.getConnection();
	
					
					String sql="UPDATE SALARY_RECONCILIATION_REPORT SET  REASON_FOR_NONPAYMENT =?, DATE = ? WHERE SR_ID=? AND USER_ID = ? ";
					conn = isConnSupplied ? userConn : ResourceManager.getConnection();
					stmt = conn.prepareStatement(sql);
					stmt.setObject(1, reason);
					stmt.setObject(2, date);
					stmt.setObject(3, srId);
					stmt.setObject(4, userId);
					int affectedrow=stmt.executeUpdate();
				
				} catch (Exception _e){
					logger.error("Exception: " + _e.getMessage(), _e);
					throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
				} finally{
					ResourceManager.close(rs);
					ResourceManager.close(stmt);
					if (!isConnSupplied){
						ResourceManager.close(conn);
					}
				}
				return "Successfully updated";
		
	}

	@Override
	public SalaryReconciliationReport[] findByPrimaryKeySr(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException {
			final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			final String SQL = "SELECT * FROM SALARY_RECONCILIATION_REPORT WHERE " + sql;
				   
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			
			stmt.setMaxRows(maxRows);
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++){
				stmt.setObject(i + 1, sqlParams[i]);
			}
			
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	
	}
	protected SalaryReconciliationReport[] fetchMultiResultsSr(ResultSet rs) throws SQLException {
		Collection<SalaryReconciliationReport> resultList = new ArrayList<SalaryReconciliationReport>();
		while (rs.next()){
			SalaryReconciliationReport dto = new SalaryReconciliationReport();
		
			populateDtoSr(dto, rs);
			resultList.add(dto);
		}
		SalaryReconciliationReport ret[] = new SalaryReconciliationReport[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDtoSr(SalaryReconciliationReport dto, ResultSet rs) throws SQLException {
		int index = 1;
		dto.setSrId(rs.getInt(index++));
	}

	@Override
	public SalaryReconciliationReport[] findByPrimaryKeyTds(int id) throws SalaryReconciliationReportDaoException {
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			// construct the SQL statement
			
			final String	SQL_SELECT	= "SELECT ID, SR_ID, USER_ID, SALARY, PAYABLE_DAYS, COMMENTS, REPORTING_MANAGER, PROJECT, MODIFIED_BY, MODIFIED_ON, STATUS, ACCOUNT_TYPE,PAID,SALARY_CYCLE,NO_OF_MODIFICATIONS,REASON_FOR_NONPAYMENT,DATE FROM  SALARY_RECONCILIATION_REPORT "+ " WHERE ID = "+id+"";
		
			if (logger.isDebugEnabled()){
				logger.debug("Executing " + SQL_SELECT);
			}
			// prepare statement
			stmt = conn.prepareStatement(SQL_SELECT);
			stmt.setMaxRows(maxRows);
			// bind parameters
		
			rs = stmt.executeQuery();
			// fetch the results
			return fetchMultiResultsSal(rs);
		} catch (Exception _e){
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new SalaryReconciliationReportDaoException("Exception: " + _e.getMessage(), _e);
		} finally{
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied){
				ResourceManager.close(conn);
			}
		}
	}

	@Override
	public SalaryReconciliationReport[] findByDynamicSelectt(String sql, Object[] sqlParams)
			throws SalaryReconciliationReportDaoException {
		// TODO Auto-generated method stub
		return null;
	}

	



	

	

}

