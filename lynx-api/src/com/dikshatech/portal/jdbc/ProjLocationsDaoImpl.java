/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.Logger;
import com.dikshatech.portal.dao.ProjLocationsDao;
import com.dikshatech.portal.dto.ProjLocations;
import com.dikshatech.portal.dto.ProjLocationsPk;
import com.dikshatech.portal.exceptions.ProjLocationsDaoException;

public class ProjLocationsDaoImpl extends AbstractDAO implements ProjLocationsDao
{
	protected static final Logger	logger				= Logger.getLogger(ProjLocationsDaoImpl.class);
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, PROJ_ID, NAME, CITY, ADDRESS, ZIP_CODE, STATE, COUNTRY, TEL_NUM, FAX_NUM FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, PROJ_ID, NAME, CITY, ADDRESS, ZIP_CODE, STATE, COUNTRY, TEL_NUM, FAX_NUM ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, PROJ_ID = ?, NAME = ?, CITY = ?, ADDRESS = ?, ZIP_CODE = ?, STATE = ?, COUNTRY = ?, TEL_NUM = ?, FAX_NUM = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column PROJ_ID
	 */
	protected static final int COLUMN_PROJ_ID = 2;

	/** 
	 * Index of column NAME
	 */
	protected static final int COLUMN_NAME = 3;

	/** 
	 * Index of column CITY
	 */
	protected static final int COLUMN_CITY = 4;

	/** 
	 * Index of column ADDRESS
	 */
	protected static final int COLUMN_ADDRESS = 5;

	/** 
	 * Index of column ZIP_CODE
	 */
	protected static final int COLUMN_ZIP_CODE = 6;

	/** 
	 * Index of column STATE
	 */
	protected static final int COLUMN_STATE = 7;

	/** 
	 * Index of column COUNTRY
	 */
	protected static final int COLUMN_COUNTRY = 8;

	/** 
	 * Index of column TEL_NUM
	 */
	protected static final int COLUMN_TEL_NUM = 9;

	/** 
	 * Index of column FAX_NUM
	 */
	protected static final int COLUMN_FAX_NUM = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the PROJ_LOCATIONS table.
	 */
	public ProjLocationsPk insert(ProjLocations dto) throws ProjLocationsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getProjId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getAddress() );
			if (dto.isZipCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getZipCode() );
			}
		
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getCountry() );
			stmt.setString( index++, dto.getTelNum() );
			stmt.setString( index++, dto.getFaxNum() );
			logger.debug("Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjLocationsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the PROJ_LOCATIONS table.
	 */
	public void update(ProjLocationsPk pk, ProjLocations dto) throws ProjLocationsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getProjId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getCity() );
			stmt.setString( index++, dto.getAddress() );
			if (dto.isZipCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getZipCode() );
			}
		
			stmt.setString( index++, dto.getState() );
			stmt.setString( index++, dto.getCountry() );
			stmt.setString( index++, dto.getTelNum() );
			stmt.setString( index++, dto.getFaxNum() );
			stmt.setInt( 11, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjLocationsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the PROJ_LOCATIONS table.
	 */
	public void delete(ProjLocationsPk pk) throws ProjLocationsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			logger.debug("Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			logger.debug( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjLocationsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the PROJ_LOCATIONS table that matches the specified primary-key value.
	 */
	public ProjLocations findByPrimaryKey(ProjLocationsPk pk) throws ProjLocationsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ID = :id'.
	 */
	public ProjLocations findByPrimaryKey(int id) throws ProjLocationsDaoException
	{
		ProjLocations ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria ''.
	 */
	public ProjLocations[] findAll() throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public ProjLocations[] findByProject(int projId) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROJ_ID = ?", new Object[] {  new Integer(projId) } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ID = :id'.
	 */
	public ProjLocations[] findWhereIdEquals(int id) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public ProjLocations[] findWhereProjIdEquals(int projId) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROJ_ID = ? ORDER BY PROJ_ID", new Object[] {  new Integer(projId) } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'NAME = :name'.
	 */
	public ProjLocations[] findWhereNameEquals(String name) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NAME = ? ORDER BY NAME", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'CITY = :city'.
	 */
	public ProjLocations[] findWhereCityEquals(String city) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CITY = ? ORDER BY CITY", new Object[] { city } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ADDRESS = :address'.
	 */
	public ProjLocations[] findWhereAddressEquals(String address) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADDRESS = ? ORDER BY ADDRESS", new Object[] { address } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ZIP_CODE = :zipCode'.
	 */
	public ProjLocations[] findWhereZipCodeEquals(int zipCode) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ZIP_CODE = ? ORDER BY ZIP_CODE", new Object[] {  new Integer(zipCode) } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'STATE = :state'.
	 */
	public ProjLocations[] findWhereStateEquals(String state) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATE = ? ORDER BY STATE", new Object[] { state } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'COUNTRY = :country'.
	 */
	public ProjLocations[] findWhereCountryEquals(String country) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COUNTRY = ? ORDER BY COUNTRY", new Object[] { country } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'TEL_NUM = :telNum'.
	 */
	public ProjLocations[] findWhereTelNumEquals(String telNum) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TEL_NUM = ? ORDER BY TEL_NUM", new Object[] { telNum } );
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'FAX_NUM = :faxNum'.
	 */
	public ProjLocations[] findWhereFaxNumEquals(String faxNum) throws ProjLocationsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FAX_NUM = ? ORDER BY FAX_NUM", new Object[] { faxNum } );
	}

	/**
	 * Method 'ProjLocationsDaoImpl'
	 * 
	 */
	public ProjLocationsDaoImpl()
	{
	}

	/**
	 * Method 'ProjLocationsDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProjLocationsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "PROJ_LOCATIONS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ProjLocations fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ProjLocations dto = new ProjLocations();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ProjLocations[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ProjLocations> resultList = new ArrayList<ProjLocations>();
		while (rs.next()) {
			ProjLocations dto = new ProjLocations();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ProjLocations ret[] = new ProjLocations[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProjLocations dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setProjId( rs.getInt( COLUMN_PROJ_ID ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setCity( rs.getString( COLUMN_CITY ) );
		dto.setAddress( rs.getString( COLUMN_ADDRESS ) );
		dto.setZipCode( rs.getInt( COLUMN_ZIP_CODE ) );
		if (rs.wasNull()) {
			dto.setZipCodeNull( true );
		}
		
		dto.setState( rs.getString( COLUMN_STATE ) );
		dto.setCountry( rs.getString( COLUMN_COUNTRY ) );
		dto.setTelNum( rs.getString( COLUMN_TEL_NUM ) );
		dto.setFaxNum( rs.getString( COLUMN_FAX_NUM ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProjLocations dto)
	{
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the specified arbitrary SQL statement
	 */
	public ProjLocations[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjLocationsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjLocationsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the specified arbitrary SQL statement
	 */
	public ProjLocations[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjLocationsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			logger.debug("Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjLocationsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
