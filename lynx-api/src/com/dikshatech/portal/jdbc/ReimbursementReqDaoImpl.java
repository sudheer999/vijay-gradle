/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

//import jdk.internal.org.objectweb.asm.tree.analysis.Value;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.dikshatech.beans.ReimbursementReportBean;
import com.dikshatech.portal.dao.ReimbursementReqDao;
import com.dikshatech.portal.dto.ReimbursementReq;
import com.dikshatech.portal.dto.ReimbursementReqPk;
import com.dikshatech.portal.exceptions.ReimbursementReqDaoException;

public class ReimbursementReqDaoImpl extends AbstractDAO implements ReimbursementReqDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ReimbursementReqDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, PROJECT_CODE, PROJECT_NAME, CHARGE_CODE, CC_TITLE, DESCRIPTION, ASSIGN_TO, STATUS, ACTIVE, OLD_STATUS, REMARK, MESSAGE_BODY, REQUESTER_ID, CREATE_DATE, ACTION_TAKEN_BY, ACTION_TAKEN_ON,OTHERS_EMP_ID,PAYMENT_MADE_TO_EMP_ID,REIMBU_FLAG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, PROJECT_CODE, PROJECT_NAME, CHARGE_CODE, CC_TITLE, DESCRIPTION, ASSIGN_TO, STATUS, ACTIVE, OLD_STATUS, REMARK, MESSAGE_BODY, REQUESTER_ID, CREATE_DATE, ACTION_TAKEN_BY, ACTION_TAKEN_ON,OTHERS_EMP_ID,PAYMENT_MADE_TO_EMP_ID,REIMBU_FLAG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,? ,?)";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, PROJECT_CODE = ?, PROJECT_NAME = ?, CHARGE_CODE = ?, CC_TITLE = ?, DESCRIPTION = ?, ASSIGN_TO = ?, STATUS = ?, ACTIVE = ?, OLD_STATUS = ?, REMARK = ?, MESSAGE_BODY = ?, REQUESTER_ID = ?, CREATE_DATE = ?, ACTION_TAKEN_BY = ?, ACTION_TAKEN_ON = ?,OTHERS_EMP_ID=?,PAYMENT_MADE_TO_EMP_ID=?,REIMBU_FLAG=? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column PROJECT_CODE
	 */
	protected static final int COLUMN_PROJECT_CODE = 3;

	/** 
	 * Index of column PROJECT_NAME
	 */
	protected static final int COLUMN_PROJECT_NAME = 4;

	/** 
	 * Index of column CHARGE_CODE
	 */
	protected static final int COLUMN_CHARGE_CODE = 5;

	/** 
	 * Index of column CC_TITLE
	 */
	protected static final int COLUMN_CC_TITLE = 6;

	/** 
	 * Index of column DESCRIPTION
	 */
	protected static final int COLUMN_DESCRIPTION = 7;

	/** 
	 * Index of column ASSIGN_TO
	 */
	protected static final int COLUMN_ASSIGN_TO = 8;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 9;

	/** 
	 * Index of column ACTIVE
	 */
	protected static final int COLUMN_ACTIVE = 10;

	/** 
	 * Index of column OLD_STATUS
	 */
	protected static final int COLUMN_OLD_STATUS = 11;
	
	/** 
	 * Index of column REMARK
	 */
	protected static final int COLUMN_REMARK = 12;

	/** 
	 * Index of column MESSAGE_BODY
	 */
	protected static final int COLUMN_MESSAGE_BODY = 13;

	/** 
	 * Index of column REQUESTER_ID
	 */
	protected static final int COLUMN_REQUESTER_ID = 14;

	/** 
	 * Index of column CREATE_DATE
	 */
	protected static final int COLUMN_CREATE_DATE = 15;

	/** 
	 * Index of column ACTION_TAKEN_BY
	 */
	protected static final int COLUMN_ACTION_TAKEN_BY = 16;

	/** 
	 * Index of column ACTION_TAKEN_ON
	 */
	protected static final int COLUMN_ACTION_TAKEN_ON = 17;

	protected static final int COLUMN_OTHERS_EMP_ID = 18;
	protected static final int COLUMN_PAYMENT_MADE_TO_EMP_ID = 19;
	
	protected static final int COLUMN_REIMBU_FLAG = 20;
	protected static final int COLUMN_PAID = 21;
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS =21;
	


	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the REIMBURSEMENT_REQ table.
	 */
	public ReimbursementReqPk insert(ReimbursementReq dto) throws ReimbursementReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isProjectCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectCode() );
			}
		
			stmt.setString( index++, dto.getProjectName() );
			if (dto.isChargeCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getChargeCode() );
			}
		
			stmt.setString( index++, dto.getCcTitle() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isActiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getActive() );
			}
			stmt.setString( index++, dto.getOldStatus() );
		
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getMessageBody() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			if (dto.isActionTakenByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionTakenBy() );
			}
		
			stmt.setTimestamp(index++, dto.getActionTakenOn()==null ? null : new java.sql.Timestamp( dto.getActionTakenOn().getTime() ) );
			stmt.setInt(index++, dto.getPaymentMadeToEmpId());
			stmt.setInt(index++, dto.getOTHER_EMP_NAME());
			stmt.setString(index++, dto.getReimbuFlag());
			
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the REIMBURSEMENT_REQ table.
	 */
	public void update(ReimbursementReqPk pk, ReimbursementReq dto) throws ReimbursementReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isProjectCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectCode() );
			}
		
			stmt.setString( index++, dto.getProjectName() );
			if (dto.isChargeCodeNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getChargeCode() );
			}
		
			stmt.setString( index++, dto.getCcTitle() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isAssignToNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAssignTo() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			if (dto.isActiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getActive() );
			}
			stmt.setString( index++, dto.getOldStatus() );
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getMessageBody() );
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			stmt.setTimestamp(index++, dto.getCreateDate()==null ? null : new java.sql.Timestamp( dto.getCreateDate().getTime() ) );
			if (dto.isActionTakenByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionTakenBy() );
			}
		
			stmt.setTimestamp(index++, dto.getActionTakenOn()==null ? null : new java.sql.Timestamp( dto.getActionTakenOn().getTime() ) );
			
			if(dto.getPaymentMadeToEmpId()==0){
				stmt.setInt(index++,0);

			}else{
				stmt.setInt(index++, dto.getPaymentMadeToEmpId());
			}
			if(dto.getOTHER_EMP_NAME()==0){
				
				stmt.setInt(index++,0);
			}
			else{
				
				stmt.setInt(index++, dto.getOTHER_EMP_NAME());
			}
			if(dto.getReimbuFlag()!=null){
			stmt.setString(index++, dto.getReimbuFlag());
			}
			else{
				stmt.setString(index++,"SELF");
			}
			//stmt.setInt(index++, dto.getPaymentMadeToEmpId());
			//stmt.setInt(index++, dto.getOther_Emp_Name());
			stmt.setInt( 21, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the REIMBURSEMENT_REQ table.
	 */
	public void delete(ReimbursementReqPk pk) throws ReimbursementReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the REIMBURSEMENT_REQ table that matches the specified primary-key value.
	 */
	public ReimbursementReq findByPrimaryKey(ReimbursementReqPk pk) throws ReimbursementReqDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ID = :id'.
	 */
	public ReimbursementReq findByPrimaryKey(int id) throws ReimbursementReqDaoException
	{
		ReimbursementReq ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria ''.
	 */
	public ReimbursementReq[] findAll() throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ID = :id'.
	 */
	public ReimbursementReq[] findWhereIdEquals(int id) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ReimbursementReq[] findWhereEsrMapIdEquals(int esrMapId) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'PROJECT_CODE = :projectCode'.
	 */
	public ReimbursementReq[] findWhereProjectCodeEquals(int projectCode) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROJECT_CODE = ? ORDER BY PROJECT_CODE", new Object[] {  new Integer(projectCode) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'PROJECT_NAME = :projectName'.
	 */
	public ReimbursementReq[] findWhereProjectNameEquals(String projectName) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROJECT_NAME = ? ORDER BY PROJECT_NAME", new Object[] { projectName } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CHARGE_CODE = :chargeCode'.
	 */
	public ReimbursementReq[] findWhereChargeCodeEquals(int chargeCode) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHARGE_CODE = ? ORDER BY CHARGE_CODE", new Object[] {  new Integer(chargeCode) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CC_TITLE = :ccTitle'.
	 */
	public ReimbursementReq[] findWhereCcTitleEquals(String ccTitle) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CC_TITLE = ? ORDER BY CC_TITLE", new Object[] { ccTitle } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'DESCRIPTION = :description'.
	 */
	public ReimbursementReq[] findWhereDescriptionEquals(String description) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPTION = ? ORDER BY DESCRIPTION", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ASSIGN_TO = :assignTo'.
	 */
	public ReimbursementReq[] findWhereAssignToEquals(int assignTo) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ASSIGN_TO = ? ORDER BY ASSIGN_TO", new Object[] {  new Integer(assignTo) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'STATUS = :status'.
	 */
	public ReimbursementReq[] findWhereStatusEquals(String status) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTIVE = :active'.
	 */
	public ReimbursementReq[] findWhereActiveEquals(short active) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVE = ? ORDER BY ACTIVE", new Object[] {  new Short(active) } );
	}
	
	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'OLD_STATUS = :oldStatus'.
	 */
	public ReimbursementReq[] findWhereOldStatusEquals(String oldStatus) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OLD_STATUS = ? ORDER BY OLD_STATUS", new Object[] {  oldStatus } );
	}
	
	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'REMARK = :remark'.
	 */
	public ReimbursementReq[] findWhereRemarkEquals(String remark) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMARK = ? ORDER BY REMARK", new Object[] { remark } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public ReimbursementReq[] findWhereMessageBodyEquals(String messageBody) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public ReimbursementReq[] findWhereRequesterIdEquals(int requesterId) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTER_ID = ? ORDER BY REQUESTER_ID", new Object[] {  new Integer(requesterId) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ReimbursementReq[] findWhereCreateDateEquals(Date createDate) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATE_DATE = ? ORDER BY CREATE_DATE", new Object[] { createDate==null ? null : new java.sql.Timestamp( createDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTION_TAKEN_BY = :actionTakenBy'.
	 */
	public ReimbursementReq[] findWhereActionTakenByEquals(int actionTakenBy) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_TAKEN_BY = ? ORDER BY ACTION_TAKEN_BY", new Object[] {  new Integer(actionTakenBy) } );
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTION_TAKEN_ON = :actionTakenOn'.
	 */
	public ReimbursementReq[] findWhereActionTakenOnEquals(Date actionTakenOn) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_TAKEN_ON = ? ORDER BY ACTION_TAKEN_ON", new Object[] { actionTakenOn==null ? null : new java.sql.Timestamp( actionTakenOn.getTime() ) } );
	}
	
	
	
	/*public ReimbursementReq[] findByDynamicQuery11(int id) throws ReimbursementReqDaoException
	{
	//	return findByDynamicSelect1("SELECT RR . *,U.EMP_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME),(CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_ACC_NO ELSE F.PRIM_BANK_ACC_NO  END) AS ACC_NO, (CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_NAME  ELSE F.PRIM_BANK_NAME END) AS BANK_NAME FROM REIMBURSEMENT_REQ RR JOIN USERS U on  RR.REQUESTER_ID = U.ID JOIN  PROFILE_INFO P ON P.ID = U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID = U.FINANCE_ID WHERE  F.PRIM_BANK_NAME  LIKE '%HDFC%' AND (RR.PAID IS null || RR.PAID = '') ORDER BY ESR_MAP_ID", null);
		return findByDynamicSelect1("SELECT RR . *,U.EMP_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME),(CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_ACC_NO ELSE F.PRIM_BANK_ACC_NO  END) AS ACC_NO, (CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_NAME  ELSE F.PRIM_BANK_NAME END) AS BANK_NAME FROM REIMBURSEMENT_REQ RR JOIN USERS U on  RR.REQUESTER_ID = U.ID JOIN  PROFILE_INFO P ON P.ID = U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID = U.FINANCE_ID WHERE  F.PRIM_BANK_NAME  LIKE '%HDFC%' AND  RR.STATUS  IN ('Request Raised' , 'Cancel Request','Revoked','Completed', 'In-Progress','Assigned','Cancel In-Progress') AND  ASSIGN_TO=" + loginDto.getUserId() + " AND ESR_MAP_ID IN(" + esrMapIdsForsearchCriteria1 + ") AND (RR.PAID IS null || RR.PAID = '') ORDER BY ESR_MAP_ID");
	
	
	}*/
	
/*	select RR . *,
    U.EMP_ID,
    CONCAT(FIRST_NAME, ' ', LAST_NAME),
    (CASE
        WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_ACC_NO
        ELSE F.PRIM_BANK_ACC_NO
    END) AS ACC_NO,
    (CASE
        WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_NAME
        ELSE F.PRIM_BANK_NAME
    END) AS BANK_NAME


from REIMBURSEMENT_REQ RR
 join
USERS U on  RR.REQUESTER_ID = U.ID
        JOIN
    PROFILE_INFO P ON P.ID = U.PROFILE_ID
        LEFT JOIN
    FINANCE_INFO F ON F.ID = U.FINANCE_ID
where 
   ESR_MAP_ID  = 30186
 AND F.PRIM_BANK_NAME not LIKE '%HDFC%';*/

	
	/*SELECT 
	   RR. *,
	 U.EMP_ID,
	    CONCAT(FIRST_NAME, ' ', LAST_NAME),
	    (CASE
	        WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_ACC_NO
	        ELSE F.PRIM_BANK_ACC_NO
	    END) AS ACC_NO,
	    (CASE
	        WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_NAME
	        ELSE F.PRIM_BANK_NAME
	    END) AS BANK_NAME
	FROM
	    REIMBURSEMENT_REQ RR
	join
	USERS U on  RR.REQUESTER_ID = U.ID
	        JOIN
	    PROFILE_INFO P ON P.ID = U.PROFILE_ID
	        LEFT JOIN
	    FINANCE_INFO F ON F.ID = U.FINANCE_ID
	where 
	 F.PRIM_BANK_NAME  NOT LIKE '%HDFC%'
	AND
	     RR.STATUS  IN ('Request Raised' , 'Cancel Request',
	        'Revoked',
	        'Completed',
	        'In-Progress',
	        'Assigned',
	        'Cancel In-Progress')
	        AND ASSIGN_TO  = 219
	        AND ESR_MAP_ID IN (29701 , 29702,
	        29703,
	        29704,
	        29705,
	        29706,
	        29708,
	        30184,
	        30185,
	        30186,
	        30187);
	*/
	
	/*
	public ReimbursementReq[] findByDynamicQuery21(String string) throws ReimbursementReqDaoException
	{
		return findByDynamicSelect2( "SELECT RR . *,U.EMP_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME),(CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_ACC_NO ELSE F.PRIM_BANK_ACC_NO  END) AS ACC_NO, (CASE WHEN F.PRIM_BANK_ACC_NO IS NULL THEN F.SEC_BANK_NAME  ELSE F.PRIM_BANK_NAME END) AS BANK_NAME FROM REIMBURSEMENT_REQ RR JOIN USERS U on  RR.REQUESTER_ID = U.ID JOIN  PROFILE_INFO P ON P.ID = U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID = U.FINANCE_ID WHERE ESR_MAP_ID = ? AND F.PRIM_BANK_NAME NOT LIKE '%HDFC%' ORDER BY ESR_MAP_ID", null);
	}*/

	/**
	 * Method 'ReimbursementReqDaoImpl'
	 * 
	 */
	public ReimbursementReqDaoImpl()
	{
	}

	/**
	 * Method 'ReimbursementReqDaoImpl'
	 * 
	 * @param userConn
	 */
	public ReimbursementReqDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "REIMBURSEMENT_REQ";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ReimbursementReq fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ReimbursementReq dto = new ReimbursementReq();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ReimbursementReq[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<ReimbursementReq> resultList = new ArrayList<ReimbursementReq>();
		while (rs.next()) {
			ReimbursementReq dto = new ReimbursementReq();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ReimbursementReq ret[] = new ReimbursementReq[ resultList.size() ];
		resultList.toArray( ret );
	
		return ret;
	}
	
	
	protected ReimbursementReq[] fetchMultiResults1(ResultSet rs) throws SQLException
	{
		Collection<ReimbursementReq> resultList = new ArrayList<ReimbursementReq>();
		while (rs.next()) {
			ReimbursementReq dto = new ReimbursementReq();
			populateDto1( dto, rs);
			resultList.add( dto );
		}
		
		ReimbursementReq ret[] = new ReimbursementReq[ resultList.size() ];
		resultList.toArray( ret );
	
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ReimbursementReq dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setProjectCode( rs.getInt( COLUMN_PROJECT_CODE ) );
		if (rs.wasNull()) {
			dto.setProjectCodeNull( true );
		}
		
		dto.setProjectName( rs.getString( COLUMN_PROJECT_NAME ) );
		dto.setChargeCode( rs.getInt( COLUMN_CHARGE_CODE ) );
		if (rs.wasNull()) {
			dto.setChargeCodeNull( true );
		}
		
		dto.setCcTitle( rs.getString( COLUMN_CC_TITLE ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setAssignTo( rs.getInt( COLUMN_ASSIGN_TO ) );
		if (rs.wasNull()) {
			dto.setAssignToNull( true );
		}
		
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setActive( rs.getShort( COLUMN_ACTIVE ) );
		if (rs.wasNull()) {
			dto.setActiveNull( true );
		}
		dto.setOldStatus( rs.getString( COLUMN_OLD_STATUS) );
		if (rs.wasNull()) {
			dto.setOldStatusNull( true );
		}
		dto.setRemark( rs.getString( COLUMN_REMARK ) );
		dto.setMessageBody( rs.getString( COLUMN_MESSAGE_BODY ) );
		dto.setRequesterId( rs.getInt( COLUMN_REQUESTER_ID ) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setCreateDate( rs.getTimestamp(COLUMN_CREATE_DATE ) );
		dto.setActionTakenBy( rs.getInt( COLUMN_ACTION_TAKEN_BY ) );
		if (rs.wasNull()) {
			dto.setActionTakenByNull( true );
		}
		
		dto.setActionTakenOn( rs.getTimestamp(COLUMN_ACTION_TAKEN_ON ) );
		dto.setPaymentMadeToEmpId(rs.getInt(COLUMN_OTHERS_EMP_ID));
		
		if(rs.getString(COLUMN_PAYMENT_MADE_TO_EMP_ID)!=null){
			dto.setOTHER_EMP_NAME( rs.getInt( COLUMN_PAYMENT_MADE_TO_EMP_ID) );
		}
		else{
			dto.setOTHER_EMP_NAME(0);
		}
		
		if(rs.getString(COLUMN_REIMBU_FLAG)!=null){
			dto.setReimbuFlag( rs.getString( COLUMN_REIMBU_FLAG) );
		}
		
		else{
			dto.setReimbuFlag("SELF");
			}
		/*dto.setEmpId(rs.getInt(22));
		dto.setEmployeeName(rs.getString(23));*/
		
	}
	
	
	
	protected void populateDto1(ReimbursementReq dto, ResultSet rs) throws SQLException
	{
		int index = 1;
		dto.setId( rs.getInt( index++) );
		dto.setEsrMapId( rs.getInt( index++ ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setProjectCode( rs.getInt( index++ ) );
		if (rs.wasNull()) {
			dto.setProjectCodeNull( true );
		}
		
		dto.setProjectName( rs.getString( index++) );
		dto.setChargeCode( rs.getInt( index++ ) );
		if (rs.wasNull()) {
			dto.setChargeCodeNull( true );
		}
		
		dto.setCcTitle( rs.getString( index++) );
		dto.setDescription( rs.getString( index++ ) );
		dto.setAssignTo( rs.getInt( index++ ) );
		if (rs.wasNull()) {
			dto.setAssignToNull( true );
		}
		
		dto.setStatus( rs.getString( index++) );
		dto.setActive( rs.getShort( index++ ) );
		if (rs.wasNull()) {
			dto.setActiveNull( true );
		}
		dto.setOldStatus( rs.getString( index++) );
		if (rs.wasNull()) {
			dto.setOldStatusNull( true );
		}
		dto.setRemark( rs.getString( index++ ) );
		dto.setMessageBody( rs.getString( index++ ) );
		dto.setRequesterId( rs.getInt( index++) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setCreateDate( rs.getTimestamp(index++ ) );
		dto.setActionTakenBy( rs.getInt( index++) );
		if (rs.wasNull()) {
			dto.setActionTakenByNull( true );
		}
		
		dto.setActionTakenOn( rs.getTimestamp(index++ ) );
		dto.setPaymentMadeToEmpId(rs.getInt(index++));
		dto.setPaid(rs.getString(21));
		
	
				
				dto.setEmployeeName(rs.getString(23));
			
		}
	


	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ReimbursementReq dto)
	{
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the specified arbitrary SQL statement
	 */
	public ReimbursementReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws ReimbursementReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	
	
	public ReimbursementReq[] findByDynamicSelect1(String sql) throws ReimbursementReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			/*for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}*/
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults1(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	
	
	public ReimbursementReq[] findByDynamicSelect2(String sql) throws ReimbursementReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
		/*	for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}*/
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults1(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the specified arbitrary SQL statement
	 */
	public ReimbursementReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws ReimbursementReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

@Override
	public ReimbursementReq[ ] findByDynamicQuery(String sql) throws ReimbursementReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		try
		{
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
			if (logger.isDebugEnabled())
			{
				logger.debug("Executing " + sql);
			}
			stmt = conn.createStatement();
			// prepare statement
			rs = stmt.executeQuery(sql);

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e)
		{
			logger.error("Exception: " + _e.getMessage(), _e);
			throw new ReimbursementReqDaoException("Exception: " + _e.getMessage(), _e);
		}
		finally
		{
			ResourceManager.close(rs);
			if (!isConnSupplied)
			{
				ResourceManager.close(conn);
			}

		}
	}

/*@Override
public ReimbursementReq[] findByDynamicSelectwhere(String sql, Object[] sqlParams) throws ReimbursementReqDaoException {
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	
	try {
		// get the user-specified connection or get a connection from the ResourceManager
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
	
		// construct the SQL statement
		final String SQL = sql;
	
	
		if (logger.isDebugEnabled()) {
			logger.debug( "Executing " + SQL);
		}
		stmt = conn.prepareStatement( SQL );
		stmt.setMaxRows( maxRows );
		stmt.setObject(1, usid);
		rs = stmt.executeQuery();
		
		Collection resultList = new ArrayList();
		int levelid=0;
		while (rs.next()) {
			Levels dto = new Levels();
			
			dto.setId( rs.getInt( COLUMN_ID ) );
			resultList.add( dto );
			
		 levelid = dto.getId();
		}
	
		//return levelid;
		

	}
	
	catch (Exception _e) {
		logger.error( "Exception: " + _e.getMessage(), _e );
		throw new LevelsDaoException( "Exception: " + _e.getMessage(), _e );
	}
	finally {
		ResourceManager.close(rs);
		ResourceManager.close(stmt);
		if (!isConnSupplied) {
			ResourceManager.close(conn);
		}
	
	}
}
*/
@Override
public ReimbursementReq[] findWhereuserIdEquals(int usid) throws ReimbursementReqDaoException {
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	ReimbursementReq[] ret = null;
	
	try {
		// get the user-specified connection or get a connection from the ResourceManager
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
	
		// construct the SQL statement
		final String SQL = "SELECT C.ID,R.REG_NAME,C.COMPANY_NAME,L.DESIGNATION FROM USERS U LEFT JOIN LEVELS L ON U.LEVEL_ID=L.ID LEFT JOIN DIVISON D ON  L.DIVISION_ID=D.ID LEFT JOIN REGIONS R ON R.ID=D.REGION_ID LEFT JOIN COMPANY C ON C.ID=R.COMPANY_ID LEFT JOIN PROFILE_INFO PI ON PI.ID=U.PROFILE_ID WHERE U.ID=? ";
	
	
		if (logger.isDebugEnabled()) {
			logger.debug( "Executing " + SQL);
		}
		stmt = conn.prepareStatement( SQL );
		stmt.setMaxRows( maxRows );
		stmt.setObject(1, usid);
		rs = stmt.executeQuery();
		
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ReimbursementReq dto=new ReimbursementReq();
			
			dto.setCompany_ID(rs.getInt(1));
			dto.setRegName(rs.getString(2));
			dto.setCompanyName(rs.getString(3));
			dto.setDesignation(rs.getString(4));
			resultList.add( dto );
			
				ret = new ReimbursementReq[ resultList.size() ];
			resultList.toArray( ret );
			
			
		}

	}
	
	catch (Exception _e) {
		logger.error( "Exception: " + _e.getMessage(), _e );
		throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
	}
	finally {
		ResourceManager.close(rs);
		ResourceManager.close(stmt);
		if (!isConnSupplied) {
			ResourceManager.close(conn);
		}
	
	}
	
	return ret;

}

@Override
public ReimbursementReq[] findPayDetailsHdfc(String sql) throws ReimbursementReqDaoException {
	
	

	// declare variables
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	
	try {
		// get the user-specified connection or get a connection from the ResourceManager
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
	
		// construct the SQL statement
		final String SQL = sql;
	
	
		if (logger.isDebugEnabled()) {
			logger.debug( "Executing " + SQL);
		}
	
		// prepare statement
		stmt = conn.prepareStatement( SQL );
		stmt.setMaxRows( maxRows );
	
		// bind parameters
		/*for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
			stmt.setObject( i+1, sqlParams[i] );
		}*/
	
	
		rs = stmt.executeQuery();
	
		// fetch the results
		return fetchMultiResults1(rs);
	}
	catch (Exception _e) {
		logger.error( "Exception: " + _e.getMessage(), _e );
		throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
	}
	finally {
		ResourceManager.close(rs);
		ResourceManager.close(stmt);
		if (!isConnSupplied) {
			ResourceManager.close(conn);
		}
	
	}
	

	
	
	// TODO Auto-generated method stub
}

@Override
public ReimbursementReq[] findPayDetailsNonHdfc(String sql) throws ReimbursementReqDaoException {
	// TODO Auto-generated method stub
	

	// declare variables
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	
	try {
		// get the user-specified connection or get a connection from the ResourceManager
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
	
		// construct the SQL statement
		final String SQL = sql;
	
	
		if (logger.isDebugEnabled()) {
			logger.debug( "Executing " + SQL);
		}
	
		// prepare statement
		stmt = conn.prepareStatement( SQL );
		stmt.setMaxRows( maxRows );
	
		// bind parameters
	/*	for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
			stmt.setObject( i+1, sqlParams[i] );
		}*/
	
	
		rs = stmt.executeQuery();
	
		// fetch the results
		return fetchMultiResults1(rs);
	}
	catch (Exception _e) {
		logger.error( "Exception: " + _e.getMessage(), _e );
		throw new ReimbursementReqDaoException( "Exception: " + _e.getMessage(), _e );
	}
	finally {
		ResourceManager.close(rs);
		ResourceManager.close(stmt);
		if (!isConnSupplied) {
			ResourceManager.close(conn);
		}
	
	}
	
	
}



@Override
public String updateAllReceivedPay( ArrayList<Integer> bbr_Id, String flag1)
		throws ReimbursementReqDaoException {
	


	 // declare variables
    final boolean isConnSupplied = (userConn != null);
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try{
conn = isConnSupplied ? userConn : ResourceManager.getConnection();
          


          int retval = bbr_Id.size();
          int count=1;
          StringBuilder builder = new StringBuilder();
          for( int i = 0 ; i < retval; i++ ) {
              if(count<retval){
                  builder.append("?,");
                  count++;
              }else{
                  builder.append("?");
              }
          
          }
          String sql="UPDATE REIMBURSEMENT_REQ SET PAID=? WHERE  ESR_MAP_ID IN("+builder+") ";
          int i=2;
         
          stmt = conn.prepareStatement(sql);
          stmt.setObject(1, "paid");
     //     stmt.setObject(2, bbr_Id );
          for(i=2;i<bbr_Id.size()+2;i++){
              stmt.setObject(i,bbr_Id.get(i-2));    
          }
          int affectedrow=stmt.executeUpdate();
          return "Successfully updated";
	

    }
    catch (Exception _e){
        logger.error("Exception: " + _e.getMessage(), _e);
        throw new ReimbursementReqDaoException("Exception: " + _e.getMessage(), _e);
    } finally{
        ResourceManager.close(rs);
        ResourceManager.close(stmt);
        if (!isConnSupplied){
            ResourceManager.close(conn);
        }
    }
   
}




/* (non-Javadoc)
 * @see com.dikshatech.portal.dao.ReimbursementReqDao#findInternalReportDataHDFC(java.util.ArrayList, java.lang.String)
 */
/* (non-Javadoc)
 * @see com.dikshatech.portal.dao.ReimbursementReqDao#findInternalReportDataHDFC(java.util.ArrayList, java.lang.String)
 */
@Override
public List<Map<String, Object>> findInternalReportDataHDFC( ArrayList<Integer> arraylist ,String flag1,String req)
		throws ReimbursementReqDaoException {
	

	final String accNoSql = ", (CASE  WHEN 0 THEN FI.PRIM_BANK_ACC_NO WHEN 1 THEN FI.PRIM_BANK_ACC_NO WHEN 2 THEN FI.SEC_BANK_ACC_NO END) AS BANK_ACC_NO";
	final String bankNameSql = ", (CASE  WHEN 0 THEN FI.PRIM_BANK_NAME WHEN 1 THEN FI.PRIM_BANK_NAME WHEN 2 THEN FI.SEC_BANK_NAME END) AS BANK_NAME";
	
	int retval = arraylist.size();
	int count=1;
	StringBuilder builder = new StringBuilder();
	for( int i = 0 ; i < retval; i++ ) {
		if(count<retval){
		    builder.append("?,");
			count++;
		}else{
			builder.append("?");
		}
	
	}
	
	//final String SQL_NON_HDFC="  SELECT DISTINCT U.EMP_ID , CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME" + accNoSql + bankNameSql + ", F.PRIMARY_IFSC_CODE,PF.OFFICAL_EMAIL_ID,EP.REQ_ID,RF.AMOUNT FROM REIMBURSEMENT_REQ RR JOIN SALARY_RECONCILIATION_REPORT SRR ON  SRR.USER_ID = RR.REQUESTER_ID JOIN EMP_SER_REQ_MAP EP ON EP.ID = RR.ESR_MAP_ID JOIN  USERS U ON RR.REQUESTER_ID = U.ID JOIN  PROFILE_INFO PF ON PF.ID = U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID = U.FINANCE_ID LEFT JOIN REIMBURSEMENT_FINANCIAL_DATA RF ON RF.ESRMAP_ID = RR.ESR_MAP_ID  WHERE  RR.ESR_MAP_ID in("+builder+")  AND F.PRIM_BANK_NAME NOT LIKE '%HDFC%' ORDER BY U.EMP_ID";

	
    final String SQL_HDFC = " SELECT U.EMP_ID, EMP.REQ_ID, RF.AMOUNT, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS NAME" + accNoSql + bankNameSql + ",FI.PRIMARY_IFSC_CODE, PF.OFFICAL_EMAIL_ID FROM REIMBURSEMENT_FINANCIAL_DATA RF left join EMP_SER_REQ_MAP EMP ON EMP.ID = RF.ESRMAP_ID left join USERS U ON U.ID = EMP.REQUESTOR_ID left join FINANCE_INFO FI ON U.FINANCE_ID = FI.ID left join PROFILE_INFO PF ON PF.ID = U.PROFILE_ID where RF.ESRMAP_ID in ("+builder+") AND FI.PRIM_BANK_NAME  LIKE '%HDFC%' ORDER BY U.EMP_ID";
	//final String SQL_NON_HDFC="SELECT U.EMP_ID , CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,SRR.SALARY" + accNoSql + bankNameSql + ",SRR.PAYABLE_DAYS,F.PRIMARY_IFSC_CODE,PF.OFFICAL_EMAIL_ID FROM SALARY_RECONCILIATION_REPORT SRR JOIN USERS U ON SRR.USER_ID = U.ID JOIN PROFILE_INFO PF ON PF.ID=U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID=U.FINANCE_ID WHERE SR_ID=? and SRR.ID in("+builder+") AND SRR.STATUS!=? AND SRR.STATUS!=? AND F.PRIM_BANK_NAME NOT Like '%HDFC%' ORDER BY U.EMP_ID";
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet res = null;
	ReimbursementReportBean reimbursementReportBean = null;
	List<ReimbursementReportBean> list = new ArrayList<ReimbursementReportBean>();

	
	List<Map<String, Object>> reimbuReport =null;

	try{
		String sql="UPDATE REIMBURSEMENT_REQ SET PAID=?  WHERE ESR_MAP_ID IN("+builder+") ";
		int i=2;
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		stmt = conn.prepareStatement(sql);
		stmt.setObject(1, "paid");
		for(i=2;i<arraylist.size()+2;i++){
			stmt.setObject(i,arraylist.get(i-2));	
		}
		int affectedrow=stmt.executeUpdate();
		logger.debug("PAID STATUS UPDATED IN REIMBURSEMENT_REQ ROW AFFECTED"+affectedrow);
		
	}catch(SQLException e){
		e.printStackTrace();
	}
	
	
	try{

		if(flag1.equals("HDFC")){
			stmt = conn.prepareStatement(SQL_HDFC);
			logger.debug("HDFC bank result");
								}
		else{
			logger.debug("NON HDFC bank result");
			 }
		int i=1;
		for(i=1;i<arraylist.size()+1;i++){
			stmt.setObject(i,arraylist.get(i-1));
		
		}
		res = stmt.executeQuery();
		logger.debug("AFFECTED ROW FOR DOWNLOAD EXCEL SHEET"+res);
		
		
		while (res.next()){
			String bankName = res.getString(6);
		    reimbursementReportBean = new ReimbursementReportBean();
			reimbursementReportBean.setEmp_code(res.getInt(1));
			reimbursementReportBean.setName(res.getString(4));
			reimbursementReportBean.setBankName(bankName);
			reimbursementReportBean.setPrimaryIfsc(res.getString(7));
			reimbursementReportBean.setEmail_id(res.getString(8));
			reimbursementReportBean.setReqId(res.getString(2));
			reimbursementReportBean.setAmount(res.getDouble(3));
			
				try{
					reimbursementReportBean.setAccount_no(res.getString(5));
				} catch (Exception e){
					logger.error("there is no valid account no for :" + reimbursementReportBean.getName());
				}
				list.add(reimbursementReportBean);
				
			}
	 
		
		String[] rrr1=req.split(",");
	    double a;
		double b=0;
		 reimbuReport = new ArrayList<Map<String, Object>>();
			for(String r:rrr1){
			for(ReimbursementReportBean eachSalaryBea:list){
				if(eachSalaryBea.getReqId().equals(r)){
				
					 a = eachSalaryBea.getAmount();
					 b =b+a;
					 System.out.println(b);
			
				}
				
			}

			for(ReimbursementReportBean eachSalaryBea:list){

				if(eachSalaryBea.getReqId().equals(r)){
					 eachSalaryBea.setTotalAmount(b+"");
					 reimbuReport.add(eachSalaryBea.toMap(1));
				break;
			}
			}
			
		
			b=0;
			}
	 
	
	} catch (SQLException e){
		logger.error("There is an SQLException occured while querying the users details from users table " + e.getMessage(), e);
	
	}finally{
		ResourceManager.close(res);
		ResourceManager.close(stmt);
		if (!isConnSupplied){
			ResourceManager.close(conn);
		}
	}
	
	 return reimbuReport;
	
	
}

@Override
public List<String[]> findInternalReportData(String reqId) throws ReimbursementReqDaoException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public List<Map<String, Object>> findInternalReportDataNONHDFC(ArrayList<Integer> arraylist , String flag1,String req) throws ReimbursementReqDaoException {
	final String accNoSql = ", (CASE  WHEN 0 THEN FI.PRIM_BANK_ACC_NO WHEN 1 THEN FI.PRIM_BANK_ACC_NO WHEN 2 THEN FI.SEC_BANK_ACC_NO END) AS BANK_ACC_NO";
	final String bankNameSql = ", (CASE  WHEN 0 THEN FI.PRIM_BANK_NAME WHEN 1 THEN FI.PRIM_BANK_NAME WHEN 2 THEN FI.SEC_BANK_NAME END) AS BANK_NAME";
	
	int retval = arraylist.size();
	int count=1;
	StringBuilder builder = new StringBuilder();
	for( int i = 0 ; i < retval; i++ ) {
		if(count<retval){
		    builder.append("?,");
			count++;
		}else{
			builder.append("?");
		}
	
	}
	
//	final String SQL_NON_HDFC="  SELECT  U.EMP_ID , CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME" + accNoSql + bankNameSql + ", F.PRIMARY_IFSC_CODE,PF.OFFICAL_EMAIL_ID,EP.REQ_ID,RF.AMOUNT FROM REIMBURSEMENT_REQ RR JOIN SALARY_RECONCILIATION_REPORT SRR ON  SRR.USER_ID = RR.REQUESTER_ID JOIN EMP_SER_REQ_MAP EP ON EP.ID = RR.ESR_MAP_ID JOIN  USERS U ON RR.REQUESTER_ID = U.ID JOIN  PROFILE_INFO PF ON PF.ID = U.PROFILE_ID LEFT JOIN FINANCE_INFO F ON F.ID = U.FINANCE_ID LEFT JOIN REIMBURSEMENT_FINANCIAL_DATA RF ON RF.ESRMAP_ID = RR.ESR_MAP_ID  WHERE  RR.ESR_MAP_ID in("+builder+")  AND F.PRIM_BANK_NAME NOT LIKE '%HDFC%' ORDER BY U.EMP_ID";
	
	final String SQL_NON_HDFC="  SELECT U.EMP_ID, EMP.REQ_ID, RF.AMOUNT, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS NAME" + accNoSql + bankNameSql + ", FI.PRIMARY_IFSC_CODE, PF.OFFICAL_EMAIL_ID FROM REIMBURSEMENT_FINANCIAL_DATA RF left join EMP_SER_REQ_MAP EMP ON EMP.ID = RF.ESRMAP_ID left join USERS U ON U.ID = EMP.REQUESTOR_ID left join FINANCE_INFO FI ON U.FINANCE_ID = FI.ID left join PROFILE_INFO PF ON PF.ID = U.PROFILE_ID where RF.ESRMAP_ID in ("+builder+") AND FI.PRIM_BANK_NAME NOT LIKE '%HDFC%' ORDER BY U.EMP_ID";
	final boolean isConnSupplied = (userConn != null);
	Connection conn = null;
	PreparedStatement stmt = null;
	ResultSet res = null;
	List<Map<String, Object>> reimbuReport =null;


	ReimbursementReportBean reimbursementReportBean = null;
	List<ReimbursementReportBean> list = new ArrayList<ReimbursementReportBean>();

	

	
	
	try{
		String sql="UPDATE REIMBURSEMENT_REQ SET PAID=?  WHERE ESR_MAP_ID IN("+builder+") ";
		int i=2;
		conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		stmt = conn.prepareStatement(sql);
		stmt.setObject(1, "paid");
		for(i=2;i<arraylist.size()+2;i++){
			stmt.setObject(i,arraylist.get(i-2));	
		}
		int affectedrow=stmt.executeUpdate();
		logger.debug("PAID STATUS UPDATED IN REIMBURSEMENT_REQ ROW AFFECTED"+affectedrow);
		
	}catch(SQLException e){
		e.printStackTrace();
	}
	
	
	try{
	
		if(flag1.equals("NON_HDFC")){
			stmt = conn.prepareStatement(SQL_NON_HDFC);
			logger.debug("NON_HDFC bank result");
			}
		int i=1;
		for(i=1;i<arraylist.size()+1;i++){
			stmt.setObject(i,arraylist.get(i-1));
		}
			res = stmt.executeQuery();
		logger.debug("AFFECTED ROW FOR DOWNLOAD EXCEL SHEET"+res);

		while (res.next()){
		
			String bankName = res.getString(6);
			reimbursementReportBean = new ReimbursementReportBean();
			reimbursementReportBean.setEmp_code(res.getInt(1));
			reimbursementReportBean.setName(res.getString(4));
			reimbursementReportBean.setBankName(bankName);
			reimbursementReportBean.setPrimaryIfsc(res.getString(7));
			reimbursementReportBean.setEmail_id(res.getString(8));
			reimbursementReportBean.setReqId(res.getString(2));
			reimbursementReportBean.setAmount(res.getDouble(3));
			
				try{
					reimbursementReportBean.setAccount_no(res.getString(5));
				} catch (Exception e){
					logger.error("there is no valid account no for :" + reimbursementReportBean.getName());
				}
		list.add(reimbursementReportBean);
				
			}
		
		
		
		String[] rrr=req.split(",");
	    double a;
		double b=0;
		reimbuReport = new ArrayList<Map<String, Object>>();
			for(String r:rrr){
			for(ReimbursementReportBean eachSalaryBea:list){
				if(eachSalaryBea.getReqId().equals(r)){
				
					 a = eachSalaryBea.getAmount();
					 b =b+a;
			
				}
				
			}

			for(ReimbursementReportBean eachSalaryBea:list){

				if(eachSalaryBea.getReqId().equals(r)){
					 eachSalaryBea.setTotalAmount(b+"");
					 reimbuReport.add(eachSalaryBea.toMap(1));
				break;
			}
			}
			

			b=0;
			}
			
	   
	 }catch (SQLException e){
		logger.error("There is an SQLException occured while querying the users details from users table " + e.getMessage(), e);
	
	}finally{
		ResourceManager.close(res);
		ResourceManager.close(stmt);
		if (!isConnSupplied){
			ResourceManager.close(conn);
		}
	}
	
	return reimbuReport; 
	
	
}
	
	


@Override
public List<String[]> findInternalReportData(int esrMapId) throws ReimbursementReqDaoException {
	// TODO Auto-generated method stub
	return null;
}

}




