/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.apache.log4j.Logger;

import com.dikshatech.portal.dao.TaxBenefitReqDao;
import com.dikshatech.portal.dto.TaxBenefitReq;
import com.dikshatech.portal.dto.TaxBenefitReqPk;
import com.dikshatech.portal.exceptions.TaxBenefitReqDaoException;

public class TaxBenefitReqDaoImpl extends AbstractDAO implements TaxBenefitReqDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( TaxBenefitReqDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID, ESR_MAP_ID, REQUESTER_ID, ACTION_BY, STATUS, CREATED_ON, ACTION_ON, MESSAGE_BODY, COMMENTS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID, ESR_MAP_ID, REQUESTER_ID, ACTION_BY, STATUS, CREATED_ON, ACTION_ON, MESSAGE_BODY, COMMENTS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID = ?, ESR_MAP_ID = ?, REQUESTER_ID = ?, ACTION_BY = ?, STATUS = ?, CREATED_ON = ?, ACTION_ON = ?, MESSAGE_BODY = ?, COMMENTS = ? WHERE ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID = ?";

	/** 
	 * Index of column ID
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column ESR_MAP_ID
	 */
	protected static final int COLUMN_ESR_MAP_ID = 2;

	/** 
	 * Index of column REQUESTER_ID
	 */
	protected static final int COLUMN_REQUESTER_ID = 3;

	/** 
	 * Index of column ACTION_BY
	 */
	protected static final int COLUMN_ACTION_BY = 4;

	/** 
	 * Index of column STATUS
	 */
	protected static final int COLUMN_STATUS = 5;

	/** 
	 * Index of column CREATED_ON
	 */
	protected static final int COLUMN_CREATED_ON = 6;

	/** 
	 * Index of column ACTION_ON
	 */
	protected static final int COLUMN_ACTION_ON = 7;

	/** 
	 * Index of column MESSAGE_BODY
	 */
	protected static final int COLUMN_MESSAGE_BODY = 8;

	/** 
	 * Index of column COMMENTS
	 */
	protected static final int COLUMN_COMMENTS = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column ID
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the TAX_BENEFIT_REQ table.
	 */
	public TaxBenefitReqPk insert(TaxBenefitReq dto) throws TaxBenefitReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isActionByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionBy() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			stmt.setDate(index++, dto.getCreatedOn()==null ? null : new java.sql.Date( dto.getCreatedOn().getTime() ) );
			stmt.setDate(index++, dto.getActionOn()==null ? null : new java.sql.Date( dto.getActionOn().getTime() ) );
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setString( index++, dto.getComments() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the TAX_BENEFIT_REQ table.
	 */
	public void update(TaxBenefitReqPk pk, TaxBenefitReq dto) throws TaxBenefitReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			if (dto.isEsrMapIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getEsrMapId() );
			}
		
			if (dto.isRequesterIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getRequesterId() );
			}
		
			if (dto.isActionByNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getActionBy() );
			}
		
			stmt.setString( index++, dto.getStatus() );
			stmt.setDate(index++, dto.getCreatedOn()==null ? null : new java.sql.Date( dto.getCreatedOn().getTime() ) );
			stmt.setDate(index++, dto.getActionOn()==null ? null : new java.sql.Date( dto.getActionOn().getTime() ) );
			stmt.setString( index++, dto.getMessageBody() );
			stmt.setString( index++, dto.getComments() );
			stmt.setInt( 10, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the TAX_BENEFIT_REQ table.
	 */
	public void delete(TaxBenefitReqPk pk) throws TaxBenefitReqDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the TAX_BENEFIT_REQ table that matches the specified primary-key value.
	 */
	public TaxBenefitReq findByPrimaryKey(TaxBenefitReqPk pk) throws TaxBenefitReqDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitReq findByPrimaryKey(int id) throws TaxBenefitReqDaoException
	{
		TaxBenefitReq ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria ''.
	 */
	public TaxBenefitReq[] findAll() throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID", null );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitReq[] findWhereIdEquals(int id) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID = ? ORDER BY ID", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public TaxBenefitReq[] findWhereEsrMapIdEquals(int esrMapId) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESR_MAP_ID = ? ORDER BY ESR_MAP_ID", new Object[] {  new Integer(esrMapId) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public TaxBenefitReq[] findWhereRequesterIdEquals(int requesterId) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REQUESTER_ID = ? ORDER BY REQUESTER_ID", new Object[] {  new Integer(requesterId) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public TaxBenefitReq[] findWhereActionByEquals(int actionBy) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_BY = ? ORDER BY ACTION_BY", new Object[] {  new Integer(actionBy) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'STATUS = :status'.
	 */
	public TaxBenefitReq[] findWhereStatusEquals(String status) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STATUS = ? ORDER BY STATUS", new Object[] { status } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public TaxBenefitReq[] findWhereCreatedOnEquals(Date createdOn) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATED_ON = ? ORDER BY CREATED_ON", new Object[] { createdOn==null ? null : new java.sql.Date( createdOn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ACTION_ON = :actionOn'.
	 */
	public TaxBenefitReq[] findWhereActionOnEquals(Date actionOn) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTION_ON = ? ORDER BY ACTION_ON", new Object[] { actionOn==null ? null : new java.sql.Date( actionOn.getTime() ) } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public TaxBenefitReq[] findWhereMessageBodyEquals(String messageBody) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_BODY = ? ORDER BY MESSAGE_BODY", new Object[] { messageBody } );
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'COMMENTS = :comments'.
	 */
	public TaxBenefitReq[] findWhereCommentsEquals(String comments) throws TaxBenefitReqDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMENTS = ? ORDER BY COMMENTS", new Object[] { comments } );
	}

	/**
	 * Method 'TaxBenefitReqDaoImpl'
	 * 
	 */
	public TaxBenefitReqDaoImpl()
	{
	}

	/**
	 * Method 'TaxBenefitReqDaoImpl'
	 * 
	 * @param userConn
	 */
	public TaxBenefitReqDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "TAX_BENEFIT_REQ";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TaxBenefitReq fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TaxBenefitReq dto = new TaxBenefitReq();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TaxBenefitReq[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<TaxBenefitReq> resultList = new ArrayList<TaxBenefitReq>();
		while (rs.next()) {
			TaxBenefitReq dto = new TaxBenefitReq();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TaxBenefitReq ret[] = new TaxBenefitReq[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	protected TaxBenefitReq[] fetchMultiResultsTaxHandle(ResultSet rs) throws SQLException
	{
		Collection<TaxBenefitReq> resultList = new ArrayList<TaxBenefitReq>();
		while (rs.next()) {
			TaxBenefitReq dto = new TaxBenefitReq();
			populateDtoTaxHandle( dto, rs);
			resultList.add( dto );
		}
		
		TaxBenefitReq ret[] = new TaxBenefitReq[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TaxBenefitReq dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setRequesterId( rs.getInt( COLUMN_REQUESTER_ID ) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setActionBy( rs.getInt( COLUMN_ACTION_BY ) );
		if (rs.wasNull()) {
			dto.setActionByNull( true );
		}
		
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setCreatedOn( rs.getDate(COLUMN_CREATED_ON ) );
		dto.setActionOn( rs.getDate(COLUMN_ACTION_ON ) );
		dto.setMessageBody( rs.getString( COLUMN_MESSAGE_BODY ) );
		dto.setComments( rs.getString( COLUMN_COMMENTS ) );
	}
	protected void populateDtoTaxHandle(TaxBenefitReq dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setEsrMapId( rs.getInt( COLUMN_ESR_MAP_ID ) );
		if (rs.wasNull()) {
			dto.setEsrMapIdNull( true );
		}
		
		dto.setRequesterId( rs.getInt( COLUMN_REQUESTER_ID ) );
		if (rs.wasNull()) {
			dto.setRequesterIdNull( true );
		}
		
		dto.setActionBy( rs.getInt( COLUMN_ACTION_BY ) );
		if (rs.wasNull()) {
			dto.setActionByNull( true );
		}
		
		dto.setStatus( rs.getString( COLUMN_STATUS ) );
		dto.setCreatedOn( rs.getDate(COLUMN_CREATED_ON ) );
		dto.setActionOn( rs.getDate(COLUMN_ACTION_ON ) );
		dto.setMessageBody( rs.getString( COLUMN_MESSAGE_BODY ) );
		dto.setComments( rs.getString( COLUMN_COMMENTS ) );
	}
	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TaxBenefitReq dto)
	{
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws TaxBenefitReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws TaxBenefitReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public TaxBenefitReq[] findByDynamicWhereTaxHandle() throws TaxBenefitReqDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = "SELECT * FROM TAX_BENEFIT_REQ  WHERE STATUS  in ('Re-Submitted','Submitted','Accepted')";
	/*			    ID,
				    ESR_MAP_ID,
				    REQUESTER_ID,
				    ACTION_BY,
				    STATUS,
				    CREATED_ON,
				    ACTION_ON,
				    MESSAGE_BODY,
				    COMMENTS
				FROM
				    TAX_BENEFIT_REQ T
				WHERE
				    T.STATUS  in ('Re-Submitted','Accepted','Submitted');*/
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			/*for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		*/
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResultsTaxHandle(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TaxBenefitReqDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	
	
}
