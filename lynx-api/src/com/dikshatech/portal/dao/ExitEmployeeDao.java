/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.ExitEmployee;
import com.dikshatech.portal.dto.ExitEmployeePk;
import com.dikshatech.portal.exceptions.ExitEmployeeDaoException;

public interface ExitEmployeeDao {

	/**
	 * Inserts a new row in the EXIT_EMPLOYEE table.
	 */
	public ExitEmployeePk insert(ExitEmployee dto) throws ExitEmployeeDaoException;

	/**
	 * Updates a single row in the EXIT_EMPLOYEE table.
	 */
	public void update(ExitEmployeePk pk, ExitEmployee dto) throws ExitEmployeeDaoException;

	/**
	 * Deletes a single row in the EXIT_EMPLOYEE table.
	 */
	public void delete(ExitEmployeePk pk) throws ExitEmployeeDaoException;

	/**
	 * Returns the rows from the EXIT_EMPLOYEE table that matches the specified primary-key value.
	 */
	public ExitEmployee findByPrimaryKey(ExitEmployeePk pk) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'ID = :id'.
	 */
	public ExitEmployee findByPrimaryKey(int id) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria ''.
	 */
	public ExitEmployee[] findAll() throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'ID = :id'.
	 */
	public ExitEmployee[] findWhereIdEquals(Integer id) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'USER_ID = :userId'.
	 */
	public ExitEmployee[] findWhereUserIdEquals(Integer userId) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'REASON = :reason'.
	 */
	public ExitEmployee[] findWhereReasonEquals(String reason) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'STATUS_ID = :statusId'.
	 */
	public ExitEmployee[] findWhereStatusIdEquals(Integer statusId) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'SUBMITTEDON = :submittedon'.
	 */
	public ExitEmployee[] findWhereSubmittedonEquals(Date submittedon) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'LAST_WORKING_DAY = :lastWorkingDay'.
	 */
	public ExitEmployee[] findWhereLastWorkingDayEquals(Date lastWorkingDay) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'BUY_BACK = :buyBack'.
	 */
	public ExitEmployee[] findWhereBuyBackEquals(Integer buyBack) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'COMMENTS = :comments'.
	 */
	public ExitEmployee[] findWhereCommentsEquals(String comments) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the criteria 'EMPLOYEE_NOTE = :employeeNote'.
	 */
	public ExitEmployee[] findWhereEmployeeNoteEquals(String employeeNote) throws ExitEmployeeDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	public String getTableName();

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the specified arbitrary SQL statement
	 */
	public ExitEmployee[] findByDynamicSelect(String sql, Object[] sqlParams) throws ExitEmployeeDaoException;

	/**
	 * Returns all rows from the EXIT_EMPLOYEE table that match the specified arbitrary SQL statement
	 */
	public ExitEmployee[] findByDynamicWhere(String sql, Object[] sqlParams) throws ExitEmployeeDaoException;

	public ExitEmployee[] findWhereEsrMapIdEquals(Integer esrMapId) throws ExitEmployeeDaoException ;

	public ExitEmployee[] findByDynamicSelectExitEmployee(String string, Object[] objects) throws ExitEmployeeDaoException ;
	
}
