/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface RegionsDao
{
	/** 
	 * Inserts a new row in the REGIONS table.
	 */
	public RegionsPk insert(Regions dto) throws RegionsDaoException;

	/** 
	 * Updates a single row in the REGIONS table.
	 */
	public void update(RegionsPk pk, Regions dto) throws RegionsDaoException;

	/** 
	 * Deletes a single row in the REGIONS table.
	 */
	public void delete(RegionsPk pk) throws RegionsDaoException;

	/** 
	 * Returns the rows from the REGIONS table that matches the specified primary-key value.
	 */
	public Regions findByPrimaryKey(RegionsPk pk) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'ID = :id'.
	 */
	public Regions findByPrimaryKey(int id) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria ''.
	 */
	public Regions[] findAll() throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'COMPANY_ID = :companyId'.
	 */
	public Regions[] findByCompany(int companyId) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'ID = :id'.
	 */
	public Regions[] findWhereIdEquals(int id) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'COMPANY_ID = :companyId'.
	 */
	public Regions[] findWhereCompanyIdEquals(int companyId) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'REG_NAME = :regName'.
	 */
	public Regions findWhereRegNameEquals(String regName) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'REF_ABBREVIATION = :refAbbreviation'.
	 */
	public Regions[] findWhereRefAbbreviationEquals(String refAbbreviation) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'PARENT_ID = :parentId'.
	 */
	public Regions[] findWhereParentIdEquals(int parentId) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Regions[] findWhereCreateDateEquals(Date createDate) throws RegionsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the REGIONS table that match the specified arbitrary SQL statement
	 */
	public Regions[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegionsDaoException;

	/** 
	 * Returns all rows from the REGIONS table that match the specified arbitrary SQL statement
	 */
	public Regions[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegionsDaoException;
	
	
	/** 
	 * Returns row from the REGIONS table that match the criteria 'LEVEL_ID =:levelId'.
	 */
	public Regions findByLevelId(int levelId) throws RegionsDaoException;

	public int getRegionId(int userId) throws Exception;

	

}
