/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface RegDivMapDao
{
	/** 
	 * Inserts a new row in the REG_DIV_MAP table.
	 */
	public RegDivMapPk insert(RegDivMap dto) throws RegDivMapDaoException;

	/** 
	 * Updates a single row in the REG_DIV_MAP table.
	 */
	public void update(RegDivMapPk pk, RegDivMap dto) throws RegDivMapDaoException;

	/** 
	 * Deletes a single row in the REG_DIV_MAP table.
	 */
	public void delete(RegDivMapPk pk) throws RegDivMapDaoException;

	/** 
	 * Returns the rows from the REG_DIV_MAP table that matches the specified primary-key value.
	 */
	public RegDivMap findByPrimaryKey(RegDivMapPk pk) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'ID = :id'.
	 */
	public RegDivMap findByPrimaryKey(int id) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'DIVISION_ID = :divisionId'.
	 */
	public RegDivMap[] findByDivison(int divisionId) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'REGION_ID = :regionId'.
	 */
	public RegDivMap[] findByRegions(int regionId) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria ''.
	 */
	public RegDivMap[] findAll() throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'ID = :id'.
	 */
	public RegDivMap[] findWhereIdEquals(int id) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'REGION_ID = :regionId'.
	 */
	public RegDivMap[] findWhereRegionIdEquals(int regionId) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the criteria 'DIVISION_ID = :divisionId'.
	 */
	public RegDivMap[] findWhereDivisionIdEquals(int divisionId) throws RegDivMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the specified arbitrary SQL statement
	 */
	public RegDivMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegDivMapDaoException;

	/** 
	 * Returns all rows from the REG_DIV_MAP table that match the specified arbitrary SQL statement
	 */
	public RegDivMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegDivMapDaoException;

	public RegDivMap findByRegDiv(int regionId, int divisionId) throws RegDivMapDaoException;

}
