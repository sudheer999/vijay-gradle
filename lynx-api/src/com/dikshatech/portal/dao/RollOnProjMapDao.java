/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface RollOnProjMapDao
{
	/** 
	 * Inserts a new row in the ROLL_ON_PROJ_MAP table.
	 */
	public RollOnProjMapPk insert(RollOnProjMap dto) throws RollOnProjMapDaoException;

	/** 
	 * Updates a single row in the ROLL_ON_PROJ_MAP table.
	 */
	public void update(RollOnProjMapPk pk, RollOnProjMap dto) throws RollOnProjMapDaoException;

	/** 
	 * Deletes a single row in the ROLL_ON_PROJ_MAP table.
	 */
	public void delete(RollOnProjMapPk pk) throws RollOnProjMapDaoException;

	/** 
	 * Returns the rows from the ROLL_ON_PROJ_MAP table that matches the specified primary-key value.
	 */
	public RollOnProjMap findByPrimaryKey(RollOnProjMapPk pk) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'ID = :id'.
	 */
	public RollOnProjMap findByPrimaryKey(int id) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria ''.
	 */
	public RollOnProjMap[] findAll() throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'ROLL_ON_ID = :rollOnId'.
	 */
	public RollOnProjMap[] findByRollOn(int rollOnId) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'ID = :id'.
	 */
	public RollOnProjMap[] findWhereIdEquals(int id) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'ROLL_ON_ID = :rollOnId'.
	 */
	public RollOnProjMap[] findWhereRollOnIdEquals(int rollOnId) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'PROJ_ID = :projId'.
	 */
	public RollOnProjMap[] findWhereProjIdEquals(int projId) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the criteria 'PROJ_LOC_ID = :projLocId'.
	 */
	public RollOnProjMap[] findWhereProjLocIdEquals(int projLocId) throws RollOnProjMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the specified arbitrary SQL statement
	 */
	public RollOnProjMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws RollOnProjMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_PROJ_MAP table that match the specified arbitrary SQL statement
	 */
	public RollOnProjMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws RollOnProjMapDaoException;

}
