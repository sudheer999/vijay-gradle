/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface PassportInfoDao
{
	/** 
	 * Inserts a new row in the PASSPORT_INFO table.
	 */
	public PassportInfoPk insert(PassportInfo dto) throws PassportInfoDaoException;

	/** 
	 * Updates a single row in the PASSPORT_INFO table.
	 */
	public void update(PassportInfoPk pk, PassportInfo dto) throws PassportInfoDaoException;

	/** 
	 * Deletes a single row in the PASSPORT_INFO table.
	 */
	public void delete(PassportInfoPk pk) throws PassportInfoDaoException;

	/** 
	 * Returns the rows from the PASSPORT_INFO table that matches the specified primary-key value.
	 */
	public PassportInfo findByPrimaryKey(PassportInfoPk pk) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'ID = :id'.
	 */
	public PassportInfo findByPrimaryKey(int id) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria ''.
	 */
	public PassportInfo[] findAll() throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'ID = :id'.
	 */
	public PassportInfo[] findWhereIdEquals(int id) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'GIVENNAME = :givenname'.
	 */
	public PassportInfo[] findWhereGivennameEquals(String givenname) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'SURNAME = :surname'.
	 */
	public PassportInfo[] findWhereSurnameEquals(String surname) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'PASSPORT_NO = :passportNo'.
	 */
	public PassportInfo[] findWherePassportNoEquals(String passportNo) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'DATE_OF_ISSUE = :dateOfIssue'.
	 */
	public PassportInfo[] findWhereDateOfIssueEquals(Date dateOfIssue) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'DATE_OF_EXPIRE = :dateOfExpire'.
	 */
	public PassportInfo[] findWhereDateOfExpireEquals(Date dateOfExpire) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'PLACE_OF_ISSUE = :placeOfIssue'.
	 */
	public PassportInfo[] findWherePlaceOfIssueEquals(String placeOfIssue) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the criteria 'PLACE_OF_BIRTH = :placeOfBirth'.
	 */
	public PassportInfo[] findWherePlaceOfBirthEquals(String placeOfBirth) throws PassportInfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the specified arbitrary SQL statement
	 */
	public PassportInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws PassportInfoDaoException;

	/** 
	 * Returns all rows from the PASSPORT_INFO table that match the specified arbitrary SQL statement
	 */
	public PassportInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws PassportInfoDaoException;

}
