/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import java.util.Map;

import com.dikshatech.portal.dto.Currency;
import com.dikshatech.portal.dto.CurrencyPk;
import com.dikshatech.portal.exceptions.CurrencyDaoException;

public interface CurrencyDao {

	/**
	 * Inserts a new row in the CURRENCY table.
	 */
	public CurrencyPk insert(Currency dto) throws CurrencyDaoException;

	/**
	 * Updates a single row in the CURRENCY table.
	 */
	public void update(CurrencyPk pk, Currency dto) throws CurrencyDaoException;

	/**
	 * Deletes a single row in the CURRENCY table.
	 */
	public void delete(CurrencyPk pk) throws CurrencyDaoException;

	/**
	 * Returns the rows from the CURRENCY table that matches the specified primary-key value.
	 */
	public Currency findByPrimaryKey(CurrencyPk pk) throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the criteria 'ID = :id'.
	 */
	public Currency findByPrimaryKey(int id) throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the criteria ''.
	 */
	public Currency[] findAll() throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the criteria 'ID = :id'.
	 */
	public Currency[] findWhereIdEquals(int id) throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the criteria 'NAME = :name'.
	 */
	public Currency[] findWhereNameEquals(String name) throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the criteria 'ABBREVATION = :abbrevation'.
	 */
	public Currency[] findWhereAbbrevationEquals(String abbrevation) throws CurrencyDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the CURRENCY table that match the specified arbitrary SQL statement
	 */
	public Currency[] findByDynamicSelect(String sql, Object[] sqlParams) throws CurrencyDaoException;

	/**
	 * Returns all rows from the CURRENCY table that match the specified arbitrary SQL statement
	 */
	public Currency[] findByDynamicWhere(String sql, Object[] sqlParams) throws CurrencyDaoException;

	public Map<String, String> getAllCurrencyTypes();
}
