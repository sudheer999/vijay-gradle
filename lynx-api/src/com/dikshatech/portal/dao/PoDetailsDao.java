/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface PoDetailsDao
{
	/** 
	 * Inserts a new row in the PO_DETAILS table.
	 */
	public PoDetailsPk insert(PoDetails dto) throws PoDetailsDaoException;

	/** 
	 * Updates a single row in the PO_DETAILS table.
	 */
	public void update(PoDetailsPk pk, PoDetails dto) throws PoDetailsDaoException;

	/** 
	 * Deletes a single row in the PO_DETAILS table.
	 */
	public void delete(PoDetailsPk pk) throws PoDetailsDaoException;

	/** 
	 * Returns the rows from the PO_DETAILS table that matches the specified primary-key value.
	 */
	public PoDetails findByPrimaryKey(PoDetailsPk pk) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public PoDetails findByPrimaryKey(int id) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria ''.
	 */
	public PoDetails[] findAll() throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'ID = :id'.
	 */
	public PoDetails[] findWhereIdEquals(int id) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public PoDetails[] findWhereProjIdEquals(int projId) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_NUMBER = :poNumber'.
	 */
	public PoDetails[] findWherePoNumberEquals(String poNumber) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_DATE = :poDate'.
	 */
	public PoDetails[] findWherePoDateEquals(Date poDate) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_ST_DATE = :poStDate'.
	 */
	public PoDetails[] findWherePoStDateEquals(Date poStDate) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_END_DATE = :poEndDate'.
	 */
	public PoDetails[] findWherePoEndDateEquals(Date poEndDate) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PO_DURATION = :poDuration'.
	 */
	public PoDetails[] findWherePoDurationEquals(String poDuration) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'PAYMENT_TERMS = :paymentTerms'.
	 */
	public PoDetails[] findWherePaymentTermsEquals(String paymentTerms) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the criteria 'IS_DISABLE = :isDisable'.
	 */
	public PoDetails[] findWhereIsDisableEquals(short isDisable) throws PoDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PoDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws PoDetailsDaoException;

	/** 
	 * Returns all rows from the PO_DETAILS table that match the specified arbitrary SQL statement
	 */
	public PoDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws PoDetailsDaoException;

	public int updatePoDetailsForProjectDisable(int id) throws PoDetailsDaoException;
	
	public int updatePoDetailsForProjectEnable(int id) throws PoDetailsDaoException;
	
	public PoDetailsPk insert1(PoDetail dto) throws PoDetailsDaoException;

}
