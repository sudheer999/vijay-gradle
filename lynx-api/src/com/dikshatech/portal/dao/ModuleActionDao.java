/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ModuleActionDao
{
	/** 
	 * Inserts a new row in the MODULE_ACTION table.
	 */
	public ModuleActionPk insert(ModuleAction dto) throws ModuleActionDaoException;

	/** 
	 * Updates a single row in the MODULE_ACTION table.
	 */
	public void update(ModuleActionPk pk, ModuleAction dto) throws ModuleActionDaoException;

	/** 
	 * Deletes a single row in the MODULE_ACTION table.
	 */
	public void delete(ModuleActionPk pk) throws ModuleActionDaoException;

	/** 
	 * Returns the rows from the MODULE_ACTION table that matches the specified primary-key value.
	 */
	public ModuleAction findByPrimaryKey(ModuleActionPk pk) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'ID = :id'.
	 */
	public ModuleAction findByPrimaryKey(int id) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria ''.
	 */
	public ModuleAction[] findAll() throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'MODULE_ID = :moduleId'.
	 */
	public ModuleAction[] findByModules(int moduleId) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public ModuleAction[] findByRoles(int roleId) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'ID = :id'.
	 */
	public ModuleAction[] findWhereIdEquals(int id) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public ModuleAction[] findWhereRoleIdEquals(int roleId) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'MODULE_ID = :moduleId'.
	 */
	public ModuleAction[] findWhereModuleIdEquals(int moduleId) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the criteria 'ACTION_CHAIN = :actionChain'.
	 */
	public ModuleAction[] findWhereActionChainEquals(String actionChain) throws ModuleActionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the specified arbitrary SQL statement
	 */
	public ModuleAction[] findByDynamicSelect(String sql, Object[] sqlParams) throws ModuleActionDaoException;

	/** 
	 * Returns all rows from the MODULE_ACTION table that match the specified arbitrary SQL statement
	 */
	public ModuleAction[] findByDynamicWhere(String sql, Object[] sqlParams) throws ModuleActionDaoException;

}
