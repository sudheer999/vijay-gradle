/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;

import com.dikshatech.portal.dto.TimeSheetDetails;
import com.dikshatech.portal.dto.TimeSheetDetailsPk;
import com.dikshatech.portal.exceptions.TimeSheetDetailsDaoException;

public interface TimeSheetDetailsDao
{
	/** 
	 * Inserts a new row in the TIME_SHEET_DETAILS table.
	 */
	public TimeSheetDetailsPk insert(TimeSheetDetails dto) throws TimeSheetDetailsDaoException;

	/** 
	 * Updates a single row in the TIME_SHEET_DETAILS table.
	 */
	public void update(TimeSheetDetailsPk pk, TimeSheetDetails dto) throws TimeSheetDetailsDaoException;

	/** 
	 * Deletes a single row in the TIME_SHEET_DETAILS table.
	 */
	public void delete(TimeSheetDetailsPk pk) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns the rows from the TIME_SHEET_DETAILS table that matches the specified primary-key value.
	 */
	public TimeSheetDetails findByPrimaryKey(TimeSheetDetailsPk pk) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TimeSheetDetails findByPrimaryKey(int id) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria ''.
	 */
	public TimeSheetDetails[] findAll() throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TimeSheetDetails[] findWhereIdEquals(int id) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'START_DATE = :startDate'.
	 */
	public TimeSheetDetails[] findWhereStartDateEquals(Date startDate) throws TimeSheetDetailsDaoException;
	public TimeSheetDetails[] findWhereStartDateEquals(Date startDate, int userId) throws TimeSheetDetailsDaoException;
	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'END_DATE = :endDate'.
	 */
	public TimeSheetDetails[] findWhereEndDateEquals(Date endDate) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'STATUS = :status'.
	 */
	public TimeSheetDetails[] findWhereStatusEquals(String status) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'SUBMISSION_DATE = :submissionDate'.
	 */
	public TimeSheetDetails[] findWhereSubmissionDateEquals(Date submissionDate) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'USER_ID = :userId'.
	 */
	public TimeSheetDetails[] findWhereUserIdEquals(int userId) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'COMP_OFF = :compOff'.
	 */
	public TimeSheetDetails[] findWhereCompOffEquals(float compOff) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the criteria 'IS_DELAYED = :isDelayed'.
	 */
	public TimeSheetDetails[] findWhereIsDelayedEquals(short isDelayed) throws TimeSheetDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TimeSheetDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws TimeSheetDetailsDaoException;

	/** 
	 * Returns all rows from the TIME_SHEET_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TimeSheetDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws TimeSheetDetailsDaoException;

}
