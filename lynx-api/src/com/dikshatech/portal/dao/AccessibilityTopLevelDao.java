/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface AccessibilityTopLevelDao
{
	/** 
	 * Inserts a new row in the ACCESSIBILITY_TOP_LEVEL table.
	 */
	public AccessibilityTopLevelPk insert(AccessibilityTopLevel dto) throws AccessibilityTopLevelDaoException;

	/** 
	 * Updates a single row in the ACCESSIBILITY_TOP_LEVEL table.
	 */
	public void update(AccessibilityTopLevelPk pk, AccessibilityTopLevel dto) throws AccessibilityTopLevelDaoException;

	/** 
	 * Deletes a single row in the ACCESSIBILITY_TOP_LEVEL table.
	 */
	public void delete(AccessibilityTopLevelPk pk) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns the rows from the ACCESSIBILITY_TOP_LEVEL table that matches the specified primary-key value.
	 */
	public AccessibilityTopLevel findByPrimaryKey(AccessibilityTopLevelPk pk) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'ID = :id'.
	 */
	public AccessibilityTopLevel findByPrimaryKey(int id) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria ''.
	 */
	public AccessibilityTopLevel[] findAll() throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'ID = :id'.
	 */
	public AccessibilityTopLevel[] findWhereIdEquals(int id) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'COMPANY_ID = :companyId'.
	 */
	public AccessibilityTopLevel[] findWhereCompanyIdEquals(String companyId) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'REGION_ID = :regionId'.
	 */
	public AccessibilityTopLevel[] findWhereRegionIdEquals(String regionId) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'DIVISION_ID = :divisionId'.
	 */
	public AccessibilityTopLevel[] findWhereDivisionIdEquals(String divisionId) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public AccessibilityTopLevel[] findWhereDepartmentIdEquals(String departmentId) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'USER_IDS = :userIds'.
	 */
	public AccessibilityTopLevel[] findWhereUserIdsEquals(String userIds) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the criteria 'ACCESSIBILITY_ID = :accessibilityId'.
	 */
	public AccessibilityTopLevel[] findWhereAccessibilityIdEquals(int accessibilityId) throws AccessibilityTopLevelDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the specified arbitrary SQL statement
	 */
	public AccessibilityTopLevel[] findByDynamicSelect(String sql, Object[] sqlParams) throws AccessibilityTopLevelDaoException;

	/** 
	 * Returns all rows from the ACCESSIBILITY_TOP_LEVEL table that match the specified arbitrary SQL statement
	 */
	public AccessibilityTopLevel[] findByDynamicWhere(String sql, Object[] sqlParams) throws AccessibilityTopLevelDaoException;

}
