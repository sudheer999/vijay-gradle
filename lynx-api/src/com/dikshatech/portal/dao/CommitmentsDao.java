/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface CommitmentsDao
{
	/** 
	 * Inserts a new row in the COMMITMENTS table.
	 */
	public CommitmentsPk insert(Commitments dto) throws CommitmentsDaoException;

	/** 
	 * Updates a single row in the COMMITMENTS table.
	 */
	public void update(CommitmentsPk pk, Commitments dto) throws CommitmentsDaoException;

	/** 
	 * Deletes a single row in the COMMITMENTS table.
	 */
	public void delete(CommitmentsPk pk) throws CommitmentsDaoException;

	/** 
	 * Returns the rows from the COMMITMENTS table that matches the specified primary-key value.
	 */
	public Commitments findByPrimaryKey(CommitmentsPk pk) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'ID = :id'.
	 */
	public Commitments findByPrimaryKey(int id) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria ''.
	 */
	public Commitments[] findAll() throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'ID = :id'.
	 */
	public Commitments[] findWhereIdEquals(int id) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'COMMENTS = :comments'.
	 */
	public Commitments[] findWhereCommentsEquals(String comments) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'DATE_PICKER = :datePicker'.
	 */
	public Commitments[] findWhereDatePickerEquals(Date datePicker) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Commitments[] findWhereCandidateIdEquals(int candidateId) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the criteria 'USER_ID_EMP = :userIdEmp'.
	 */
	public Commitments[] findWhereUserIdEmpEquals(int userIdEmp) throws CommitmentsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the COMMITMENTS table that match the specified arbitrary SQL statement
	 */
	public Commitments[] findByDynamicSelect(String sql, Object[] sqlParams) throws CommitmentsDaoException;

	/** 
	 * Returns all rows from the COMMITMENTS table that match the specified arbitrary SQL statement
	 */
	public Commitments[] findByDynamicWhere(String sql, Object[] sqlParams) throws CommitmentsDaoException;
	
	/** 
	 * Deletes a single row in the COMMITMENTS table.
	 */
	public void dynamicDelete(int id) throws CommitmentsDaoException;

}
