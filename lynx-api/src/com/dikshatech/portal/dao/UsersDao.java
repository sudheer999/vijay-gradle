/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.dikshatech.beans.EmployeeBonus;
import com.dikshatech.beans.EmployeePerdiem;
import com.dikshatech.beans.ProfileListBean;
import com.dikshatech.beans.UserBean;
import com.dikshatech.portal.dto.ProfileInfo;
import com.dikshatech.portal.dto.Users;
import com.dikshatech.portal.dto.UsersPk;
import com.dikshatech.portal.exceptions.ProfileInfoDaoException;
import com.dikshatech.portal.exceptions.UsersDaoException;

public interface UsersDao {

	/**
	 * Inserts a new row in the USERS table.
	 */
	public UsersPk insert(Users dto) throws UsersDaoException;

	/**
	 * Updates a single row in the USERS table.
	 */
	public void update(UsersPk pk, Users dto) throws UsersDaoException;

	/**
	 * Deletes a single row in the USERS table.
	 */
	public void delete(UsersPk pk) throws UsersDaoException;

	/**
	 * Returns the rows from the USERS table that matches the specified primary-key value.
	 */
	public Users findByPrimaryKey(UsersPk pk) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'ID = :id'.
	 */
	public Users findByPrimaryKey(int id) throws UsersDaoException;
	public Users findByPrimaryKeys(int id) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'FINANCE_ID = :financeId'.
	 */
	public Users[] findByFinanceInfo(int financeId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public Users[] findByLevels(int levelId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria ''.
	 */
	public Users[] findAll() throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'ID = :id'.
	 */
	public Users[] findWhereIdEquals(int id) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'EMP_ID = :empId'.
	 */
	public Users[] findWhereEmpIdEquals(int empId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public Users[] findWhereLevelIdEquals(int levelId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'REG_DIV_ID = :regDivId'.
	 */
	public Users[] findWhereRegDivIdEquals(int regDivId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'PROFILE_ID = :profileId'.
	 */
	public Users[] findWhereProfileIdEquals(int profileId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'FINANCE_ID = :financeId'.
	 */
	public Users[] findWhereFinanceIdEquals(int financeId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'NOMINEE_ID = :nomineeId'.
	 */
	public Users[] findWhereNomineeIdEquals(int nomineeId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Users[] findWherePassportIdEquals(int passportId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'PERSONAL_ID = :personalId'.
	 */
	public Users[] findWherePersonalIdEquals(int personalId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'SALARY_ID = :salaryId'.
	 */
	public Users[] findWhereSalaryIdEquals(int salaryId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'STATUS = :status'.
	 */
	public Users[] findWhereStatusEquals(short status) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Users[] findWhereCreateDateEquals(Date createDate) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'USER_CREATED_BY = :userCreatedBy'.
	 */
	public Users[] findWhereUserCreatedByEquals(int userCreatedBy) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public Users[] findWhereExperienceIdEquals(int experienceId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'SKILLSET_ID = :skillsetId'.
	 */
	public Users[] findWhereSkillsetIdEquals(String skillsetId) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'OTHERS = :others'.
	 */
	public Users[] findWhereOthersEquals(String others) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public Users[] findWhereActionByEquals(int actionBy) throws UsersDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the USERS table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsersDaoException;

	/**
	 * Returns all rows from the USERS table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsersDaoException;

	/**
	 * Return all Users by the division id
	 */
	public Users[] findUsersByDivision(int i) throws UsersDaoException;

	public Collection findAllEmployeeIds() throws UsersDaoException;

	public Map<Integer, Integer> findAllUsersEmployeeIds() throws UsersDaoException;

	public Map<Integer, Integer> findAllUsersEmployeeIds(boolean isUserIdAsKey) throws UsersDaoException;
	public UserBean[] findAllUserNames(String sql, Object[] sqlParams) throws UsersDaoException;

	public ProfileListBean[] findAllEmployeesProfileListBean(int status) throws UsersDaoException;
	
	public List<String[]> findAllEmployeesDetailProfileListBean(int status) throws UsersDaoException;


	public List<EmployeePerdiem> receiveAllEmployeesForPerdiem(Integer[] sqlParams, boolean isFirstLevel, int loggedInPerson) throws UsersDaoException;

	public List<EmployeeBonus> receiveAllEmployeesForBonus(Integer[] integers, boolean isFirstLevel, int loggedInPerson) throws UsersDaoException;
	
	public Users[] findByDynamicSelect1(String string, Object[] objects) throws UsersDaoException;

	public Users[] findWhereProfileIdEquals(String string, Object[] objects) throws UsersDaoException;

	
}
