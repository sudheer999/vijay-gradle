/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface CandidateReqDao
{
	/** 
	 * Inserts a new row in the CANDIDATE_REQ table.
	 */
	public CandidateReqPk insert(CandidateReq dto) throws CandidateReqDaoException;

	/** 
	 * Updates a single row in the CANDIDATE_REQ table.
	 */
	public void update(CandidateReqPk pk, CandidateReq dto) throws CandidateReqDaoException;

	/** 
	 * Deletes a single row in the CANDIDATE_REQ table.
	 */
	public void delete(CandidateReqPk pk) throws CandidateReqDaoException;

	/** 
	 * Returns the rows from the CANDIDATE_REQ table that matches the specified primary-key value.
	 */
	public CandidateReq findByPrimaryKey(CandidateReqPk pk) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'ID = :id'.
	 */
	public CandidateReq findByPrimaryKey(int id) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria ''.
	 */
	public CandidateReq[] findAll() throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'ESRQM_ID = :esrqmId'.
	 */
	public CandidateReq[] findWhereEsrqmIdEquals(int esrqmId) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'STATUS = :status'.
	 */
	public CandidateReq[] findWhereStatusEquals(String status) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public CandidateReq[] findWhereAssignedToEquals(int assignedTo) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'RAISED_BY = :raisedBy'.
	 */
	public CandidateReq[] findWhereRaisedByEquals(int raisedBy) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public CandidateReq[] findWhereCandidateIdEquals(int candidateId) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'RE_SERVE = :reServe'.
	 */
	public CandidateReq[] findWhereReServeEquals(short reServe) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'CREATEDATETIME = :createdatetime'.
	 */
	public CandidateReq[] findWhereCreatedatetimeEquals(Date createdatetime) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'CYCLE = :cycle'.
	 */
	public CandidateReq[] findWhereCycleEquals(int cycle) throws CandidateReqDaoException;
	
	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public CandidateReq[] findWhereMessageBodyEquals(String messageBody) throws CandidateReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the specified arbitrary SQL statement
	 */
	public CandidateReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws CandidateReqDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_REQ table that match the specified arbitrary SQL statement
	 */
	public CandidateReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws CandidateReqDaoException;
	
	/** 
	 * Updates all rows from the CANDIDATE_REQ table that match the specified arbitrary SQL statement
	 */
	public boolean updateServe(int esrMapId) throws CandidateReqDaoException;

}