/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface RequestedIssuesDao
{
	/** 
	 * Inserts a new row in the REQUESTED_ISSUES table.
	 */
	public RequestedIssuesPk insert(RequestedIssues dto) throws RequestedIssuesDaoException;

	/** 
	 * Updates a single row in the REQUESTED_ISSUES table.
	 */
	public void update(RequestedIssuesPk pk, RequestedIssues dto) throws RequestedIssuesDaoException;

	/** 
	 * Deletes a single row in the REQUESTED_ISSUES table.
	 */
	public void delete(RequestedIssuesPk pk) throws RequestedIssuesDaoException;

	/** 
	 * Returns the rows from the REQUESTED_ISSUES table that matches the specified primary-key value.
	 */
	public RequestedIssues findByPrimaryKey(RequestedIssuesPk pk) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ID = :id'.
	 */
	public RequestedIssues findByPrimaryKey(int id) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria ''.
	 */
	public RequestedIssues[] findAll() throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ID = :id'.
	 */
	public RequestedIssues[] findWhereIdEquals(int id) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'SUBMISSION_DATE = :submissionDate'.
	 */
	public RequestedIssues[] findWhereSubmissionDateEquals(Date submissionDate) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'STATUS = :status'.
	 */
	public RequestedIssues[] findWhereStatusEquals(String status) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'SUMMARY = :summary'.
	 */
	public RequestedIssues[] findWhereSummaryEquals(String summary) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'DESCRIPTION = :description'.
	 */
	public RequestedIssues[] findWhereDescriptionEquals(String description) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'AUTO_REQ_ID = :autoReqId'.
	 */
	public RequestedIssues[] findWhereAutoReqIdEquals(String autoReqId) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'DEPENDENT_ID = :dependentId'.
	 */
	public RequestedIssues[] findWhereDependentIdEquals(String dependentId) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public RequestedIssues[] findWhereEsrMapIdEquals(int esrMapId) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'COMMENT = :comment'.
	 */
	public RequestedIssues[] findWhereCommentEquals(String comment) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'ISSUE_ID = :issueId'.
	 */
	public RequestedIssues[] findWhereIssueIdEquals(int issueId) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the criteria 'USER_ID = :userId'.
	 */
	public RequestedIssues[] findWhereUserIdEquals(int userId) throws RequestedIssuesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the specified arbitrary SQL statement
	 */
	public RequestedIssues[] findByDynamicSelect(String sql, Object[] sqlParams) throws RequestedIssuesDaoException;

	/** 
	 * Returns all rows from the REQUESTED_ISSUES table that match the specified arbitrary SQL statement
	 */
	public RequestedIssues[] findByDynamicWhere(String sql, Object[] sqlParams) throws RequestedIssuesDaoException;

}
