/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.SalaryInfo;
import com.dikshatech.portal.dto.SalaryInfoPk;
import com.dikshatech.portal.exceptions.SalaryInfoDaoException;

public interface SalaryInfoDao {

	/**
	 * Inserts a new row in the SALARY_INFO table.
	 */
	public SalaryInfoPk insert(SalaryInfo dto) throws SalaryInfoDaoException;

	/**
	 * Updates a single row in the SALARY_INFO table.
	 */
	public void update(SalaryInfoPk pk, SalaryInfo dto) throws SalaryInfoDaoException;

	/**
	 * Deletes a single row in the SALARY_INFO table.
	 */
	public void delete(SalaryInfoPk pk) throws SalaryInfoDaoException;

	/**
	 * Returns the rows from the SALARY_INFO table that matches the specified primary-key value.
	 */
	public SalaryInfo findByPrimaryKey(SalaryInfoPk pk) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ID = :id'.
	 */
	public SalaryInfo findByPrimaryKey(int id) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria ''.
	 */
	public SalaryInfo[] findAll() throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ID = :id'.
	 */
	public SalaryInfo[] findWhereIdEquals(int id) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'BASIC = :basic'.
	 */
	public SalaryInfo[] findWhereBasicEquals(int basic) throws SalaryInfoDaoException;
	public SalaryInfo[] findWhereuserIdEquals(int userId) throws SalaryInfoDaoException;
	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'HRA = :hra'.
	 */
	public SalaryInfo[] findWhereHraEquals(int hra) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'CONVEYANCE = :conveyance'.
	 */
	public SalaryInfo[] findWhereConveyanceEquals(int conveyance) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'MEDICAL_ALLOWANCE = :medicalAllowance'.
	 */
	public SalaryInfo[] findWhereMedicalAllowanceEquals(int medicalAllowance) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'SPECIAL_ALLOWANCE = :specialAllowance'.
	 */
	public SalaryInfo[] findWhereSpecialAllowanceEquals(int specialAllowance) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PF_EMP_CONTRIBUTION = :pfEmpContribution'.
	 */
	public SalaryInfo[] findWherePfEmpContributionEquals(int pfEmpContribution) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'ANNUAL_INCENTIVE = :annualIncentive'.
	 */
	public SalaryInfo[] findWhereAnnualIncentiveEquals(int annualIncentive) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'RELOCATION_BONUS = :relocationBonus'.
	 */
	public SalaryInfo[] findWhereRelocationBonusEquals(String relocationBonus) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'JOINING_BONUS_STRING = :joiningBonusString'.
	 */
	public SalaryInfo[] findWhereJoiningBonusStringEquals(String joiningBonusString) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'JOINING_BONUS_DATE = :joiningBonusDate'.
	 */
	public SalaryInfo[] findWhereJoiningBonusDateEquals(String joiningBonusDate) throws SalaryInfoDaoException;
	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'RETENTION_BONUS = :retentionBonus'.
	 */
	
	public SalaryInfo[] findWhereRetentionBonusEquals(String retentionBonus)throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PAYMENT_TERMS = :paymentTerms'.
	 */
	public SalaryInfo[] findWherePaymentTermsEquals(String paymentTerms) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PERDIEM_STRING = :perdiemString'.
	 */
	public SalaryInfo[] findWherePerdiemStringEquals(String perdiemString) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'TOTAL_SALARY = :totalSalary'.
	 */
	public SalaryInfo[] findWhereTotalSalaryEquals(int totalSalary) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'MEDI_CLAIM_POLICY = :mediClaimPolicy'.
	 */
	public SalaryInfo[] findWhereMediClaimPolicyEquals(int mediClaimPolicy) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the criteria 'PER_ACCIDENT_POLICY = :perAccidentPolicy'.
	 */
	public SalaryInfo[] findWherePerAccidentPolicyEquals(int perAccidentPolicy) throws SalaryInfoDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the SALARY_INFO table that match the specified arbitrary SQL statement
	 */
	public SalaryInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryInfoDaoException;

	/**
	 * Returns all rows from the SALARY_INFO table that match the specified arbitrary SQL statement
	 */
	public SalaryInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryInfoDaoException;
}
