/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import java.util.Date;
import java.util.List;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface FestivalWishesDao {

	/**
	 * Inserts a new row in the FESTIVAL_WISHES table.
	 */
	public FestivalWishesPk insert(FestivalWishes dto) throws FestivalWishesDaoException;

	/**
	 * Updates a single row in the FESTIVAL_WISHES table.
	 */
	public void update(FestivalWishesPk pk, FestivalWishes dto) throws FestivalWishesDaoException;

	/**
	 * Deletes a single row in the FESTIVAL_WISHES table.
	 */
	public void delete(FestivalWishesPk pk) throws FestivalWishesDaoException;

	/**
	 * Returns the rows from the FESTIVAL_WISHES table that matches the specified primary-key value.
	 */
	public FestivalWishes findByPrimaryKey(FestivalWishesPk pk) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'ID = :id'.
	 */
	public FestivalWishes findByPrimaryKey(int id) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria ''.
	 */
	public FestivalWishes[] findAll() throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'ID = :id'.
	 */
	public FestivalWishes[] findWhereIdEquals(int id) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'DOF = :dof'.
	 */
	public FestivalWishes[] findWhereDofEquals(Date dof) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'NAME = :name'.
	 */
	public FestivalWishes[] findWhereNameEquals(String name) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'WISHES = :wishes'.
	 */
	public FestivalWishes[] findWhereWishesEquals(String wishes) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'REGION_ID = :regionId'.
	 */
	public FestivalWishes[] findWhereRegionIdEquals(int regionId) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'IMAGE_ID = :imageId'.
	 */
	public FestivalWishes[] findWhereImageIdEquals(int imageId) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the criteria 'YEAR = :year'.
	 */
	public FestivalWishes[] findWhereYearEquals(int year) throws FestivalWishesDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the specified arbitrary SQL statement
	 */
	public FestivalWishes[] findByDynamicSelect(String sql, Object[] sqlParams) throws FestivalWishesDaoException;

	/**
	 * Returns all rows from the FESTIVAL_WISHES table that match the specified arbitrary SQL statement
	 */
	public FestivalWishes[] findByDynamicWhere(String sql, Object[] sqlParams) throws FestivalWishesDaoException;

	public Integer[] findByDistinct(String sql, String columnName) throws ProfileInfoDaoException;

	public void delete(List<Integer> ids) throws FestivalWishesDaoException;

	public void delete(String string) throws FestivalWishesDaoException;
}
