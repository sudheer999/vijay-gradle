/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface NewsDao
{
	/** 
	 * Inserts a new row in the NEWS table.
	 */
	public NewsPk insert(News dto) throws NewsDaoException;

	/** 
	 * Updates a single row in the NEWS table.
	 */
	public void update(NewsPk pk, News dto) throws NewsDaoException;

	/** 
	 * Deletes a single row in the NEWS table.
	 */
	public void delete(NewsPk pk) throws NewsDaoException;

	/** 
	 * Returns the rows from the NEWS table that matches the specified primary-key value.
	 */
	public News findByPrimaryKey(NewsPk pk) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'ID = :id'.
	 */
	public News findByPrimaryKey(int id) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria ''.
	 */
	public News[] findAll() throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'ID = :id'.
	 */
	public News[] findWhereIdEquals(int id) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'NEWS_TITLE = :newsTitle'.
	 */
	public News[] findWhereNewsTitleEquals(String newsTitle) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'NEWS_HTML_TITLE = :newsHtmlTitle'.
	 */
	public News[] findWhereNewsHtmlTitleEquals(String newsHtmlTitle) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'NEWS_DISC = :newsDisc'.
	 */
	public News[] findWhereNewsDiscEquals(String newsDisc) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'PHOTOS = :photos'.
	 */
	public News[] findWherePhotosEquals(String photos) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public News[] findWhereCreateDateEquals(Date createDate) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'USER_ID = :userId'.
	 */
	public News[] findWhereUserIdEquals(int userId) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'REGION_ID = :regionId'.
	 */
	public News[] findWhereRegionIdEquals(int regionId) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the criteria 'DIV_ID = :divId'.
	 */
	public News[] findWhereDivIdEquals(int divId) throws NewsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the NEWS table that match the specified arbitrary SQL statement
	 */
	public News[] findByDynamicSelect(String sql, Object[] sqlParams) throws NewsDaoException;

	/** 
	 * Returns all rows from the NEWS table that match the specified arbitrary SQL statement
	 */
	public News[] findByDynamicWhere(String sql, Object[] sqlParams) throws NewsDaoException;

}
