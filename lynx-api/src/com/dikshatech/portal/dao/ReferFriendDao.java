/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ReferFriendDao
{
	/** 
	 * Inserts a new row in the REFER_FRIEND table.
	 */
	public ReferFriendPk insert(ReferFriend dto) throws ReferFriendDaoException;

	/** 
	 * Updates a single row in the REFER_FRIEND table.
	 */
	public void update(ReferFriendPk pk, ReferFriend dto) throws ReferFriendDaoException;

	/** 
	 * Deletes a single row in the REFER_FRIEND table.
	 */
	public void delete(ReferFriendPk pk) throws ReferFriendDaoException;

	/** 
	 * Returns the rows from the REFER_FRIEND table that matches the specified primary-key value.
	 */
	public ReferFriend findByPrimaryKey(ReferFriendPk pk) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ID = :id'.
	 */
	public ReferFriend findByPrimaryKey(int id) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria ''.
	 */
	public ReferFriend[] findAll() throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ID = :id'.
	 */
	public ReferFriend[] findWhereIdEquals(int id) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ReferFriend[] findWhereEsrMapIdEquals(int esrMapId) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'SUMMARY = :summary'.
	 */
	public ReferFriend[] findWhereSummaryEquals(String summary) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'ATTACHMENT = :attachment'.
	 */
	public ReferFriend[] findWhereAttachmentEquals(int attachment) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'REFERRED_TO = :referredTo'.
	 */
	public ReferFriend[] findWhereReferredToEquals(String referredTo) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'DEPARTMENT = :department'.
	 */
	public ReferFriend[] findWhereDepartmentEquals(String department) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'EXPERIENCE_LAVEL = :experienceLavel'.
	 */
	public ReferFriend[] findWhereExperienceLavelEquals(String experienceLavel) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'REFERRED_BY = :referredBy'.
	 */
	public ReferFriend[] findWhereReferredByEquals(int referredBy) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ReferFriend[] findWhereCreateDateEquals(Date createDate) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'LAST_MODIFIED_DATE = :lastModifiedDate'.
	 */
	public ReferFriend[] findWhereLastModifiedDateEquals(Date lastModifiedDate) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the criteria 'IS_DELETED = :isDeleted'.
	 */
	public ReferFriend[] findWhereIsDeletedEquals(short isDeleted) throws ReferFriendDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the specified arbitrary SQL statement
	 */
	public ReferFriend[] findByDynamicSelect(String sql, Object[] sqlParams) throws ReferFriendDaoException;

	/** 
	 * Returns all rows from the REFER_FRIEND table that match the specified arbitrary SQL statement
	 */
	public ReferFriend[] findByDynamicWhere(String sql, Object[] sqlParams) throws ReferFriendDaoException;

}
