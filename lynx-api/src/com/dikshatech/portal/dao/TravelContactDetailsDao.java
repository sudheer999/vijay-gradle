/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface TravelContactDetailsDao
{
	/** 
	 * Inserts a new row in the TRAVEL_CONTACT_DETAILS table.
	 */
	public TravelContactDetailsPk insert(TravelContactDetails dto) throws TravelContactDetailsDaoException;

	/** 
	 * Updates a single row in the TRAVEL_CONTACT_DETAILS table.
	 */
	public void update(TravelContactDetailsPk pk, TravelContactDetails dto) throws TravelContactDetailsDaoException;

	/** 
	 * Deletes a single row in the TRAVEL_CONTACT_DETAILS table.
	 */
	public void delete(TravelContactDetailsPk pk) throws TravelContactDetailsDaoException;

	/** 
	 * Returns the rows from the TRAVEL_CONTACT_DETAILS table that matches the specified primary-key value.
	 */
	public TravelContactDetails findByPrimaryKey(TravelContactDetailsPk pk) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TravelContactDetails findByPrimaryKey(int id) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria ''.
	 */
	public TravelContactDetails[] findAll() throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'ID = :id'.
	 */
	public TravelContactDetails[] findWhereIdEquals(int id) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'TL_ID = :tlId'.
	 */
	public TravelContactDetails[] findWhereTlIdEquals(int tlId) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'CONTACT_PERSON = :contactPerson'.
	 */
	public TravelContactDetails[] findWhereContactPersonEquals(String contactPerson) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'PHONE_NO = :phoneNo'.
	 */
	public TravelContactDetails[] findWherePhoneNoEquals(String phoneNo) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'EMAIL_ID = :emailId'.
	 */
	public TravelContactDetails[] findWhereEmailIdEquals(String emailId) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the criteria 'ADDRESS = :address'.
	 */
	public TravelContactDetails[] findWhereAddressEquals(String address) throws TravelContactDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TravelContactDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws TravelContactDetailsDaoException;

	/** 
	 * Returns all rows from the TRAVEL_CONTACT_DETAILS table that match the specified arbitrary SQL statement
	 */
	public TravelContactDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws TravelContactDetailsDaoException;

}
