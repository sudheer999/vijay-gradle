/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface UserRolesDao
{
	/** 
	 * Inserts a new row in the USER_ROLES table.
	 */
	public UserRolesPk insert(UserRoles dto) throws UserRolesDaoException;

	/** 
	 * Updates a single row in the USER_ROLES table.
	 */
	public void update(UserRolesPk pk, UserRoles dto) throws UserRolesDaoException;

	/** 
	 * Deletes a single row in the USER_ROLES table.
	 */
	public void delete(UserRolesPk pk) throws UserRolesDaoException;

	/** 
	 * Returns the rows from the USER_ROLES table that matches the specified primary-key value.
	 */
	public UserRoles findByPrimaryKey(UserRolesPk pk) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria 'ID = :id'.
	 */
	public UserRoles findByPrimaryKey(int id) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria ''.
	 */
	public UserRoles[] findAll() throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria 'ID = :id'.
	 */
	public UserRoles[] findWhereIdEquals(int id) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria 'USER_ID = :userId'.
	 */
	public UserRoles findWhereUserIdEquals(int userId) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public UserRoles[] findWhereCandidateIdEquals(int candidateId) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public UserRoles[] findWhereRoleIdEquals(int roleId) throws UserRolesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the USER_ROLES table that match the specified arbitrary SQL statement
	 */
	public UserRoles[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserRolesDaoException;

	/** 
	 * Returns all rows from the USER_ROLES table that match the specified arbitrary SQL statement
	 */
	public UserRoles[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserRolesDaoException;

}