/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ModuleAlertDao
{
	/** 
	 * Inserts a new row in the MODULE_ALERT table.
	 */
	public ModuleAlertPk insert(ModuleAlert dto) throws ModuleAlertDaoException;

	/** 
	 * Updates a single row in the MODULE_ALERT table.
	 */
	public void update(ModuleAlertPk pk, ModuleAlert dto) throws ModuleAlertDaoException;

	/** 
	 * Deletes a single row in the MODULE_ALERT table.
	 */
	public void delete(ModuleAlertPk pk) throws ModuleAlertDaoException;

	/** 
	 * Returns the rows from the MODULE_ALERT table that matches the specified primary-key value.
	 */
	public ModuleAlert findByPrimaryKey(ModuleAlertPk pk) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria 'ID = :id'.
	 */
	public ModuleAlert findByPrimaryKey(int id) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria ''.
	 */
	public ModuleAlert[] findAll() throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria 'MODULE_ID = :moduleId'.
	 */
	public ModuleAlert[] findByModules(int moduleId) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria 'ID = :id'.
	 */
	public ModuleAlert[] findWhereIdEquals(int id) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria 'MODULE_ID = :moduleId'.
	 */
	public ModuleAlert[] findWhereModuleIdEquals(int moduleId) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the criteria 'MODIFY_DATETIME = :modifyDatetime'.
	 */
	public ModuleAlert[] findWhereModifyDatetimeEquals(Date modifyDatetime) throws ModuleAlertDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the specified arbitrary SQL statement
	 */
	public ModuleAlert[] findByDynamicSelect(String sql, Object[] sqlParams) throws ModuleAlertDaoException;

	/** 
	 * Returns all rows from the MODULE_ALERT table that match the specified arbitrary SQL statement
	 */
	public ModuleAlert[] findByDynamicWhere(String sql, Object[] sqlParams) throws ModuleAlertDaoException;

}
