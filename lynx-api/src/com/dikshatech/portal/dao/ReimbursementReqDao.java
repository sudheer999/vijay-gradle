/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.dikshatech.beans.ReimbursementBean;
import com.dikshatech.beans.ReimbursementReportBean;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import com.dikshatech.portal.forms.PortalForm;

public interface ReimbursementReqDao
{
	/** 
	 * Inserts a new row in the REIMBURSEMENT_REQ table.
	 */
	public ReimbursementReqPk insert(ReimbursementReq dto) throws ReimbursementReqDaoException;

	/** 
	 * Updates a single row in the REIMBURSEMENT_REQ table.
	 */
	public void update(ReimbursementReqPk pk, ReimbursementReq dto) throws ReimbursementReqDaoException;

	/** 
	 * Deletes a single row in the REIMBURSEMENT_REQ table.
	 */
	public void delete(ReimbursementReqPk pk) throws ReimbursementReqDaoException;

	/** 
	 * Returns the rows from the REIMBURSEMENT_REQ table that matches the specified primary-key value.
	 */
	public ReimbursementReq findByPrimaryKey(ReimbursementReqPk pk) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ID = :id'.
	 */
	public ReimbursementReq findByPrimaryKey(int id) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria ''.
	 */
	public ReimbursementReq[] findAll() throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ID = :id'.
	 */
	public ReimbursementReq[] findWhereIdEquals(int id) throws ReimbursementReqDaoException;
	
	public ReimbursementReq[] findWhereuserIdEquals(int usid) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public ReimbursementReq[] findWhereEsrMapIdEquals(int esrMapId) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'PROJECT_CODE = :projectCode'.
	 */
	public ReimbursementReq[] findWhereProjectCodeEquals(int projectCode) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'PROJECT_NAME = :projectName'.
	 */
	public ReimbursementReq[] findWhereProjectNameEquals(String projectName) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CHARGE_CODE = :chargeCode'.
	 */
	public ReimbursementReq[] findWhereChargeCodeEquals(int chargeCode) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CC_TITLE = :ccTitle'.
	 */
	public ReimbursementReq[] findWhereCcTitleEquals(String ccTitle) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'DESCRIPTION = :description'.
	 */
	public ReimbursementReq[] findWhereDescriptionEquals(String description) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ASSIGN_TO = :assignTo'.
	 */
	public ReimbursementReq[] findWhereAssignToEquals(int assignTo) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'STATUS = :status'.
	 */
	public ReimbursementReq[] findWhereStatusEquals(String status) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTIVE = :active'.
	 */
	public ReimbursementReq[] findWhereActiveEquals(short active) throws ReimbursementReqDaoException;
	
	/** 
	 * Returns all rows from the OLD_STATUS table that match the criteria 'OLD_STATUS = :OldStatus'.
	 */
	public ReimbursementReq[] findWhereOldStatusEquals(String oldStatus) throws ReimbursementReqDaoException;
	
	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'REMARK = :remark'.
	 */
	public ReimbursementReq[] findWhereRemarkEquals(String remark) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public ReimbursementReq[] findWhereMessageBodyEquals(String messageBody) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public ReimbursementReq[] findWhereRequesterIdEquals(int requesterId) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public ReimbursementReq[] findWhereCreateDateEquals(Date createDate) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTION_TAKEN_BY = :actionTakenBy'.
	 */
	public ReimbursementReq[] findWhereActionTakenByEquals(int actionTakenBy) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the criteria 'ACTION_TAKEN_ON = :actionTakenOn'.
	 */
	public ReimbursementReq[] findWhereActionTakenOnEquals(Date actionTakenOn) throws ReimbursementReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the specified arbitrary SQL statement
	 */
	public ReimbursementReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws ReimbursementReqDaoException;
	
	//public ReimbursementReq[] findByDynamicSelectwhere(String sql, Object[] sqlParams) throws ReimbursementReqDaoException;

	/** 
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the specified arbitrary SQL statement
	 */
	public ReimbursementReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws ReimbursementReqDaoException;

	/**
	 * Returns all rows from the REIMBURSEMENT_REQ table that match the specified arbitrary SQL
	 * statement
	 */
	public ReimbursementReq[ ] findByDynamicQuery(String sql) throws ReimbursementReqDaoException;
	
	public ReimbursementReq[] findByDynamicSelect1(String sql) throws ReimbursementReqDaoException;
	
	
	public ReimbursementReq[] findByDynamicSelect2(String sql) throws ReimbursementReqDaoException;

//	public ReimbursementReq[] findAllPaidAndUnpaid(int esrMapId, String flag1) throws ReimbursementReqDaoException;




//	public ReimbursementReq[] findAllPaidAndUnpaid(int count ,String flag1 ) throws ReimbursementReqDaoException;

//	public ReimbursementReq[] findAllPaidAndUnpaid(String flag1 )throws ReimbursementReqDaoException;


	public ReimbursementReq[] findPayDetailsHdfc(String sql) throws ReimbursementReqDaoException;
	
	
	public ReimbursementReq[] findPayDetailsNonHdfc(String sql) throws ReimbursementReqDaoException;

	public String updateAllReceivedPay( ArrayList<Integer> bbr_Id, String flag1) throws  ReimbursementReqDaoException;

//	public List<String[]> findInternalReportDataNONHDFC(String reqId, ArrayList<Integer> arraylist) throws  ReimbursementReqDaoException;

	public List<String[]> findInternalReportData(String reqId) throws  ReimbursementReqDaoException ;

//	public List<String[]> findInternalReportDataHDFC(ArrayList<Integer> arraylist) throws  ReimbursementReqDaoException ;

	public List<Map<String, Object>> findInternalReportDataNONHDFC(ArrayList<Integer> arraylist , String bankFlag ,  String Req) throws  ReimbursementReqDaoException ;

	public List<String[]> findInternalReportData(int esrMapId)throws  ReimbursementReqDaoException ;

	public List<Map<String, Object>> findInternalReportDataHDFC(ArrayList<Integer> arraylist, String bankFlag, String Req) throws  ReimbursementReqDaoException ;


	
	
	
	
}
