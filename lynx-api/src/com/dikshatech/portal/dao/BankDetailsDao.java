/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface BankDetailsDao
{
	/** 
	 * Inserts a new row in the BANK_DETAILS table.
	 */
	public BankDetailsPk insert(BankDetails dto) throws BankDetailsDaoException;

	/** 
	 * Updates a single row in the BANK_DETAILS table.
	 */
	public void update(BankDetailsPk pk, BankDetails dto) throws BankDetailsDaoException;

	/** 
	 * Deletes a single row in the BANK_DETAILS table.
	 */
	public void delete(BankDetailsPk pk) throws BankDetailsDaoException;

	/** 
	 * Returns the rows from the BANK_DETAILS table that matches the specified primary-key value.
	 */
	public BankDetails findByPrimaryKey(BankDetailsPk pk) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ID = :id'.
	 */
	public BankDetails findByPrimaryKey(int id) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria ''.
	 */
	public BankDetails[] findAll() throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ID = :id'.
	 */
	public BankDetails[] findWhereIdEquals(int id) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BANK_NAME = :bankName'.
	 */
	public BankDetails[] findWhereBankNameEquals(String bankName) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BANK_ADDRESS = :bankAddress'.
	 */
	public BankDetails[] findWhereBankAddressEquals(String bankAddress) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'ACCOUNT_NUMBER = :accountNumber'.
	 */
	public BankDetails[] findWhereAccountNumberEquals(String accountNumber) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'IFCI_NUMBER = :ifciNumber'.
	 */
	public BankDetails[] findWhereIfciNumberEquals(String ifciNumber) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'SWIFT_CODE = :swiftCode'.
	 */
	public BankDetails[] findWhereSwiftCodeEquals(String swiftCode) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'MICR_CODE = :micrCode'.
	 */
	public BankDetails[] findWhereMicrCodeEquals(String micrCode) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'BRANCH = :branch'.
	 */
	public BankDetails[] findWhereBranchEquals(String branch) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'CREATED_BY = :createdBy'.
	 */
	public BankDetails[] findWhereCreatedByEquals(int createdBy) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public BankDetails[] findWhereCreatedOnEquals(String createdOn) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'UPDATED_BY = :updatedBy'.
	 */
	public BankDetails[] findWhereUpdatedByEquals(int updatedBy) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the criteria 'UPDATED_ON = :updatedOn'.
	 */
	public BankDetails[] findWhereUpdatedOnEquals(Date updatedOn) throws BankDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the specified arbitrary SQL statement
	 */
	public BankDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws BankDetailsDaoException;

	/** 
	 * Returns all rows from the BANK_DETAILS table that match the specified arbitrary SQL statement
	 */
	public BankDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws BankDetailsDaoException;

}
