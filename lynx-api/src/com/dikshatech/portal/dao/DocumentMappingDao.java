/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface DocumentMappingDao
{
	/** 
	 * Inserts a new row in the DOCUMENT_MAPPING table.
	 */
	public DocumentMappingPk insert(DocumentMapping dto) throws DocumentMappingDaoException;

	/** 
	 * Updates a single row in the DOCUMENT_MAPPING table.
	 */
	public void update(DocumentMappingPk pk, DocumentMapping dto) throws DocumentMappingDaoException;

	/** 
	 * Deletes a single row in the DOCUMENT_MAPPING table.
	 */
	public void delete(DocumentMappingPk pk) throws DocumentMappingDaoException;

	/** 
	 * Returns the rows from the DOCUMENT_MAPPING table that matches the specified primary-key value.
	 */
	public DocumentMapping findByPrimaryKey(DocumentMappingPk pk) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public DocumentMapping findByPrimaryKey(int id) throws DocumentMappingDaoException;
	public DocumentMapping findByUserSepId(int id) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria ''.
	 */
	public DocumentMapping[] findAll() throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'DOCUMENT_ID = :documentId'.
	 */
	public DocumentMapping[] findByDocuments(int documentId) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public DocumentMapping[] findWhereIdEquals(int id) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'DOCUMENT_ID = :documentId'.
	 */
	public DocumentMapping[] findWhereDocumentIdEquals(int documentId) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public DocumentMapping[] findWhereExperienceIdEquals(int experienceId) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'EDUCATION_ID = :educationId'.
	 */
	public DocumentMapping[] findWhereEducationIdEquals(int educationId) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public DocumentMapping[] findWherePassportIdEquals(int passportId) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the criteria 'FINANCE_ID = :financeId'.
	 */
	public DocumentMapping[] findWhereFinanceIdEquals(int financeId) throws DocumentMappingDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public DocumentMapping[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocumentMappingDaoException;

	/** 
	 * Returns all rows from the DOCUMENT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public DocumentMapping[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocumentMappingDaoException;
	public int update(String sql) throws DocumentMappingDaoException;
	public String updateBackGroundVerivication(int user_id,Integer files_id) throws DocumentMappingDaoException; 
	
	public Integer[] findBackGroundVerivicationId(int user_id) throws DocumentMappingDaoException;
	public DocumentMapping[] findWhereBackGroudVeriId(int backGroundVeri) throws DocumentMappingDaoException;
	public String updateBackGroundVerivicationById(int user_id,Integer files_id,Integer id) throws DocumentMappingDaoException; 

}
