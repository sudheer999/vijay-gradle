/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface CandidatePerdiemDetailsDao {
	/**
	 * Inserts a new row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public CandidatePerdiemDetailsPk insert(CandidatePerdiemDetails dto)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Updates a single row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public void update(CandidatePerdiemDetailsPk pk, CandidatePerdiemDetails dto)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Deletes a single row in the CANDIDATE_PERDIEM_DETAILS table.
	 */
	public void delete(CandidatePerdiemDetailsPk pk)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns the rows from the CANDIDATE_PERDIEM_DETAILS table that matches
	 * the specified primary-key value.
	 */
	public CandidatePerdiemDetails findByPrimaryKey(CandidatePerdiemDetailsPk pk)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'ID = :id'.
	 */
	public CandidatePerdiemDetails findByPrimaryKey(int id)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria ''.
	 */
	public CandidatePerdiemDetails[] findAll()
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'ID = :id'.
	 */
	public CandidatePerdiemDetails[] findWhereIdEquals(int id)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public CandidatePerdiemDetails[] findWhereCandidateIdEquals(int candidateId)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'LOCATION = :location'.
	 */
	public CandidatePerdiemDetails[] findWhereLocationEquals(String location)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'PERDIEM = :perdiem'.
	 */
	public CandidatePerdiemDetails[] findWherePerdiemEquals(String perdiem)
			throws CandidatePerdiemDetailsDaoException;
	

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * criteria 'USER_ID = :userId'.
	 */
	public CandidatePerdiemDetails[] findWhereUserIdEquals(int userId)
			throws CandidatePerdiemDetailsDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * specified arbitrary SQL statement
	 */
	public CandidatePerdiemDetails[] findByDynamicSelect(String sql,
			Object[] sqlParams) throws CandidatePerdiemDetailsDaoException;

	/**
	 * Returns all rows from the CANDIDATE_PERDIEM_DETAILS table that match the
	 * specified arbitrary SQL statement
	 */
	public CandidatePerdiemDetails[] findByDynamicWhere(String sql,
			Object[] sqlParams) throws CandidatePerdiemDetailsDaoException;

	public String getPerdiemDetails(int candidateId) throws CandidatePerdiemDetailsDaoException;
	public String getPerdiemDetailsByUserID(int candidateId) throws CandidatePerdiemDetailsDaoException;
	
}
