/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface LoanRequestDao
{
	/** 
	 * Inserts a new row in the LOAN_REQUEST table.
	 */
	public LoanRequestPk insert(LoanRequest dto) throws LoanRequestDaoException;

	/** 
	 * Updates a single row in the LOAN_REQUEST table.
	 */
	public void update(LoanRequestPk pk, LoanRequest dto) throws LoanRequestDaoException;

	/** 
	 * Deletes a single row in the LOAN_REQUEST table.
	 */
	public void delete(LoanRequestPk pk) throws LoanRequestDaoException;

	/** 
	 * Returns the rows from the LOAN_REQUEST table that matches the specified primary-key value.
	 */
	public LoanRequest findByPrimaryKey(LoanRequestPk pk) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ID = :id'.
	 */
	public LoanRequest findByPrimaryKey(int id) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria ''.
	 */
	public LoanRequest[] findAll() throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_ID = :loanId'.
	 */
	public LoanRequest[] findByLoanDetails(int loanId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ID = :id'.
	 */
	public LoanRequest[] findWhereIdEquals(int id) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public LoanRequest[] findWhereEsrMapIdEquals(int esrMapId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'CREATED_DATETIME = :createdDatetime'.
	 */
	public LoanRequest[] findWhereCreatedDatetimeEquals(Date createdDatetime) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'REQUESTED_LOAN_AMT = :requestedLoanAmt'.
	 */
	public LoanRequest[] findWhereRequestedLoanAmtEquals(double requestedLoanAmt) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'EMI_PERIOD = :emiPeriod'.
	 */
	public LoanRequest[] findWhereEmiPeriodEquals(int emiPeriod) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'STATUS_ID = :statusId'.
	 */
	public LoanRequest[] findWhereStatusIdEquals(int statusId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ASSIGN_TO = :assignTo'.
	 */
	public LoanRequest[] findWhereAssignToEquals(int assignTo) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_ID = :loanId'.
	 */
	public LoanRequest[] findWhereLoanIdEquals(int loanId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_TYPE_ID = :loanTypeId'.
	 */
	public LoanRequest[] findWhereLoanTypeIdEquals(int loanTypeId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'LOAN_USER_ID = :loanUserId'.
	 */
	public LoanRequest[] findWhereLoanUserIdEquals(int loanUserId) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'EMAIL_DATA = :emailData'.
	 */
	public LoanRequest[] findWhereEmailDataEquals(String emailData) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ACTION_TAKEN_BY = :actionTakenBy'.
	 */
	public LoanRequest[] findWhereActionTakenByEquals(int actionTakenBy) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'ACTION_TAKEN_DATE = :actionTakenDate'.
	 */
	public LoanRequest[] findWhereActionTakenDateEquals(Date actionTakenDate) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'SEQUENCE = :sequence'.
	 */
	public LoanRequest[] findWhereSequenceEquals(int sequence) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the criteria 'COMMENTS = :comments'.
	 */
	public LoanRequest[] findWhereCommentsEquals(String comments) throws LoanRequestDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the specified arbitrary SQL statement
	 */
	public LoanRequest[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoanRequestDaoException;

	/** 
	 * Returns all rows from the LOAN_REQUEST table that match the specified arbitrary SQL statement
	 */
	public LoanRequest[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoanRequestDaoException;

}
