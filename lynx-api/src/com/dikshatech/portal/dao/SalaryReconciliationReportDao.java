/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;
import java.util.Date;

import com.dikshatech.portal.dto.SalaryReconciliationReport;
import com.dikshatech.portal.dto.SalaryReconciliationReportPk;
import com.dikshatech.portal.exceptions.SalaryReconciliationReportDaoException;

public interface SalaryReconciliationReportDao
{
	/** 
	 * Inserts a new row in the salary_reconciliation_report table.
	 */
	public SalaryReconciliationReportPk insert(SalaryReconciliationReport dto) throws SalaryReconciliationReportDaoException;

	/** 
	 * Updates a single row in the salary_reconciliation_report table.
	 */
	public void update(SalaryReconciliationReportPk pk, SalaryReconciliationReport dto) throws SalaryReconciliationReportDaoException;

	/** 
	 * Deletes a single row in the salary_reconciliation_report table.
	 */
	public void delete(SalaryReconciliationReportPk pk) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns the rows from the salary_reconciliation_report table that matches the specified primary-key value.
	 */
	public SalaryReconciliationReport findByPrimaryKey(SalaryReconciliationReportPk pk) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'ID = :id'.
	 */
	public SalaryReconciliationReport findByPrimaryKey(long id) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria ''.
	 */
	public SalaryReconciliationReport[] findAll() throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'ID = :id'.
	 */
	public SalaryReconciliationReport[] findWhereIdEquals(Double id) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'SR_ID = :srId'.
	 */
	public SalaryReconciliationReport[] findWhereSrIdEquals(Integer srId) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'USER_ID = :userId'.
	 */
	public SalaryReconciliationReport[] findWhereUserIdEquals(Integer userId) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'SALARY = :salary'.
	 */
	public SalaryReconciliationReport[] findWhereSalaryEquals(String salary) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'PAYABLE_DAYS = :payableDays'.
	 */
	public SalaryReconciliationReport[] findWherePayableDaysEquals(Integer payableDays) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'COMMENTS = :comments'.
	 */
	public SalaryReconciliationReport[] findWhereCommentsEquals(String comments) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'REPORTING_MANAGER = :reportingManager'.
	 */
	public SalaryReconciliationReport[] findWhereReportingManagerEquals(String reportingManager) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'PROJECT = :project'.
	 */
	public SalaryReconciliationReport[] findWhereProjectEquals(String project) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'MODIFIED_BY = :modifiedBy'.
	 */
	public SalaryReconciliationReport[] findWhereModifiedByEquals(String modifiedBy) throws SalaryReconciliationReportDaoException;

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the criteria 'MODIFIED_ON = :modifiedOn'.
	 */
	public SalaryReconciliationReport[] findWhereModifiedOnEquals(Date modifiedOn) throws SalaryReconciliationReportDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the salary_reconciliation_report table that match the specified arbitrary SQL statement
	 */
	public SalaryReconciliationReport[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException;
	
	public SalaryReconciliationReport[] findByDynamicSelectt(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException;
	public SalaryReconciliationReport[] findByDynamicSelectBank(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException;

	
	public SalaryReconciliationReport[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryReconciliationReportDaoException;
	
	public SalaryReconciliationReport[] findAllPaidAndUnpaid(int id,String flag) throws SalaryReconciliationReportDaoException;
	
	public String updateAllReceivedPay(int sr_id,ArrayList<Integer> ssr_id,String flag) throws SalaryReconciliationReportDaoException;

	public SalaryReconciliationReport[] findByUserID(String string, Object[] objects)throws SalaryReconciliationReportDaoException;

	
	
	

	public String reasonForNonPay(String reason, String date, int srId,int userId) throws SalaryReconciliationReportDaoException;

	

	

	public SalaryReconciliationReport[] findByPrimaryKeySr(String string, Object[] objects)throws SalaryReconciliationReportDaoException;

	public SalaryReconciliationReport[] findByPrimaryKeyTds(int id)throws SalaryReconciliationReportDaoException;

	

	


	

}
