/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface SalaryConfigDao
{
	/** 
	 * Inserts a new row in the SALARY_CONFIG table.
	 */
	public SalaryConfigPk insert(SalaryConfig dto) throws SalaryConfigDaoException;

	/** 
	 * Updates a single row in the SALARY_CONFIG table.
	 */
	public void update(SalaryConfigPk pk, SalaryConfig dto) throws SalaryConfigDaoException;

	/** 
	 * Deletes a single row in the SALARY_CONFIG table.
	 */
	public void delete(SalaryConfigPk pk) throws SalaryConfigDaoException;

	/** 
	 * Returns the rows from the SALARY_CONFIG table that matches the specified primary-key value.
	 */
	public SalaryConfig findByPrimaryKey(SalaryConfigPk pk) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'ID = :id'.
	 */
	public SalaryConfig findByPrimaryKey(int id) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria ''.
	 */
	public SalaryConfig[] findAll() throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'ID = :id'.
	 */
	public SalaryConfig[] findWhereIdEquals(int id) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'HEAD = :head'.
	 */
	public SalaryConfig[] findWhereHeadEquals(String head) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'HEAD_ORDER = :headOrder'.
	 */
	public SalaryConfig[] findWhereHeadOrderEquals(int headOrder) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'COMPONENT = :component'.
	 */
	public SalaryConfig[] findWhereComponentEquals(String component) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'VALUE = :value'.
	 */
	public SalaryConfig[] findWhereValueEquals(float value) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'VALUE_TYPE = :valueType'.
	 */
	public SalaryConfig[] findWhereValueTypeEquals(String valueType) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'AUTO_CALC = :autoCalc'.
	 */
	public SalaryConfig[] findWhereAutoCalcEquals(short autoCalc) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'COMPONENT_ORDER = :componentOrder'.
	 */
	public SalaryConfig[] findWhereComponentOrderEquals(int componentOrder) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the criteria 'FORMULA = :formula'.
	 */
	public SalaryConfig[] findWhereFormulaEquals(float formula) throws SalaryConfigDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the specified arbitrary SQL statement
	 */
	public SalaryConfig[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryConfigDaoException;

	/** 
	 * Returns all rows from the SALARY_CONFIG table that match the specified arbitrary SQL statement
	 */
	public SalaryConfig[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryConfigDaoException;

}
