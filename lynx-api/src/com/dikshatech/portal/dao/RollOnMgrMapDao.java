/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface RollOnMgrMapDao
{
	/** 
	 * Inserts a new row in the ROLL_ON_MGR_MAP table.
	 */
	public RollOnMgrMapPk insert(RollOnMgrMap dto) throws RollOnMgrMapDaoException;

	/** 
	 * Updates a single row in the ROLL_ON_MGR_MAP table.
	 */
	public void update(RollOnMgrMapPk pk, RollOnMgrMap dto) throws RollOnMgrMapDaoException;

	/** 
	 * Deletes a single row in the ROLL_ON_MGR_MAP table.
	 */
	public void delete(RollOnMgrMapPk pk) throws RollOnMgrMapDaoException;

	/** 
	 * Returns the rows from the ROLL_ON_MGR_MAP table that matches the specified primary-key value.
	 */
	public RollOnMgrMap findByPrimaryKey(RollOnMgrMapPk pk) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'ID = :id'.
	 */
	public RollOnMgrMap findByPrimaryKey(int id) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria ''.
	 */
	public RollOnMgrMap[] findAll() throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'ID = :id'.
	 */
	public RollOnMgrMap[] findWhereIdEquals(int id) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'ROLL_ON_ID = :rollOnId'.
	 */
	public RollOnMgrMap[] findWhereRollOnIdEquals(int rollOnId) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'MGR_NAME = :mgrName'.
	 */
	public RollOnMgrMap[] findWhereMgrNameEquals(String mgrName) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'MGR_EMAIL = :mgrEmail'.
	 */
	public RollOnMgrMap[] findWhereMgrEmailEquals(String mgrEmail) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'MGR_DETAIL = :mgrDetail'.
	 */
	public RollOnMgrMap[] findWhereMgrDetailEquals(String mgrDetail) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'MGR_PHONE_NO = :mgrPhoneNo'.
	 */
	public RollOnMgrMap[] findWhereMgrPhoneNoEquals(String mgrPhoneNo) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'ONSITE_MGR = :onsiteMgr'.
	 */
	public RollOnMgrMap[] findWhereOnsiteMgrEquals(String onsiteMgr) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the criteria 'ONSITE_MGR_DETAILS = :onsiteMgrDetails'.
	 */
	public RollOnMgrMap[] findWhereOnsiteMgrDetailsEquals(String onsiteMgrDetails) throws RollOnMgrMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the specified arbitrary SQL statement
	 */
	public RollOnMgrMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws RollOnMgrMapDaoException;

	/** 
	 * Returns all rows from the ROLL_ON_MGR_MAP table that match the specified arbitrary SQL statement
	 */
	public RollOnMgrMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws RollOnMgrMapDaoException;

}
