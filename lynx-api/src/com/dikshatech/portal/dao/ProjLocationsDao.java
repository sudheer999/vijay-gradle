/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ProjLocationsDao
{
	/** 
	 * Inserts a new row in the PROJ_LOCATIONS table.
	 */
	public ProjLocationsPk insert(ProjLocations dto) throws ProjLocationsDaoException;

	/** 
	 * Updates a single row in the PROJ_LOCATIONS table.
	 */
	public void update(ProjLocationsPk pk, ProjLocations dto) throws ProjLocationsDaoException;

	/** 
	 * Deletes a single row in the PROJ_LOCATIONS table.
	 */
	public void delete(ProjLocationsPk pk) throws ProjLocationsDaoException;

	/** 
	 * Returns the rows from the PROJ_LOCATIONS table that matches the specified primary-key value.
	 */
	public ProjLocations findByPrimaryKey(ProjLocationsPk pk) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ID = :id'.
	 */
	public ProjLocations findByPrimaryKey(int id) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria ''.
	 */
	public ProjLocations[] findAll() throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public ProjLocations[] findByProject(int projId) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ID = :id'.
	 */
	public ProjLocations[] findWhereIdEquals(int id) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'PROJ_ID = :projId'.
	 */
	public ProjLocations[] findWhereProjIdEquals(int projId) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'NAME = :name'.
	 */
	public ProjLocations[] findWhereNameEquals(String name) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'CITY = :city'.
	 */
	public ProjLocations[] findWhereCityEquals(String city) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ADDRESS = :address'.
	 */
	public ProjLocations[] findWhereAddressEquals(String address) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'ZIP_CODE = :zipCode'.
	 */
	public ProjLocations[] findWhereZipCodeEquals(int zipCode) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'STATE = :state'.
	 */
	public ProjLocations[] findWhereStateEquals(String state) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'COUNTRY = :country'.
	 */
	public ProjLocations[] findWhereCountryEquals(String country) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'TEL_NUM = :telNum'.
	 */
	public ProjLocations[] findWhereTelNumEquals(String telNum) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the criteria 'FAX_NUM = :faxNum'.
	 */
	public ProjLocations[] findWhereFaxNumEquals(String faxNum) throws ProjLocationsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the specified arbitrary SQL statement
	 */
	public ProjLocations[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjLocationsDaoException;

	/** 
	 * Returns all rows from the PROJ_LOCATIONS table that match the specified arbitrary SQL statement
	 */
	public ProjLocations[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjLocationsDaoException;

}
