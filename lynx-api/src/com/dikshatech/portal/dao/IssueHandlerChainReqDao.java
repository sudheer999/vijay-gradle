/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface IssueHandlerChainReqDao
{
	/** 
	 * Inserts a new row in the ISSUE_HANDLER_CHAIN_REQ table.
	 */
	public IssueHandlerChainReqPk insert(IssueHandlerChainReq dto) throws IssueHandlerChainReqDaoException;

	/** 
	 * Updates a single row in the ISSUE_HANDLER_CHAIN_REQ table.
	 */
	public void update(IssueHandlerChainReqPk pk, IssueHandlerChainReq dto) throws IssueHandlerChainReqDaoException;

	/** 
	 * Deletes a single row in the ISSUE_HANDLER_CHAIN_REQ table.
	 */
	public void delete(IssueHandlerChainReqPk pk) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns the rows from the ISSUE_HANDLER_CHAIN_REQ table that matches the specified primary-key value.
	 */
	public IssueHandlerChainReq findByPrimaryKey(IssueHandlerChainReqPk pk) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ID = :id'.
	 */
	public IssueHandlerChainReq findByPrimaryKey(int id) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria ''.
	 */
	public IssueHandlerChainReq[] findAll() throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ID = :id'.
	 */
	public IssueHandlerChainReq[] findWhereIdEquals(int id) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public IssueHandlerChainReq[] findWhereEsrMapIdEquals(int esrMapId) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ASSIGNED_TO_DIV = :assignedToDiv'.
	 */
	public IssueHandlerChainReq[] findWhereAssignedToDivEquals(int assignedToDiv) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'STATUS = :status'.
	 */
	public IssueHandlerChainReq[] findWhereStatusEquals(String status) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public IssueHandlerChainReq[] findWhereActionByEquals(int actionBy) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'HD_EST_DATE_RESOLVE = :hdEstDateResolve'.
	 */
	public IssueHandlerChainReq[] findWhereHdEstDateResolveEquals(Date hdEstDateResolve) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'DATE_OF_CLOSURE = :dateOfClosure'.
	 */
	public IssueHandlerChainReq[] findWhereDateOfClosureEquals(Date dateOfClosure) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ESCALATE_TO = :escalateTo'.
	 */
	public IssueHandlerChainReq[] findWhereEscalateToEquals(int escalateTo) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'H_REMARKS = :hRemarks'.
	 */
	public IssueHandlerChainReq[] findWhereHRemarksEquals(String hRemarks) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'CREATION_DATETIME = :creationDatetime'.
	 */
	public IssueHandlerChainReq[] findWhereCreationDatetimeEquals(Date creationDatetime) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'SUMMARY = :summary'.
	 */
	public IssueHandlerChainReq[] findWhereSummaryEquals(String summary) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'DESCRIPTION = :description'.
	 */
	public IssueHandlerChainReq[] findWhereDescriptionEquals(String description) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'DEP_SERV_REQ = :depServReq'.
	 */
	public IssueHandlerChainReq[] findWhereDepServReqEquals(int depServReq) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public IssueHandlerChainReq[] findWhereAssignedToEquals(int assignedTo) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public IssueHandlerChainReq[] findWhereMessageBodyEquals(String messageBody) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'SEVERITY = :severity'.
	 */
	public IssueHandlerChainReq[] findWhereSeverityEquals(String severity) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'PRIORITY = :priority'.
	 */
	public IssueHandlerChainReq[] findWherePriorityEquals(String priority) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'IS_COMMENT = :isComment'.
	 */
	public IssueHandlerChainReq[] findWhereIsCommentEquals(short isComment) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the criteria 'IS_HANDLER = :isHandler'.
	 */
	public IssueHandlerChainReq[] findWhereIsHandlerEquals(short isHandler) throws IssueHandlerChainReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the specified arbitrary SQL statement
	 */
	public IssueHandlerChainReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws IssueHandlerChainReqDaoException;

	/** 
	 * Returns all rows from the ISSUE_HANDLER_CHAIN_REQ table that match the specified arbitrary SQL statement
	 */
	public IssueHandlerChainReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws IssueHandlerChainReqDaoException;

}
