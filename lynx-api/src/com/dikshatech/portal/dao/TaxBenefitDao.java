/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface TaxBenefitDao
{
	/** 
	 * Inserts a new row in the TAX_BENEFIT table.
	 */
	public TaxBenefitPk insert(TaxBenefit dto) throws TaxBenefitDaoException;

	/** 
	 * Updates a single row in the TAX_BENEFIT table.
	 */
	public void update(TaxBenefitPk pk, TaxBenefit dto) throws TaxBenefitDaoException;

	/** 
	 * Deletes a single row in the TAX_BENEFIT table.
	 */
	public void delete(TaxBenefitPk pk) throws TaxBenefitDaoException;

	/** 
	 * Returns the rows from the TAX_BENEFIT table that matches the specified primary-key value.
	 */
	public TaxBenefit findByPrimaryKey(TaxBenefitPk pk) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria 'ID = :id'.
	 */
	public TaxBenefit findByPrimaryKey(int id) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria ''.
	 */
	public TaxBenefit[] findAll() throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria 'ID = :id'.
	 */
	public TaxBenefit[] findWhereIdEquals(int id) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria 'NAME = :name'.
	 */
	public TaxBenefit[] findWhereNameEquals(String name) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria 'CATEGORY = :category'.
	 */
	public TaxBenefit[] findWhereCategoryEquals(String category) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the criteria 'DESCRIPTION = :description'.
	 */
	public TaxBenefit[] findWhereDescriptionEquals(String description) throws TaxBenefitDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the specified arbitrary SQL statement
	 */
	public TaxBenefit[] findByDynamicSelect(String sql, Object[] sqlParams) throws TaxBenefitDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT table that match the specified arbitrary SQL statement
	 */
	public TaxBenefit[] findByDynamicWhere(String sql, Object[] sqlParams) throws TaxBenefitDaoException;

}
