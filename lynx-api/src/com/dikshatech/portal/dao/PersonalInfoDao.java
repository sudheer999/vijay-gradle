/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface PersonalInfoDao
{
	/** 
	 * Inserts a new row in the PERSONAL_INFO table.
	 */
	public PersonalInfoPk insert(PersonalInfo dto) throws PersonalInfoDaoException;
	
	public PersonalInfoPk updatetBlood(PersonalInfo dto) throws PersonalInfoDaoException;

	/** 
	 * Updates a single row in the PERSONAL_INFO table.
	 */
	public void update(PersonalInfoPk pk, PersonalInfo dto) throws PersonalInfoDaoException;

	/** 
	 * Deletes a single row in the PERSONAL_INFO table.
	 */
	public void delete(PersonalInfoPk pk) throws PersonalInfoDaoException;

	/** 
	 * Returns the rows from the PERSONAL_INFO table that matches the specified primary-key value.
	 */
	public PersonalInfo findByPrimaryKey(PersonalInfoPk pk) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ID = :id'.
	 */
	public PersonalInfo findByPrimaryKey(int id) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria ''.
	 */
	public PersonalInfo[] findAll() throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ID = :id'.
	 */
	public PersonalInfo[] findWhereIdEquals(int id) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PERMANENT_ADDRESS = :permanentAddress'.
	 */
	public PersonalInfo[] findWherePermanentAddressEquals(int permanentAddress) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'CURRENT_ADDRESS = :currentAddress'.
	 */
	public PersonalInfo[] findWhereCurrentAddressEquals(int currentAddress) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PRIMARY_PHONE_NO = :primaryPhoneNo'.
	 */
	public PersonalInfo[] findWherePrimaryPhoneNoEquals(String primaryPhoneNo) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SECONDARY_PHONE_NO = :secondaryPhoneNo'.
	 */
	public PersonalInfo[] findWhereSecondaryPhoneNoEquals(String secondaryPhoneNo) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'PERSONAL_EMAIL_ID = :personalEmailId'.
	 */
	public PersonalInfo[] findWherePersonalEmailIdEquals(String personalEmailId) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ALTERNATE_EMAIL_ID = :alternateEmailId'.
	 */
	public PersonalInfo[] findWhereAlternateEmailIdEquals(String alternateEmailId) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'MOTHER_NAME = :motherName'.
	 */
	public PersonalInfo[] findWhereMotherNameEquals(String motherName) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'FATHER_NAME = :fatherName'.
	 */
	public PersonalInfo[] findWhereFatherNameEquals(String fatherName) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'MARITAL_STATUS = :maritalStatus'.
	 */
	public PersonalInfo[] findWhereMaritalStatusEquals(String maritalStatus) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SPOUSE_NAME = :spouseName'.
	 */
	public PersonalInfo[] findWhereSpouseNameEquals(String spouseName) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_CONTACT_NAME = :emerContactName'.
	 */
	public PersonalInfo[] findWhereEmerContactNameEquals(String emerContactName) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_CP_RELATIONSHIP = :emerCpRelationship'.
	 */
	public PersonalInfo[] findWhereEmerCpRelationshipEquals(String emerCpRelationship) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'EMER_PHONE_NO = :emerPhoneNo'.
	 */
	public PersonalInfo[] findWhereEmerPhoneNoEquals(int emerPhoneNo) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'CITY = :city'.
	 */
	public PersonalInfo[] findWhereCityEquals(String city) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'ZIP_CODE = :zipCode'.
	 */
	public PersonalInfo[] findWhereZipCodeEquals(int zipCode) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'COUNTRY = :country'.
	 */
	public PersonalInfo[] findWhereCountryEquals(String country) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'STATE = :state'.
	 */
	public PersonalInfo[] findWhereStateEquals(String state) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the criteria 'SPOUSE_DOB = :spouseDob'.
	 */
	public PersonalInfo[] findWhereSpouseDobEquals(Date spouseDob) throws PersonalInfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the specified arbitrary SQL statement
	 */
	public PersonalInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws PersonalInfoDaoException;

	/** 
	 * Returns all rows from the PERSONAL_INFO table that match the specified arbitrary SQL statement
	 */
	public PersonalInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws PersonalInfoDaoException;

	public PersonalInfo[] findBYUserId(String string, Object[] objects)throws PersonalInfoDaoException;

}
