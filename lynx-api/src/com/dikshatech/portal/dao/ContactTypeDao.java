/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ContactTypeDao
{
	/** 
	 * Inserts a new row in the CONTACT_TYPE table.
	 */
	public ContactTypePk insert(ContactType dto) throws ContactTypeDaoException;

	/** 
	 * Updates a single row in the CONTACT_TYPE table.
	 */
	public void update(ContactTypePk pk, ContactType dto) throws ContactTypeDaoException;

	/** 
	 * Deletes a single row in the CONTACT_TYPE table.
	 */
	public void delete(ContactTypePk pk) throws ContactTypeDaoException;

	/** 
	 * Returns the rows from the CONTACT_TYPE table that matches the specified primary-key value.
	 */
	public ContactType findByPrimaryKey(ContactTypePk pk) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'ID = :id'.
	 */
	public ContactType findByPrimaryKey(int id) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria ''.
	 */
	public ContactType[] findAll() throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'ID = :id'.
	 */
	public ContactType[] findWhereIdEquals(int id) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public ContactType[] findWhereCandidateIdEquals(int candidateId) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'USER_ID = :userId'.
	 */
	public ContactType[] findWhereUserIdEquals(int userId) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'TYPE = :type'.
	 */
	public ContactType[] findWhereTypeEquals(String type) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'NAME = :name'.
	 */
	public ContactType[] findWhereNameEquals(String name) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'DESIGNATION = :designation'.
	 */
	public ContactType[] findWhereDesignationEquals(String designation) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'PHONE_NUMBER = :phoneNumber'.
	 */
	public ContactType[] findWherePhoneNumberEquals(String phoneNumber) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'EMAIL_ID = :emailId'.
	 */
	public ContactType[] findWhereEmailIdEquals(String emailId) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the criteria 'RELATIONSHIP = :relationship'.
	 */
	public ContactType[] findWhereRelationshipEquals(String relationship) throws ContactTypeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the specified arbitrary SQL statement
	 */
	public ContactType[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContactTypeDaoException;

	/** 
	 * Returns all rows from the CONTACT_TYPE table that match the specified arbitrary SQL statement
	 */
	public ContactType[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContactTypeDaoException;

}
