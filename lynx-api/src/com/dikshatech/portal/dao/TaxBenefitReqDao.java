/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface TaxBenefitReqDao
{
	/** 
	 * Inserts a new row in the TAX_BENEFIT_REQ table.
	 */
	public TaxBenefitReqPk insert(TaxBenefitReq dto) throws TaxBenefitReqDaoException;

	/** 
	 * Updates a single row in the TAX_BENEFIT_REQ table.
	 */
	public void update(TaxBenefitReqPk pk, TaxBenefitReq dto) throws TaxBenefitReqDaoException;

	/** 
	 * Deletes a single row in the TAX_BENEFIT_REQ table.
	 */
	public void delete(TaxBenefitReqPk pk) throws TaxBenefitReqDaoException;

	/** 
	 * Returns the rows from the TAX_BENEFIT_REQ table that matches the specified primary-key value.
	 */
	public TaxBenefitReq findByPrimaryKey(TaxBenefitReqPk pk) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitReq findByPrimaryKey(int id) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria ''.
	 */
	public TaxBenefitReq[] findAll() throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitReq[] findWhereIdEquals(int id) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public TaxBenefitReq[] findWhereEsrMapIdEquals(int esrMapId) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public TaxBenefitReq[] findWhereRequesterIdEquals(int requesterId) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public TaxBenefitReq[] findWhereActionByEquals(int actionBy) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'STATUS = :status'.
	 */
	public TaxBenefitReq[] findWhereStatusEquals(String status) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public TaxBenefitReq[] findWhereCreatedOnEquals(Date createdOn) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'ACTION_ON = :actionOn'.
	 */
	public TaxBenefitReq[] findWhereActionOnEquals(Date actionOn) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public TaxBenefitReq[] findWhereMessageBodyEquals(String messageBody) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the criteria 'COMMENTS = :comments'.
	 */
	public TaxBenefitReq[] findWhereCommentsEquals(String comments) throws TaxBenefitReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws TaxBenefitReqDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_REQ table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws TaxBenefitReqDaoException;

	public TaxBenefitReq[] findByDynamicWhereTaxHandle() throws TaxBenefitReqDaoException;

}
