/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ModulePermissionDao
{
	/** 
	 * Inserts a new row in the MODULE_PERMISSION table.
	 */
	public ModulePermissionPk insert(ModulePermission dto) throws ModulePermissionDaoException;

	/** 
	 * Updates a single row in the MODULE_PERMISSION table.
	 */
	public void update(ModulePermissionPk pk, ModulePermission dto) throws ModulePermissionDaoException;

	/** 
	 * Deletes a single row in the MODULE_PERMISSION table.
	 */
	public void delete(ModulePermissionPk pk) throws ModulePermissionDaoException;

	/** 
	 * Returns the rows from the MODULE_PERMISSION table that matches the specified primary-key value.
	 */
	public ModulePermission findByPrimaryKey(ModulePermissionPk pk) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'ID = :id'.
	 */
	public ModulePermission findByPrimaryKey(int id) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria ''.
	 */
	public ModulePermission[] findAll() throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'ID = :id'.
	 */
	public ModulePermission[] findWhereIdEquals(int id) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'ROLE_ID = :roleId'.
	 */
	public ModulePermission[] findWhereRoleIdEquals(int roleId) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'MODULE_ID = :moduleId'.
	 */
	public ModulePermission[] findWhereModuleIdEquals(int moduleId) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'PROC_CHAIN_ID = :procChainId'.
	 */
	public ModulePermission[] findWhereProcChainIdEquals(int procChainId) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the criteria 'ACCESSIBILITY_ID = :accessibilityId'.
	 */
	public ModulePermission[] findWhereAccessibilityIdEquals(int accessibilityId) throws ModulePermissionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the specified arbitrary SQL statement
	 */
	public ModulePermission[] findByDynamicSelect(String sql, Object[] sqlParams) throws ModulePermissionDaoException;

	/** 
	 * Returns all rows from the MODULE_PERMISSION table that match the specified arbitrary SQL statement
	 */
	public ModulePermission[] findByDynamicWhere(String sql, Object[] sqlParams) throws ModulePermissionDaoException;

	public ModulePermission findByRoleAndModule(int roleId, int parseInt) throws ModulePermissionDaoException;
	
	public ArrayList<Integer> findByDynamicSelectAllModulesIdBasedOnRole(String sql, Object[] sqlParams) throws ModulePermissionDaoException;

}