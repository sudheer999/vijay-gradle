/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface SodexoReqDao
{
	/** 
	 * Inserts a new row in the SODEXO_REQ table.
	 */
	public SodexoReqPk insert(SodexoReq dto) throws SodexoReqDaoException;

	/** 
	 * Updates a single row in the SODEXO_REQ table.
	 */
	public void update(SodexoReqPk pk, SodexoReq dto) throws SodexoReqDaoException;

	/** 
	 * Deletes a single row in the SODEXO_REQ table.
	 */
	public void delete(SodexoReqPk pk) throws SodexoReqDaoException;

	/** 
	 * Returns the rows from the SODEXO_REQ table that matches the specified primary-key value.
	 */
	public SodexoReq findByPrimaryKey(SodexoReqPk pk) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ID = :id'.
	 */
	public SodexoReq findByPrimaryKey(int id) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria ''.
	 */
	public SodexoReq[] findAll() throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'SD_ID = :sdId'.
	 */
	public SodexoReq[] findBySodexoDetails(int sdId) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ID = :id'.
	 */
	public SodexoReq[] findWhereIdEquals(int id) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'SD_ID = :sdId'.
	 */
	public SodexoReq[] findWhereSdIdEquals(int sdId) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public SodexoReq[] findWhereEsrMapIdEquals(int esrMapId) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public SodexoReq[] findWhereAssignedToEquals(int assignedTo) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public SodexoReq[] findWhereActionByEquals(int actionBy) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public SodexoReq[] findWhereMessageBodyEquals(String messageBody) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the criteria 'ACTION_DATE = :actionDate'.
	 */
	public SodexoReq[] findWhereActionDateEquals(Date actionDate) throws SodexoReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the specified arbitrary SQL statement
	 */
	public SodexoReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws SodexoReqDaoException;

	/** 
	 * Returns all rows from the SODEXO_REQ table that match the specified arbitrary SQL statement
	 */
	public SodexoReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws SodexoReqDaoException;

	public SodexoReq[] findByDynamicWhereIn(String sql) throws SodexoReqDaoException;
}
