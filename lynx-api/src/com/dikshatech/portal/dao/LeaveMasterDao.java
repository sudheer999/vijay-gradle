/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import com.dikshatech.beans.LeaveMasterBean;
import com.dikshatech.portal.dto.LeaveMaster;
import com.dikshatech.portal.dto.LeaveMasterPk;
import com.dikshatech.portal.exceptions.LeaveMasterDaoException;

public interface LeaveMasterDao
{
	/** 
	 * Inserts a new row in the LEAVE_MASTER table.
	 */
	public LeaveMasterPk insert(LeaveMaster dto) throws LeaveMasterDaoException;

	/** 
	 * Updates a single row in the LEAVE_MASTER table.
	 */
	public void update(LeaveMasterPk pk, LeaveMaster dto) throws LeaveMasterDaoException;

	/** 
	 * Deletes a single row in the LEAVE_MASTER table.
	 */
	public void delete(LeaveMasterPk pk) throws LeaveMasterDaoException;

	/** 
	 * Returns the rows from the LEAVE_MASTER table that matches the specified primary-key value.
	 */
	public LeaveMaster findByPrimaryKey(LeaveMasterPk pk) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ID = :id'.
	 */
	public LeaveMaster findByPrimaryKey(int id) throws LeaveMasterDaoException;

	public LeaveMasterBean[] getLeaveHistory(int userId, int limit) throws LeaveMasterDaoException;

	public HashMap<String, String> getLeaveHistoryMonthlyCount(int userId) throws LeaveMasterDaoException;
	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria ''.
	 */
	public LeaveMaster[] findAll() throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ID = :id'.
	 */
	public LeaveMaster[] findWhereIdEquals(int id) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public LeaveMaster[] findWhereEsrMapIdEquals(int esrMapId) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'LEAVE_TYPE = :leaveType'.
	 */
	public LeaveMaster[] findWhereLeaveTypeEquals(int leaveType) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'CONTACT_NO = :contactNo'.
	 */
	public LeaveMaster[] findWhereContactNoEquals(String contactNo) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'FROM_DATE = :fromDate'.
	 */
	public LeaveMaster[] findWhereFromDateEquals(Date fromDate) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'TO_DATE = :toDate'.
	 */
	public LeaveMaster[] findWhereToDateEquals(Date toDate) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'DURATION = :duration'.
	 */
	public LeaveMaster[] findWhereDurationEquals(float duration) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'APPLIED_DATE_TIME = :appliedDateTime'.
	 */
	public LeaveMaster[] findWhereAppliedDateTimeEquals(Date appliedDateTime) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'APPROVED_DATE_TIME = :approvedDateTime'.
	 */
	public LeaveMaster[] findWhereApprovedDateTimeEquals(Date approvedDateTime) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'REASON = :reason'.
	 */
	public LeaveMaster[] findWhereReasonEquals(String reason) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'COMMENT = :comment'.
	 */
	public LeaveMaster[] findWhereCommentEquals(String comment) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'UUID = :uuid'.
	 */
	public LeaveMaster[] findWhereUuidEquals(String uuid) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ATTACHMENT = :attachment'.
	 */
	public LeaveMaster[] findWhereAttachmentEquals(String attachment) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public LeaveMaster[] findWhereAssignedToEquals(int assignedTo) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'STATUS = :status'.
	 */
	public LeaveMaster[] findWhereStatusEquals(String status) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ASSIGNED_TO_DIVISION = :assignedToDivision'.
	 */
	public LeaveMaster[] findWhereAssignedToDivisionEquals(int assignedToDivision) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'TO_CANCELL = :toCancell'.
	 */
	public LeaveMaster[] findWhereToCancellEquals(int toCancell) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ACTION_BY = :actionBy'.
	 */
	public LeaveMaster[] findWhereActionByEquals(int actionBy) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public LeaveMaster[] findWhereMessageBodyEquals(String messageBody) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'SERVED = :served'.
	 */
	public LeaveMaster[] findWhereServedEquals(short served) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'PROJECT_NAME = :projectName'.
	 */
	public LeaveMaster[] findWhereProjectNameEquals(String projectName) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'PROJECT_TITLE = :projectTitle'.
	 */
	public LeaveMaster[] findWhereProjectTitleEquals(String projectTitle) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'REMARK = :remark'.
	 */
	public LeaveMaster[] findWhereRemarkEquals(String remark) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the criteria 'ISLWP = :islwp'.
	 */
	public LeaveMaster[] findWhereIslwpEquals(float islwp) throws LeaveMasterDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the specified arbitrary SQL statement
	 */
	public LeaveMaster[] findByDynamicSelect(String sql, Object[] sqlParams) throws LeaveMasterDaoException;

	/** 
	 * Returns all rows from the LEAVE_MASTER table that match the specified arbitrary SQL statement
	 */
	public LeaveMaster[] findByDynamicWhere(String sql, Object[] sqlParams) throws LeaveMasterDaoException;

/** 
	 * Returns all rows from the LEAVE_MASTER table that match the specified arbitrary SQL statement
	 */
	public void dynamicUpdate(String sql, Object[] sqlParams) throws LeaveMasterDaoException;
	/**
	 * Returns only duration of leave in asc order
	 * @param sql
	 * @param sqlParams EMP_SER_REQ_ID
	 * @return INTEGER ARRAYLIST
	 * @throws LeaveMasterDaoException
	 */
	public ArrayList<Integer> findByDynamicSelectDuration(String sql, Object[] sqlParams) throws LeaveMasterDaoException;
}
