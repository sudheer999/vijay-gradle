/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface InsurancePolicyReqDao
{
	/** 
	 * Inserts a new row in the INSURANCE_POLICY_REQ table.
	 */
	public InsurancePolicyReqPk insert(InsurancePolicyReq dto) throws InsurancePolicyReqDaoException;

	/** 
	 * Updates a single row in the INSURANCE_POLICY_REQ table.
	 */
	public void update(InsurancePolicyReqPk pk, InsurancePolicyReq dto) throws InsurancePolicyReqDaoException;

	/** 
	 * Deletes a single row in the INSURANCE_POLICY_REQ table.
	 */
	public void delete(InsurancePolicyReqPk pk) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns the rows from the INSURANCE_POLICY_REQ table that matches the specified primary-key value.
	 */
	public InsurancePolicyReq findByPrimaryKey(InsurancePolicyReqPk pk) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ID = :id'.
	 */
	public InsurancePolicyReq findByPrimaryKey(int id) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria ''.
	 */
	public InsurancePolicyReq[] findAll() throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ID = :id'.
	 */
	public InsurancePolicyReq[] findWhereIdEquals(Integer id) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public InsurancePolicyReq[] findWhereEsrMapIdEquals(Integer esrMapId) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'STATUS = :status'.
	 */
	public InsurancePolicyReq[] findWhereStatusEquals(String status) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'REQUETER_ID = :requeterId'.
	 */
	public InsurancePolicyReq[] findWhereRequeterIdEquals(Integer requeterId) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'POLICY_NUMBER = :policyNumber'.
	 */
	public InsurancePolicyReq[] findWherePolicyNumberEquals(String policyNumber) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'POLICY_TYPE = :policyType'.
	 */
	public InsurancePolicyReq[] findWherePolicyTypeEquals(String policyType) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE = :coverage'.
	 */
	public InsurancePolicyReq[] findWhereCoverageEquals(Integer coverage) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE_FROM = :coverageFrom'.
	 */
	public InsurancePolicyReq[] findWhereCoverageFromEquals(Date coverageFrom) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'COVERAGE_UPTO = :coverageUpto'.
	 */
	public InsurancePolicyReq[] findWhereCoverageUptoEquals(Date coverageUpto) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'DELIVERY_ADDRESS = :deliveryAddress'.
	 */
	public InsurancePolicyReq[] findWhereDeliveryAddressEquals(String deliveryAddress) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'BASIC_PREMIUM = :basicPremium'.
	 */
	public InsurancePolicyReq[] findWhereBasicPremiumEquals(Integer basicPremium) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'SERVICE_TAX = :serviceTax'.
	 */
	public InsurancePolicyReq[] findWhereServiceTaxEquals(Integer serviceTax) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'REQUESTED_ON = :requestedOn'.
	 */
	public InsurancePolicyReq[] findWhereRequestedOnEquals(Date requestedOn) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'DATE_OF_COMPLETION = :dateOfCompletion'.
	 */
	public InsurancePolicyReq[] findWhereDateOfCompletionEquals(Date dateOfCompletion) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'TOTAL_PREMIUM = :totalPremium'.
	 */
	public InsurancePolicyReq[] findWhereTotalPremiumEquals(Integer totalPremium) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the criteria 'INSURANCE_COMPANY_NAME = :insuranceCompanyName'.
	 */
	public InsurancePolicyReq[] findWhereInsuranceCompanyNameEquals(String insuranceCompanyName) throws InsurancePolicyReqDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the specified arbitrary SQL statement
	 */
	public InsurancePolicyReq[] findByDynamicSelect(String sql, Object[] sqlParams) throws InsurancePolicyReqDaoException;

	/** 
	 * Returns all rows from the INSURANCE_POLICY_REQ table that match the specified arbitrary SQL statement
	 */
	public InsurancePolicyReq[] findByDynamicWhere(String sql, Object[] sqlParams) throws InsurancePolicyReqDaoException;

}
