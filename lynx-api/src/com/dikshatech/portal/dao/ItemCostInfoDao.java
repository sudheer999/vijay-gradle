/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ItemCostInfoDao
{
	/** 
	 * Inserts a new row in the ITEM_COST_INFO table.
	 */
	public ItemCostInfoPk insert(ItemCostInfo dto) throws ItemCostInfoDaoException;

	/** 
	 * Updates a single row in the ITEM_COST_INFO table.
	 */
	public void update(ItemCostInfoPk pk, ItemCostInfo dto) throws ItemCostInfoDaoException;

	/** 
	 * Deletes a single row in the ITEM_COST_INFO table.
	 */
	public void delete(ItemCostInfoPk pk) throws ItemCostInfoDaoException;

	/** 
	 * Returns the rows from the ITEM_COST_INFO table that matches the specified primary-key value.
	 */
	public ItemCostInfo findByPrimaryKey(ItemCostInfoPk pk) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria 'ID = :id'.
	 */
	public ItemCostInfo findByPrimaryKey(int id) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria ''.
	 */
	public ItemCostInfo[] findAll() throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria 'ID = :id'.
	 */
	public ItemCostInfo[] findWhereIdEquals(int id) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria 'TL_ID = :tlId'.
	 */
	public ItemCostInfo[] findWhereTlIdEquals(int tlId) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria 'ITEM = :item'.
	 */
	public ItemCostInfo[] findWhereItemEquals(String item) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the criteria 'ITEM_COST = :itemCost'.
	 */
	public ItemCostInfo[] findWhereItemCostEquals(double itemCost) throws ItemCostInfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the specified arbitrary SQL statement
	 */
	public ItemCostInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemCostInfoDaoException;

	/** 
	 * Returns all rows from the ITEM_COST_INFO table that match the specified arbitrary SQL statement
	 */
	public ItemCostInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemCostInfoDaoException;

}
