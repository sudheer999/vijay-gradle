/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface AddressDao
{
	/** 
	 * Inserts a new row in the ADDRESS table.
	 */
	public AddressPk insert(Address dto) throws AddressDaoException;

	/** 
	 * Updates a single row in the ADDRESS table.
	 */
	public void update(AddressPk pk, Address dto) throws AddressDaoException;

	/** 
	 * Deletes a single row in the ADDRESS table.
	 */
	public void delete(AddressPk pk) throws AddressDaoException;

	/** 
	 * Returns the rows from the ADDRESS table that matches the specified primary-key value.
	 */
	public Address findByPrimaryKey(AddressPk pk) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'ID = :id'.
	 */
	public Address findByPrimaryKey(int id) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria ''.
	 */
	public Address[] findAll() throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'ID = :id'.
	 */
	public Address[] findWhereIdEquals(int id) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'ADDRESS = :address'.
	 */
	public Address[] findWhereAddressEquals(String address) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'CITY = :city'.
	 */
	public Address[] findWhereCityEquals(String city) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'ZIPCODE = :zipcode'.
	 */
	public Address[] findWhereZipcodeEquals(int zipcode) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'STATE = :state'.
	 */
	public Address[] findWhereStateEquals(String state) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the criteria 'COUNTRY = :country'.
	 */
	public Address[] findWhereCountryEquals(String country) throws AddressDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ADDRESS table that match the specified arbitrary SQL statement
	 */
	public Address[] findByDynamicSelect(String sql, Object[] sqlParams) throws AddressDaoException;

	/** 
	 * Returns all rows from the ADDRESS table that match the specified arbitrary SQL statement
	 */
	public Address[] findByDynamicWhere(String sql, Object[] sqlParams) throws AddressDaoException;

}
