/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface TaxBenefitDeclarationDao
{
	/** 
	 * Inserts a new row in the TAX_BENEFIT_DECLARATION table.
	 */
	public TaxBenefitDeclarationPk insert(TaxBenefitDeclaration dto) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Updates a single row in the TAX_BENEFIT_DECLARATION table.
	 */
	public void update(TaxBenefitDeclarationPk pk, TaxBenefitDeclaration dto) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Deletes a single row in the TAX_BENEFIT_DECLARATION table.
	 */
	public void delete(TaxBenefitDeclarationPk pk) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns the rows from the TAX_BENEFIT_DECLARATION table that matches the specified primary-key value.
	 */
	public TaxBenefitDeclaration findByPrimaryKey(TaxBenefitDeclarationPk pk) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitDeclaration findByPrimaryKey(int id) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'BENEFIT_ID = :benefitId'.
	 */
	public TaxBenefitDeclaration[] findByTaxBenefit(int benefitId) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'USERID = :userid'.
	 */
	public TaxBenefitDeclaration[] findByUsers(int userid) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria ''.
	 */
	public TaxBenefitDeclaration[] findAll() throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'ID = :id'.
	 */
	public TaxBenefitDeclaration[] findWhereIdEquals(int id) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'USERID = :userid'.
	 */
	public TaxBenefitDeclaration[] findWhereUseridEquals(int userid) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'BENEFIT_ID = :benefitId'.
	 */
	public TaxBenefitDeclaration[] findWhereBenefitIdEquals(int benefitId) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'AMOUNT = :amount'.
	 */
	public TaxBenefitDeclaration[] findWhereAmountEquals(String amount) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'FINANCIAL_YEAR = :financialYear'.
	 */
	public TaxBenefitDeclaration[] findWhereFinancialYearEquals(String financialYear) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the criteria 'COMMENTS = :comments'.
	 */
	public TaxBenefitDeclaration[] findWhereCommentsEquals(String comments) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitDeclaration[] findByDynamicSelect(String sql, Object[] sqlParams) throws TaxBenefitDeclarationDaoException;

	/** 
	 * Returns all rows from the TAX_BENEFIT_DECLARATION table that match the specified arbitrary SQL statement
	 */
	public TaxBenefitDeclaration[] findByDynamicWhere(String sql, Object[] sqlParams) throws TaxBenefitDeclarationDaoException;

}
