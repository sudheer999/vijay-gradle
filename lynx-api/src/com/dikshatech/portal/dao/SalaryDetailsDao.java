/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface SalaryDetailsDao
{
	/** 
	 * Inserts a new row in the SALARY_DETAILS table.
	 */
	public SalaryDetailsPk insert(SalaryDetails dto) throws SalaryDetailsDaoException;

	/** 
	 * Updates a single row in the SALARY_DETAILS table.
	 */
	public void update(SalaryDetailsPk pk, SalaryDetails dto) throws SalaryDetailsDaoException;

	/** 
	 * Deletes a single row in the SALARY_DETAILS table.
	 */
	public void delete(SalaryDetailsPk pk) throws SalaryDetailsDaoException;

	/** 
	 * Returns the rows from the SALARY_DETAILS table that matches the specified primary-key value.
	 */
	public SalaryDetails findByPrimaryKey(SalaryDetailsPk pk) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SalaryDetails findByPrimaryKey(int id) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria ''.
	 */
	public SalaryDetails[] findAll() throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ID = :id'.
	 */
	public SalaryDetails[] findWhereIdEquals(int id) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'USER_ID = :userId'.
	 */
	public SalaryDetails[] findWhereUserIdEquals(int userId) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public SalaryDetails[] findWhereCandidateIdEquals(int candidateId) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'FIELD_LABEL = :fieldLabel'.
	 */
	public SalaryDetails[] findWhereFieldLabelEquals(String fieldLabel) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'MONTHLY = :monthly'.
	 */
	public SalaryDetails[] findWhereMonthlyEquals(String monthly) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'ANNUAL = :annual'.
	 */
	public SalaryDetails[] findWhereAnnualEquals(String annual) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'SUM = :sum'.
	 */
	public SalaryDetails[] findWhereSumEquals(String sum) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'FIELDTYPE = :fieldtype'.
	 */
	public SalaryDetails[] findWhereFieldtypeEquals(String fieldtype) throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the criteria 'SAL_ID = :salId'.
	 */
	public SalaryDetails[] findWhereSalIdEquals(int salId) throws SalaryDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SalaryDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws SalaryDetailsDaoException;
	
	public SalaryDetails[] findByDynamicSelectCtcAmt(String sql, Object[] sqlParams)throws SalaryDetailsDaoException;

	/** 
	 * Returns all rows from the SALARY_DETAILS table that match the specified arbitrary SQL statement
	 */
	public SalaryDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws SalaryDetailsDaoException;

	public SalaryDetails[] findWhereUserIdEqualsCtc(int userId)throws SalaryDetailsDaoException;

	public SalaryDetails[] findbyuserid(Integer userId)throws SalaryDetailsDaoException;

	public SalaryDetails[] findByDynamicSelectBonus(String string, Object[] objects)throws SalaryDetailsDaoException;
	
	public SalaryDetails[] findbyuser(Integer userId)throws SalaryDetailsDaoException;

	public SalaryDetails[] findByDynamicWhereEsic(String string, Object[] objects)throws SalaryDetailsDaoException;

}
