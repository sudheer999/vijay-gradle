/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface LoanDetailsDao
{
	/** 
	 * Inserts a new row in the LOAN_DETAILS table.
	 */
	public LoanDetailsPk insert(LoanDetails dto) throws LoanDetailsDaoException;

	/** 
	 * Updates a single row in the LOAN_DETAILS table.
	 */
	public void update(LoanDetailsPk pk, LoanDetails dto) throws LoanDetailsDaoException;

	/** 
	 * Deletes a single row in the LOAN_DETAILS table.
	 */
	public void delete(LoanDetailsPk pk) throws LoanDetailsDaoException;

	/** 
	 * Returns the rows from the LOAN_DETAILS table that matches the specified primary-key value.
	 */
	public LoanDetails findByPrimaryKey(LoanDetailsPk pk) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ID = :id'.
	 */
	public LoanDetails findByPrimaryKey(int id) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria ''.
	 */
	public LoanDetails[] findAll() throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ID = :id'.
	 */
	public LoanDetails[] findWhereIdEquals(int id) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'REQUESTER_ID = :requesterId'.
	 */
	public LoanDetails[] findWhereRequesterIdEquals(int requesterId) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'ELIGIBILITY_AMOUNT = :eligibilityAmount'.
	 */
	public LoanDetails[] findWhereEligibilityAmountEquals(double eligibilityAmount) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_PERIOD = :emiPeriod'.
	 */
	public LoanDetails[] findWhereEmiPeriodEquals(int emiPeriod) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_ELIGIBILITY = :emiEligibility'.
	 */
	public LoanDetails[] findWhereEmiEligibilityEquals(int emiEligibility) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'GROSS_SALARY = :grossSalary'.
	 */
	public LoanDetails[] findWhereGrossSalaryEquals(double grossSalary) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'NET_SALARY = :netSalary'.
	 */
	public LoanDetails[] findWhereNetSalaryEquals(double netSalary) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'APPROVED_AMOUNT = :approvedAmount'.
	 */
	public LoanDetails[] findWhereApprovedAmountEquals(double approvedAmount) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'EMI_PAID = :emiPaid'.
	 */
	public LoanDetails[] findWhereEmiPaidEquals(int emiPaid) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'REMAINING_AMOUNT = :remainingAmount'.
	 */
	public LoanDetails[] findWhereRemainingAmountEquals(double remainingAmount) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'PURPOSE = :purpose'.
	 */
	public LoanDetails[] findWherePurposeEquals(String purpose) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'STATUS_ID = :statusId'.
	 */
	public LoanDetails[] findWhereStatusIdEquals(int statusId) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'APPLY_DATE = :applyDate'.
	 */
	public LoanDetails[] findWhereApplyDateEquals(Date applyDate) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'CREATE_DATE_TIME = :createDateTime'.
	 */
	public LoanDetails[] findWhereCreateDateTimeEquals(Date createDateTime) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'RESPONSE_DATE = :responseDate'.
	 */
	public LoanDetails[] findWhereResponseDateEquals(Date responseDate) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the criteria 'LOAN_TYPE_ID = :loanTypeId'.
	 */
	public LoanDetails[] findWhereLoanTypeIdEquals(int loanTypeId) throws LoanDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the specified arbitrary SQL statement
	 */
	public LoanDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoanDetailsDaoException;

	/** 
	 * Returns all rows from the LOAN_DETAILS table that match the specified arbitrary SQL statement
	 */
	public LoanDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoanDetailsDaoException;

}
