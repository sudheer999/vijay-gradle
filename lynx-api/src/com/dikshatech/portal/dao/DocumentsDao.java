/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.List;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface DocumentsDao
{
	/** 
	 * Inserts a new row in the DOCUMENTS table.
	 */
	public DocumentsPk insert(Documents dto) throws DocumentsDaoException;

	/** 
	 * Updates a single row in the DOCUMENTS table.
	 */
	public void update(DocumentsPk pk, Documents dto) throws DocumentsDaoException;

	/** 
	 * Deletes a single row in the DOCUMENTS table.
	 */
	public void delete(DocumentsPk pk) throws DocumentsDaoException;

	/** 
	 * Returns the rows from the DOCUMENTS table that matches the specified primary-key value.
	 */
	public Documents findByPrimaryKey(DocumentsPk pk) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria 'ID = :id'.
	 */
	public Documents findByPrimaryKey(int id) throws DocumentsDaoException;
	public Documents findByUserId(int id) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria ''.
	 */
	public Documents[] findAll() throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria 'ID = :id'.
	 */
	public Documents[] findWhereIdEquals(int id) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria 'FILENAME = :filename'.
	 */
	public Documents[] findWhereFilenameEquals(String filename) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria 'DOCTYPE = :doctype'.
	 */
	public Documents[] findWhereDoctypeEquals(String doctype) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the criteria 'DESCRIPTIONS = :descriptions'.
	 */
	public Documents[] findWhereDescriptionsEquals(byte[] descriptions) throws DocumentsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the DOCUMENTS table that match the specified arbitrary SQL statement
	 */
	public Documents[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocumentsDaoException;

	/** 
	 * Returns all rows from the DOCUMENTS table that match the specified arbitrary SQL statement
	 */
	public Documents[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocumentsDaoException;

	
	public List<String[]> findinternalReportData();

}
