/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface IssueCommentsMapDao
{
	/** 
	 * Inserts a new row in the ISSUE_COMMENTS_MAP table.
	 */
	public IssueCommentsMapPk insert(IssueCommentsMap dto) throws IssueCommentsMapDaoException;

	/** 
	 * Updates a single row in the ISSUE_COMMENTS_MAP table.
	 */
	public void update(IssueCommentsMapPk pk, IssueCommentsMap dto) throws IssueCommentsMapDaoException;

	/** 
	 * Deletes a single row in the ISSUE_COMMENTS_MAP table.
	 */
	public void delete(IssueCommentsMapPk pk) throws IssueCommentsMapDaoException;

	/** 
	 * Returns the rows from the ISSUE_COMMENTS_MAP table that matches the specified primary-key value.
	 */
	public IssueCommentsMap findByPrimaryKey(IssueCommentsMapPk pk) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'ID = :id'.
	 */
	public IssueCommentsMap findByPrimaryKey(int id) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria ''.
	 */
	public IssueCommentsMap[] findAll() throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'COMMENT_ID = :commentId'.
	 */
	public IssueCommentsMap[] findByIssueComments(int commentId) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'ID = :id'.
	 */
	public IssueCommentsMap[] findWhereIdEquals(int id) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'COMMENT_ID = :commentId'.
	 */
	public IssueCommentsMap[] findWhereCommentIdEquals(int commentId) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'USER_ID = :userId'.
	 */
	public IssueCommentsMap[] findWhereUserIdEquals(int userId) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public IssueCommentsMap[] findWhereEsrMapIdEquals(int esrMapId) throws IssueCommentsMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the specified arbitrary SQL statement
	 */
	public IssueCommentsMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws IssueCommentsMapDaoException;

	/** 
	 * Returns all rows from the ISSUE_COMMENTS_MAP table that match the specified arbitrary SQL statement
	 */
	public IssueCommentsMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws IssueCommentsMapDaoException;

}
