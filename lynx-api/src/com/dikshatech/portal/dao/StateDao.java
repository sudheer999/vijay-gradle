/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface StateDao
{
	/** 
	 * Inserts a new row in the STATE table.
	 */
	public StatePk insert(State dto) throws StateDaoException;

	/** 
	 * Updates a single row in the STATE table.
	 */
	public void update(StatePk pk, State dto) throws StateDaoException;

	/** 
	 * Deletes a single row in the STATE table.
	 */
	public void delete(StatePk pk) throws StateDaoException;

	/** 
	 * Returns the rows from the STATE table that matches the specified primary-key value.
	 */
	public State findByPrimaryKey(StatePk pk) throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the criteria 'ID = :id'.
	 */
	public State findByPrimaryKey(int id) throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the criteria ''.
	 */
	public State[] findAll() throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the criteria 'ID = :id'.
	 */
	public State[] findWhereIdEquals(int id) throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the criteria 'STATE = :state'.
	 */
	public State[] findWhereStateEquals(String state) throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the criteria 'STATE_ABBR = :stateAbbr'.
	 */
	public State[] findWhereStateAbbrEquals(String stateAbbr) throws StateDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the STATE table that match the specified arbitrary SQL statement
	 */
	public State[] findByDynamicSelect(String sql, Object[] sqlParams) throws StateDaoException;

	/** 
	 * Returns all rows from the STATE table that match the specified arbitrary SQL statement
	 */
	public State[] findByDynamicWhere(String sql, Object[] sqlParams) throws StateDaoException;

}
