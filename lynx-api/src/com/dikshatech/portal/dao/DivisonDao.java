/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface DivisonDao
{
	/**
	 * Inserts a new row in the DIVISON table.
	 */
	public DivisonPk insert(Divison dto) throws DivisonDaoException;

	/**
	 * Updates a single row in the DIVISON table.
	 */
	public void update(DivisonPk pk, Divison dto) throws DivisonDaoException;

	/**
	 * Deletes a single row in the DIVISON table.
	 */
	public void delete(DivisonPk pk) throws DivisonDaoException;

	/**
	 * Returns the rows from the DIVISON table that matches the specified
	 * primary-key value.
	 */
	public Divison findByPrimaryKey(DivisonPk pk) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'ID =
	 * :id'.
	 */
	public Divison findByPrimaryKey(int id) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria ''.
	 */
	public Divison[] findAll() throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'ID =
	 * :id'.
	 */
	public Divison[] findWhereIdEquals(int id) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria 'NAME =
	 * :name'.
	 */
	public Divison[] findWhereNameEquals(String name) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria
	 * 'PARENT_ID = :parentId'.
	 */
	public Divison[] findWhereParentIdEquals(int parentId) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the criteria
	 * 'REGION_ID = :regionId'.
	 */
	public Divison[] findWhereRegionIdEquals(int regionId) throws DivisonDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the DIVISON table that match the specified
	 * arbitrary SQL statement
	 */
	public Divison[] findByDynamicSelect(String sql, Object[] sqlParams) throws DivisonDaoException;

	/**
	 * Returns all rows from the DIVISON table that match the specified
	 * arbitrary SQL statement
	 */
	public Divison[] findByDynamicWhere(String sql, Object[] sqlParams) throws DivisonDaoException;
}
