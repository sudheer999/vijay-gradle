/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface LeaveBalanceDao
{
	/** 
	 * Inserts a new row in the LEAVE_BALANCE table.
	 */
	public LeaveBalancePk insert(LeaveBalance dto) throws LeaveBalanceDaoException;

	/** 
	 * Updates a single row in the LEAVE_BALANCE table.
	 */
	public void update(LeaveBalancePk pk, LeaveBalance dto) throws LeaveBalanceDaoException;

	/** 
	 * Updates a single row in the LEAVE_BALANCE table.
	 */
	public boolean updateFromXls(LeaveBalance dto) throws LeaveBalanceDaoException;
	
	/** 
	 * Deletes a single row in the LEAVE_BALANCE table.
	 */
	public void delete(LeaveBalancePk pk) throws LeaveBalanceDaoException;

	/** 
	 * Returns the rows from the LEAVE_BALANCE table that matches the specified primary-key value.
	 */
	public LeaveBalance findByPrimaryKey(LeaveBalancePk pk) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'ID = :id'.
	 */
	public LeaveBalance findByPrimaryKey(int id) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria ''.
	 */
	public LeaveBalance[] findAll() throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'ID = :id'.
	 */
	public LeaveBalance[] findWhereIdEquals(int id) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'USER_ID = :userId'.
	 */
	public LeaveBalance findWhereUserIdEquals(int userId) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LEAVE_ACCUMALATED = :leaveAccumalated'.
	 */
	public LeaveBalance[] findWhereLeaveAccumalatedEquals(float leaveAccumalated) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'PATERNITY = :paternity'.
	 */
	public LeaveBalance[] findWherePaternityEquals(float paternity) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'MARRIAGE = :marriage'.
	 */
	public LeaveBalance[] findWhereMarriageEquals(float marriage) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'BEREAVEMENT = :bereavement'.
	 */
	public LeaveBalance[] findWhereBereavementEquals(float bereavement) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'MATERNITY = :maternity'.
	 */
	public LeaveBalance[] findWhereMaternityEquals(float maternity) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LEAVES_TAKEN = :leavesTaken'.
	 */
	public LeaveBalance[] findWhereLeavesTakenEquals(float leavesTaken) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'BALANCE = :balance'.
	 */
	public LeaveBalance[] findWhereBalanceEquals(float balance) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'CREATED_ON = :createdOn'.
	 */
	public LeaveBalance[] findWhereCreatedOnEquals(Date createdOn) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'COMP_OFF = :compOff'.
	 */
	public LeaveBalance[] findWhereCompOffEquals(float compOff) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the criteria 'LWP = :lwp'.
	 */
	public LeaveBalance[] findWhereLwpEquals(float lwp) throws LeaveBalanceDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the specified arbitrary SQL statement
	 */
	public LeaveBalance[] findByDynamicSelect(String sql, Object[] sqlParams) throws LeaveBalanceDaoException;

	/** 
	 * Returns all rows from the LEAVE_BALANCE table that match the specified arbitrary SQL statement
	 */
	public LeaveBalance[] findByDynamicWhere(String sql, Object[] sqlParams) throws LeaveBalanceDaoException;
	
	public LeaveBalance[] findByUserID(String sql, Object[] sqlParams) throws LeaveBalanceDaoException;

}