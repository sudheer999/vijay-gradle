/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;

import com.dikshatech.beans.TravelRequest;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;
import com.dikshatech.portal.forms.TravelForm;

public interface TravelDao
{
	/** 
	 * Inserts a new row in the TRAVEL table.
	 */
	public TravelPk insert(Travel dto) throws TravelDaoException;

	/** 
	 * Updates a single row in the TRAVEL table.
	 */
	public void update(TravelPk pk, Travel dto) throws TravelDaoException;

	/** 
	 * Deletes a single row in the TRAVEL table.
	 */
	public void delete(TravelPk pk) throws TravelDaoException;

	/** 
	 * Returns the rows from the TRAVEL table that matches the specified primary-key value.
	 */
	public Travel findByPrimaryKey(TravelPk pk) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'ID = :id'.
	 */
	public Travel findByPrimaryKey(int id) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria ''.
	 */
	public Travel[] findAll() throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'ID = :id'.
	 */
	public Travel[] findWhereIdEquals(int id) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'ESRQM_ID = :esrqmId'.
	 */
	public Travel[] findWhereEsrqmIdEquals(int esrqmId) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'STATUS = :status'.
	 */
	public Travel[] findWhereStatusEquals(int status) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'RAISED_BY = :raisedBy'.
	 */
	public Travel[] findWhereRaisedByEquals(int raisedBy) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'IS_CONTACT_PERSON_REQ = :isContactPersonReq'.
	 */
	public Travel[] findWhereIsContactPersonReqEquals(int isContactPersonReq) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TL_TYPE = :tlType'.
	 */
	public Travel[] findWhereTlTypeEquals(String tlType) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TRL_USER_ID = :trlUserId'.
	 */
	public Travel[] findWhereTrlUserIdEquals(int trlUserId) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'PURPOSE_OF_TL = :purposeOfTl'.
	 */
	public Travel[] findWherePurposeOfTlEquals(String purposeOfTl) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TRAVELLER_COMMENTS = :travellerComments'.
	 */
	public Travel[] findWhereTravellerCommentsEquals(String travellerComments) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'SPOUSE_NAME = :spouseName'.
	 */
	public Travel[] findWhereSpouseNameEquals(String spouseName) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'COMMENTS_HISTORY = :commentsHistory'.
	 */
	public Travel[] findWhereCommentsHistoryEquals(String commentsHistory) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'IS_ROLL_ON = :isRollOn'.
	 */
	public Travel[] findWhereIsRollOnEquals(int isRollOn) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'CHARGE_CODE = :chargeCode'.
	 */
	public Travel[] findWhereChargeCodeEquals(int chargeCode) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'MODE_OF_TL = :modeOfTl'.
	 */
	public Travel[] findWhereModeOfTlEquals(String modeOfTl) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TL_FROM = :tlFrom'.
	 */
	public Travel[] findWhereTlFromEquals(String tlFrom) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TL_TO = :tlTo'.
	 */
	public Travel[] findWhereTlToEquals(String tlTo) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'PRF_DATE_TO_TL = :prfDateToTl'.
	 */
	public Travel[] findWherePrfDateToTlEquals(Date prfDateToTl) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'PRF_TIME_TO_TL = :prfTimeToTl'.
	 */
	public Travel[] findWherePrfTimeToTlEquals(Date prfTimeToTl) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'IS_ROUND_TRIP = :isRoundTrip'.
	 */
	public Travel[] findWhereIsRoundTripEquals(int isRoundTrip) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'RETURN_DATE = :returnDate'.
	 */
	public Travel[] findWhereReturnDateEquals(Date returnDate) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'RETURN_TIME = :returnTime'.
	 */
	public Travel[] findWhereReturnTimeEquals(Date returnTime) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'ACCOMODATION_REQ = :accomodationReq'.
	 */
	public Travel[] findWhereAccomodationReqEquals(int accomodationReq) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'TYPE_OF_ACCOMODATION = :typeOfAccomodation'.
	 */
	public Travel[] findWhereTypeOfAccomodationEquals(String typeOfAccomodation) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'CAB_REQ = :cabReq'.
	 */
	public Travel[] findWhereCabReqEquals(int cabReq) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'ONWARD_INWARD = :onwardInward'.
	 */
	public Travel[] findWhereOnwardInwardEquals(int onwardInward) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Travel[] findWhereCreateDateEquals(Date createDate) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the criteria 'DOCUMENTS_ID = :documentsId'.
	 */
	public Travel[] findWhereDocumentsIdEquals(int documentsId) throws TravelDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TRAVEL table that match the specified arbitrary SQL statement
	 */
	public Travel[] findByDynamicSelect(String sql, Object[] sqlParams) throws TravelDaoException;

	/** 
	 * Returns all rows from the TRAVEL table that match the specified arbitrary SQL statement
	 */
	public Travel[] findByDynamicWhere(String sql, Object[] sqlParams) throws TravelDaoException;

	TravelRequest findTravelId(Object[] sqlParams) throws TravelDaoException;

	TravelForm[] findTravellerDetailsByEmpId(Object[] sqlParams)
			throws TravelDaoException;

	public String getCommentsHistory(int esrMapId) throws TravelDaoException;
	
	public void appendCommentsHistory(int esrMapId, String newComment)
	throws TravelDaoException ;

	public void executeUpdate(String string) throws TravelDaoException;
}
