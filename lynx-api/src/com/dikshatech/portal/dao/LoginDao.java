/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface LoginDao
{
	/** 
	 * Inserts a new row in the LOGIN table.
	 */
	public LoginPk insert(Login dto) throws LoginDaoException;

	/** 
	 * Updates a single row in the LOGIN table.
	 */
	public void update(LoginPk pk, Login dto) throws LoginDaoException;

	/** 
	 * Deletes a single row in the LOGIN table.
	 */
	public void delete(LoginPk pk) throws LoginDaoException;

	/** 
	 * Returns the rows from the LOGIN table that matches the specified primary-key value.
	 */
	public Login findByPrimaryKey(LoginPk pk) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'ID = :id'.
	 */
	public Login findByPrimaryKey(int id) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria ''.
	 */
	public Login[] findAll() throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'ID = :id'.
	 */
	public Login[] findWhereIdEquals(int id) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'USER_ID = :userId'.
	 */
	public Login[] findWhereUserIdEquals(int userId) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'USER_NAME = :userName'.
	 */
	public Login[] findWhereUserNameEquals(String userName) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'PASSWORD = :password'.
	 */
	public Login[] findWherePasswordEquals(String password) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the criteria 'CANDIDATE_ID = :candidateId'.
	 */
	public Login findWhereCandidateIdEquals(int candidateId) throws LoginDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the LOGIN table that match the specified arbitrary SQL statement
	 */
	public Login[] findByDynamicSelect(String sql, Object[] sqlParams) throws LoginDaoException;

	/** 
	 * Returns all rows from the LOGIN table that match the specified arbitrary SQL statement
	 */
	public Login[] findByDynamicWhere(String sql, Object[] sqlParams) throws LoginDaoException;


    public Login findByUserNamePassword(String userName, String password) throws LoginDaoException;
}
