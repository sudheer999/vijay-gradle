/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface IssuesDao
{
	/** 
	 * Inserts a new row in the ISSUES table.
	 */
	public IssuesPk insert(Issues dto) throws IssuesDaoException;

	/** 
	 * Updates a single row in the ISSUES table.
	 */
	public void update(IssuesPk pk, Issues dto) throws IssuesDaoException;

	/** 
	 * Deletes a single row in the ISSUES table.
	 */
	public void delete(IssuesPk pk) throws IssuesDaoException;

	/** 
	 * Returns the rows from the ISSUES table that matches the specified primary-key value.
	 */
	public Issues findByPrimaryKey(IssuesPk pk) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria 'ID = :id'.
	 */
	public Issues findByPrimaryKey(int id) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria ''.
	 */
	public Issues[] findAll() throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria 'ID = :id'.
	 */
	public Issues[] findWhereIdEquals(int id) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria 'IS_NAME = :isName'.
	 */
	public Issues[] findWhereIsNameEquals(String isName) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria 'DIV_ID = :divId'.
	 */
	public Issues[] findWhereDivIdEquals(int divId) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the criteria 'FEATURE_ISSUE_ID = :featureIssueId'.
	 */
	public Issues[] findWhereFeatureIssueIdEquals(int featureIssueId) throws IssuesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ISSUES table that match the specified arbitrary SQL statement
	 */
	public Issues[] findByDynamicSelect(String sql, Object[] sqlParams) throws IssuesDaoException;

	/** 
	 * Returns all rows from the ISSUES table that match the specified arbitrary SQL statement
	 */
	public Issues[] findByDynamicWhere(String sql, Object[] sqlParams) throws IssuesDaoException;

}
