/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ProjectMappingDao
{
	/** 
	 * Inserts a new row in the PROJECT_MAPPING table.
	 */
	public ProjectMappingPk insert(ProjectMapping dto) throws ProjectMappingDaoException;

	/** 
	 * Updates a single row in the PROJECT_MAPPING table.
	 */
	public void update(ProjectMappingPk pk, ProjectMapping dto) throws ProjectMappingDaoException;

	/** 
	 * Deletes a single row in the PROJECT_MAPPING table.
	 */
	public void delete(ProjectMappingPk pk) throws ProjectMappingDaoException;

	/** 
	 * Returns the rows from the PROJECT_MAPPING table that matches the specified primary-key value.
	 */
	public ProjectMapping findByPrimaryKey(ProjectMappingPk pk) throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public ProjectMapping findByPrimaryKey(int id) throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the criteria ''.
	 */
	public ProjectMapping[] findAll() throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the criteria 'ID = :id'.
	 */
	public ProjectMapping[] findWhereIdEquals(int id) throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the criteria 'PROJECT_ID = :projectId'.
	 */
	public ProjectMapping[] findWhereProjectIdEquals(int projectId) throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the criteria 'USER_ID = :userId'.
	 */
	public ProjectMapping[] findWhereUserIdEquals(int userId) throws ProjectMappingDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public ProjectMapping[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectMappingDaoException;

	/** 
	 * Returns all rows from the PROJECT_MAPPING table that match the specified arbitrary SQL statement
	 */
	public ProjectMapping[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectMappingDaoException;

}
