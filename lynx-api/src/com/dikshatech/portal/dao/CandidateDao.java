/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface CandidateDao
{
	/** 
	 * Inserts a new row in the CANDIDATE table.
	 */
	public CandidatePk insert(Candidate dto) throws CandidateDaoException;

	/** 
	 * Updates a single row in the CANDIDATE table.
	 */
	public void update(CandidatePk pk, Candidate dto) throws CandidateDaoException;

	/** 
	 * Deletes a single row in the CANDIDATE table.
	 */
	public void delete(CandidatePk pk) throws CandidateDaoException;

	/** 
	 * Returns the rows from the CANDIDATE table that matches the specified primary-key value.
	 */
	public Candidate findByPrimaryKey(CandidatePk pk) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'ID = :id'.
	 */
	public Candidate findByPrimaryKey(int id) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria ''.
	 */
	public Candidate[] findAll() throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'ID = :id'.
	 */
	public Candidate[] findWhereIdEquals(int id) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PROFILE_ID = :profileId'.
	 */
	public Candidate[] findWhereProfileIdEquals(int profileId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'EDUCATION_ID = :educationId'.
	 */
	public Candidate[] findWhereEducationIdEquals(int educationId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'EXPERIENCE_ID = :experienceId'.
	 */
	public Candidate[] findWhereExperienceIdEquals(int experienceId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PERSONAL_ID = :personalId'.
	 */
	public Candidate[] findWherePersonalIdEquals(int personalId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'FINANCIAL_ID = :financialId'.
	 */
	public Candidate[] findWhereFinancialIdEquals(int financialId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PASSPORT_ID = :passportId'.
	 */
	public Candidate[] findWherePassportIdEquals(int passportId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'LEVEL_ID = :levelId'.
	 */
	public Candidate[] findWhereLevelIdEquals(int levelId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'IS_EMPLOYEE = :isEmployee'.
	 */
	public Candidate[] findWhereIsEmployeeEquals(short isEmployee) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'IS_ACTIVE = :isActive'.
	 */
	public Candidate[] findWhereIsActiveEquals(short isActive) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'CREATE_DATE = :createDate'.
	 */
	public Candidate[] findWhereCreateDateEquals(Date createDate) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'STATUS = :status'.
	 */
	public Candidate[] findWhereStatusEquals(int status) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'DATE_OF_OFFER = :dateOfOffer'.
	 */
	public Candidate[] findWhereDateOfOfferEquals(Date dateOfOffer) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'TAT_ID = :tatId'.
	 */
	public Candidate[] findWhereTatIdEquals(int tatId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'NOMINEE_ID = :nomineeId'.
	 */
	public Candidate[] findWhereNomineeIdEquals(int nomineeId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'OFFER_LETTER = :offerLetter'.
	 */
	public Candidate[] findWhereOfferLetterEquals(String offerLetter) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'UUID = :uuid'.
	 */
	public Candidate[] findWhereUuidEquals(String uuid) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PRO_APPROVAL_ID = :proApprovalId'.
	 */
	public Candidate[] findWhereProApprovalIdEquals(int proApprovalId) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the criteria 'PER_APPROVAL_ID = :perApprovalId'.
	 */
	public Candidate[] findWherePerApprovalIdEquals(int perApprovalId) throws CandidateDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CANDIDATE table that match the specified arbitrary SQL statement
	 */
	public Candidate[] findByDynamicSelect(String sql, Object[] sqlParams) throws CandidateDaoException;

	/** 
	 * Returns all rows from the CANDIDATE table that match the specified arbitrary SQL statement
	 */
	public Candidate[] findByDynamicWhere(String sql, Object[] sqlParams) throws CandidateDaoException;

}
