/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface CandidateChecklistDocsDao
{
	/** 
	 * Inserts a new row in the CANDIDATE_CHECKLIST_DOCS table.
	 */
	public CandidateChecklistDocsPk insert(CandidateChecklistDocs dto) throws CandidateChecklistDocsDaoException;

	/** 
	 * Updates a single row in the CANDIDATE_CHECKLIST_DOCS table.
	 */
	public void update(CandidateChecklistDocsPk pk, CandidateChecklistDocs dto) throws CandidateChecklistDocsDaoException;

	/** 
	 * Deletes a single row in the CANDIDATE_CHECKLIST_DOCS table.
	 */
	public void delete(CandidateChecklistDocsPk pk) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns the rows from the CANDIDATE_CHECKLIST_DOCS table that matches the specified primary-key value.
	 */
	public CandidateChecklistDocs findByPrimaryKey(CandidateChecklistDocsPk pk) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the criteria 'ID = :id'.
	 */
	public CandidateChecklistDocs findByPrimaryKey(int id) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the criteria ''.
	 */
	public CandidateChecklistDocs[] findAll() throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the criteria 'ID = :id'.
	 */
	public CandidateChecklistDocs[] findWhereIdEquals(int id) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the criteria 'NAME = :name'.
	 */
	public CandidateChecklistDocs[] findWhereNameEquals(String name) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the criteria 'PARENT_ID = :parentId'.
	 */
	public CandidateChecklistDocs[] findWhereParentIdEquals(int parentId) throws CandidateChecklistDocsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the specified arbitrary SQL statement
	 */
	public CandidateChecklistDocs[] findByDynamicSelect(String sql, Object[] sqlParams) throws CandidateChecklistDocsDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_DOCS table that match the specified arbitrary SQL statement
	 */
	public CandidateChecklistDocs[] findByDynamicWhere(String sql, Object[] sqlParams) throws CandidateChecklistDocsDaoException;

}
