/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface UserTaskTimesheetMapDao
{
	/** 
	 * Inserts a new row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public UserTaskTimesheetMapPk insert(UserTaskTimesheetMap dto) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Updates a single row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public void update(UserTaskTimesheetMapPk pk, UserTaskTimesheetMap dto) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Deletes a single row in the USER_TASK_TIMESHEET_MAP table.
	 */
	public void delete(UserTaskTimesheetMapPk pk) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns the rows from the USER_TASK_TIMESHEET_MAP table that matches the specified primary-key value.
	 */
	public UserTaskTimesheetMap findByPrimaryKey(UserTaskTimesheetMapPk pk) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ID = :id'.
	 */
	public UserTaskTimesheetMap findByPrimaryKey(int id) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria ''.
	 */
	public UserTaskTimesheetMap[] findAll() throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ID = :id'.
	 */
	public UserTaskTimesheetMap[] findWhereIdEquals(int id) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'ETC = :etc'.
	 */
	public UserTaskTimesheetMap[] findWhereEtcEquals(float etc) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TOTAL_ETC = :totalEtc'.
	 */
	public UserTaskTimesheetMap[] findWhereTotalEtcEquals(float totalEtc) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TASK_NAME = :taskName'.
	 */
	public UserTaskTimesheetMap[] findWhereTaskNameEquals(String taskName) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'PROJECT_ID = :projectId'.
	 */
	public UserTaskTimesheetMap[] findWhereProjectIdEquals(int projectId) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the criteria 'TS_ID = :tsId'.
	 */
	public UserTaskTimesheetMap[] findWhereTsIdEquals(int tsId) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the specified arbitrary SQL statement
	 */
	public UserTaskTimesheetMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserTaskTimesheetMapDaoException;

	/** 
	 * Returns all rows from the USER_TASK_TIMESHEET_MAP table that match the specified arbitrary SQL statement
	 */
	public UserTaskTimesheetMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserTaskTimesheetMapDaoException;

}
