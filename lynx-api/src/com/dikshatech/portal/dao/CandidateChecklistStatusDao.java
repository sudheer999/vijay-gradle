/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.CandidateChecklistStatus;
import com.dikshatech.portal.dto.CandidateChecklistStatusPk;
import com.dikshatech.portal.exceptions.CandidateChecklistStatusDaoException;

public interface CandidateChecklistStatusDao
{
	/** 
	 * Inserts a new row in the CANDIDATE_CHECKLIST_STATUS table.
	 */
	public CandidateChecklistStatusPk insert(CandidateChecklistStatus dto) throws CandidateChecklistStatusDaoException;

	/** 
	 * Updates a single row in the CANDIDATE_CHECKLIST_STATUS table.
	 */
	public void update(CandidateChecklistStatusPk pk, CandidateChecklistStatus dto) throws CandidateChecklistStatusDaoException;

	/** 
	 * Deletes a single row in the CANDIDATE_CHECKLIST_STATUS table.
	 */
	public void delete(CandidateChecklistStatusPk pk) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns the rows from the CANDIDATE_CHECKLIST_STATUS table that matches the specified primary-key value.
	 */
	public CandidateChecklistStatus findByPrimaryKey(CandidateChecklistStatusPk pk) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'ID = :id'.
	 */
	public CandidateChecklistStatus findByPrimaryKey(int id) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'CAND_DOC_ID = :candDocId'.
	 */
	public CandidateChecklistStatus[] findWhereCandDocIdEquals(int candDocId) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria ''.
	 */
	public CandidateChecklistStatus[] findAll() throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'CHKLST_DOC_ID = :chklstDocId'.
	 */
	public CandidateChecklistStatus[] findByCandidateChecklistDocs(int chklstDocId) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'ID = :id'.
	 */
	public CandidateChecklistStatus[] findWhereIdEquals(int id) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'CAND_ID = :candId'.
	 */
	public CandidateChecklistStatus[] findWhereCandIdEquals(int candId) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'CHKLST_DOC_ID = :chklstDocId'.
	 */
	public CandidateChecklistStatus[] findWhereChklstDocIdEquals(int chklstDocId) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'DOC_ID = :docId'.
	 */
	public CandidateChecklistStatus[] findWhereDocIdEquals(int docId) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'IS_UPLOADED = :isUploaded'.
	 */
	public CandidateChecklistStatus[] findWhereIsUploadedEquals(int isUploaded) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'STATUS = :status'.
	 */
	public CandidateChecklistStatus[] findWhereStatusEquals(String status) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the criteria 'COMMENTS = :comments'.
	 */
	public CandidateChecklistStatus[] findWhereCommentsEquals(String comments) throws CandidateChecklistStatusDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the specified arbitrary SQL statement
	 */
	public CandidateChecklistStatus[] findByDynamicSelect(String sql, Object[] sqlParams) throws CandidateChecklistStatusDaoException;

	/** 
	 * Returns all rows from the CANDIDATE_CHECKLIST_STATUS table that match the specified arbitrary SQL statement
	 */
	public CandidateChecklistStatus[] findByDynamicWhere(String sql, Object[] sqlParams) throws CandidateChecklistStatusDaoException;

}
