/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface PoEmpMapDao
{
	/** 
	 * Inserts a new row in the PO_EMP_MAP table.
	 */
	public PoEmpMapPk insert(PoEmpMap dto) throws PoEmpMapDaoException;

	/** 
	 * Updates a single row in the PO_EMP_MAP table.
	 */
	public void update(PoEmpMapPk pk, PoEmpMap dto) throws PoEmpMapDaoException;

	/** 
	 * Deletes a single row in the PO_EMP_MAP table.
	 */
	public void delete(PoEmpMapPk pk) throws PoEmpMapDaoException;

	/** 
	 * Returns the rows from the PO_EMP_MAP table that matches the specified primary-key value.
	 */
	public PoEmpMap findByPrimaryKey(PoEmpMapPk pk) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'ID = :id'.
	 */
	public PoEmpMap findByPrimaryKey(int id) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria ''.
	 */
	public PoEmpMap[] findAll() throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'ID = :id'.
	 */
	public PoEmpMap[] findWhereIdEquals(int id) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'PO_ID = :poId'.
	 */
	public PoEmpMap[] findWherePoIdEquals(int poId) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'EMP_ID = :empId'.
	 */
	public PoEmpMap[] findWhereEmpIdEquals(int empId) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'RATE = :rate'.
	 */
	public PoEmpMap[] findWhereRateEquals(String rate) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'TYPE = :type'.
	 */
	public PoEmpMap[] findWhereTypeEquals(String type) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'CURRENCY = :currency'.
	 */
	public PoEmpMap[] findWhereCurrencyEquals(String currency) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'INACTIVE = :inactive'.
	 */
	public PoEmpMap[] findWhereInactiveEquals(short inactive) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the criteria 'CURRENT = :current'.
	 */
	public PoEmpMap[] findWhereCurrentEquals(short current) throws PoEmpMapDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the specified arbitrary SQL statement
	 */
	public PoEmpMap[] findByDynamicSelect(String sql, Object[] sqlParams) throws PoEmpMapDaoException;

	/** 
	 * Returns all rows from the PO_EMP_MAP table that match the specified arbitrary SQL statement
	 */
	public PoEmpMap[] findByDynamicWhere(String sql, Object[] sqlParams) throws PoEmpMapDaoException;

	public boolean deleteAllByPoDetail(int poDetailId);

	public void updatePoEmpMap(String updateQuery) throws PoEmpMapDaoException;
}
