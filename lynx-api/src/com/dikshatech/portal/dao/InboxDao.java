/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import java.util.Date;
import com.dikshatech.portal.dto.Inbox;
import com.dikshatech.portal.dto.InboxPk;
import com.dikshatech.portal.exceptions.InboxDaoException;

public interface InboxDao {

	/**
	 * Inserts a new row in the INBOX table.
	 */
	public InboxPk insert(Inbox dto) throws InboxDaoException;

	/**
	 * Updates a single row in the INBOX table.
	 */
	public void update(InboxPk pk, Inbox dto) throws InboxDaoException;

	/**
	 * Deletes a single row in the INBOX table.
	 */
	public void delete(InboxPk pk) throws InboxDaoException;

	/**
	 * Returns the rows from the INBOX table that matches the specified primary-key value.
	 */
	public Inbox findByPrimaryKey(InboxPk pk) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'ID = :id'.
	 */
	public Inbox findByPrimaryKey(int id) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria ''.
	 */
	public Inbox[] findAll() throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'ID = :id'.
	 */
	public Inbox[] findWhereIdEquals(int id) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'RECEIVER_ID = :receiverId'.
	 */
	public Inbox[] findWhereReceiverIdEquals(int receiverId) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public Inbox[] findWhereEsrMapIdEquals(int esrMapId) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'SUBJECT = :subject'.
	 */
	public Inbox[] findWhereSubjectEquals(String subject) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'ASSIGNED_TO = :assignedTo'.
	 */
	public Inbox[] findWhereAssignedToEquals(int assignedTo) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'RAISED_BY = :raisedBy'.
	 */
	public Inbox[] findWhereRaisedByEquals(int raisedBy) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'CREATION_DATETIME = :creationDatetime'.
	 */
	public Inbox[] findWhereCreationDatetimeEquals(Date creationDatetime) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'DUE_DATE = :dueDate'.
	 */
	public Inbox[] findWhereDueDateEquals(Date dueDate) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'STATUS = :status'.
	 */
	public Inbox[] findWhereStatusEquals(String status) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'CATEGORY = :category'.
	 */
	public Inbox[] findWhereCategoryEquals(String category) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'IS_READ = :isRead'.
	 */
	public Inbox[] findWhereIsReadEquals(short isRead) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'IS_DELETED = :isDeleted'.
	 */
	public Inbox[] findWhereIsDeletedEquals(short isDeleted) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the criteria 'MESSAGE_BODY = :messageBody'.
	 */
	public Inbox[] findWhereMessageBodyEquals(String messageBody) throws InboxDaoException;

	/** 
	 * Returns all rows from the INBOX table that match the criteria 'IS_ESCALATED = :isEscalated'.
	 */
	public Inbox[] findWhereIsEscalatedEquals(int isEscalated) throws InboxDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the INBOX table that match the specified arbitrary SQL statement
	 */
	public Inbox[] findByDynamicSelect(String sql, Object[] sqlParams) throws InboxDaoException;

	/**
	 * Returns all rows from the INBOX table that match the specified arbitrary SQL statement
	 */
	public Inbox[] findByDynamicWhere(String sql, Object[] sqlParams) throws InboxDaoException;
	
	public void executeUpdate(String sql) throws InboxDaoException;

}
