/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.sql.SQLException;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface MonthlyPayrollDao
{
	/** 
	 * Inserts a new row in the MONTHLY_PAYROLL table.
	 */
	public MonthlyPayrollPk insert(MonthlyPayroll dto) throws MonthlyPayrollDaoException;

	/** 
	 * Updates a single row in the MONTHLY_PAYROLL table.
	 */
	public void update(MonthlyPayrollPk pk, MonthlyPayroll dto) throws MonthlyPayrollDaoException;

	/** 
	 * Deletes a single row in the MONTHLY_PAYROLL table.
	 */
	public void delete(MonthlyPayrollPk pk) throws MonthlyPayrollDaoException;

	/** 
	 * Returns the rows from the MONTHLY_PAYROLL table that matches the specified primary-key value.
	 */
	public MonthlyPayroll findByPrimaryKey(MonthlyPayrollPk pk) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'ID = :id'.
	 */
	public MonthlyPayroll findByPrimaryKey(int id) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria ''.
	 */
	public MonthlyPayroll[] findAll() throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'ID = :id'.
	 */
	public MonthlyPayroll[] findWhereIdEquals(int id) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'USERID = :userid'.
	 */
	public MonthlyPayroll[] findWhereUseridEquals(int userid) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'COMPONENT = :component'.
	 */
	public MonthlyPayroll[] findWhereComponentEquals(String component) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'Amount = :amount'.
	 */
	public MonthlyPayroll[] findWhereAmountEquals(String amount) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'MONTHID = :monthid'.
	 */
	public MonthlyPayroll[] findWhereMonthidEquals(String monthid) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the criteria 'COMPONENT_TYPE = :componentType'.
	 */
	public MonthlyPayroll[] findWhereComponentTypeEquals(int componentType) throws MonthlyPayrollDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the specified arbitrary SQL statement
	 */
	public MonthlyPayroll[] findByDynamicSelect(String sql, Object[] sqlParams) throws MonthlyPayrollDaoException;

	/** 
	 * Returns all rows from the MONTHLY_PAYROLL table that match the specified arbitrary SQL statement
	 */
	public MonthlyPayroll[] findByDynamicWhere(String sql, Object[] sqlParams) throws MonthlyPayrollDaoException;


	

	public String updateMonthlyPayroll(String amount, int userId, String monthId)throws MonthlyPayrollDaoException, SQLException;

	public String salaryReport(String salDec, int userId, int srId)throws MonthlyPayrollDaoException, SQLException;

	
}
