/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ProcessChainDao
{
	/** 
	 * Inserts a new row in the PROCESS_CHAIN table.
	 */
	public ProcessChainPk insert(ProcessChain dto) throws ProcessChainDaoException;

	/** 
	 * Updates a single row in the PROCESS_CHAIN table.
	 */
	public void update(ProcessChainPk pk, ProcessChain dto) throws ProcessChainDaoException;

	/** 
	 * Deletes a single row in the PROCESS_CHAIN table.
	 */
	public void delete(ProcessChainPk pk) throws ProcessChainDaoException;

	/** 
	 * Returns the rows from the PROCESS_CHAIN table that matches the specified primary-key value.
	 */
	public ProcessChain findByPrimaryKey(ProcessChainPk pk) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'ID = :id'.
	 */
	public ProcessChain findByPrimaryKey(int id) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria ''.
	 */
	public ProcessChain[] findAll() throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'ID = :id'.
	 */
	public ProcessChain[] findWhereIdEquals(int id) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'PROC_NAME = :procName'.
	 */
	public ProcessChain[] findWhereProcNameEquals(String procName) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'APPROVAL_CHAIN = :approvalChain'.
	 */
	public ProcessChain[] findWhereApprovalChainEquals(String approvalChain) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'NOTIFICATION = :notification'.
	 */
	public ProcessChain[] findWhereNotificationEquals(String notification) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'HANDLER = :handler'.
	 */
	public ProcessChain[] findWhereHandlerEquals(String handler) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the criteria 'FEATURE_ID = :featureId'.
	 */
	public ProcessChain[] findWhereFeatureIdEquals(int featureId) throws ProcessChainDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the specified arbitrary SQL statement
	 */
	public ProcessChain[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProcessChainDaoException;

	/** 
	 * Returns all rows from the PROCESS_CHAIN table that match the specified arbitrary SQL statement
	 */
	public ProcessChain[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProcessChainDaoException;

}
