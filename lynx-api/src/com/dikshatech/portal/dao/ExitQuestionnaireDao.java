/*
 * This source file was generated by FireStorm/DAO.
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.ExitQuestionnaire;
import com.dikshatech.portal.dto.ExitQuestionnairePk;
import com.dikshatech.portal.exceptions.ExitQuestionnaireDaoException;

public interface ExitQuestionnaireDao {

	/**
	 * Inserts a new row in the exit_questionnaire table.
	 */
	public ExitQuestionnairePk insert(ExitQuestionnaire dto) throws ExitQuestionnaireDaoException;

	/**
	 * Updates a single row in the exit_questionnaire table.
	 */
	public void update(ExitQuestionnairePk pk, ExitQuestionnaire dto) throws ExitQuestionnaireDaoException;

	/**
	 * Deletes a single row in the exit_questionnaire table.
	 */
	public void delete(ExitQuestionnairePk pk) throws ExitQuestionnaireDaoException;

	/**
	 * Returns the rows from the exit_questionnaire table that matches the specified primary-key value.
	 */
	public ExitQuestionnaire findByPrimaryKey(ExitQuestionnairePk pk) throws ExitQuestionnaireDaoException;

	/**
	 * Returns all rows from the exit_questionnaire table that match the criteria 'ID = :id'.
	 */
	public ExitQuestionnaire findByPrimaryKey(int id) throws ExitQuestionnaireDaoException;

	/**
	 * Returns all rows from the exit_questionnaire table that match the criteria ''.
	 */
	public ExitQuestionnaire[] findAll() throws ExitQuestionnaireDaoException;

	/**
	 * Returns all rows from the exit_questionnaire table that match the criteria 'EXIT_ID = :exitId'.
	 */
	public ExitQuestionnaire findWhereExitIdEquals(Integer exitId) throws ExitQuestionnaireDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/**
	 * Returns all rows from the exit_questionnaire table that match the specified arbitrary SQL statement
	 */
	public ExitQuestionnaire[] findByDynamicSelect(String sql, Object[] sqlParams) throws ExitQuestionnaireDaoException;

	/**
	 * Returns all rows from the exit_questionnaire table that match the specified arbitrary SQL statement
	 */
	public ExitQuestionnaire[] findByDynamicWhere(String sql, Object[] sqlParams) throws ExitQuestionnaireDaoException;
}
