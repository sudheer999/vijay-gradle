/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface ProjContInfoDao
{
	/** 
	 * Inserts a new row in the PROJ_CONT_INFO table.
	 */
	public ProjContInfoPk insert(ProjContInfo dto) throws ProjContInfoDaoException;

	/** 
	 * Updates a single row in the PROJ_CONT_INFO table.
	 */
	public void update(ProjContInfoPk pk, ProjContInfo dto) throws ProjContInfoDaoException;

	/** 
	 * Deletes a single row in the PROJ_CONT_INFO table.
	 */
	public void delete(ProjContInfoPk pk) throws ProjContInfoDaoException;

	/** 
	 * Returns the rows from the PROJ_CONT_INFO table that matches the specified primary-key value.
	 */
	public ProjContInfo findByPrimaryKey(ProjContInfoPk pk) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'ID = :id'.
	 */
	public ProjContInfo findByPrimaryKey(int id) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria ''.
	 */
	public ProjContInfo[] findAll() throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'ID = :id'.
	 */
	public ProjContInfo[] findWhereIdEquals(int id) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'PROJ_ID = :projId'.
	 */
	public ProjContInfo[] findWhereProjIdEquals(int projId) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'NAME = :name'.
	 */
	public ProjContInfo[] findWhereNameEquals(String name) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'CONT_NUMBER = :contNumber'.
	 */
	public ProjContInfo[] findWhereContNumberEquals(String contNumber) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'E_MAIL = :eMail'.
	 */
	public ProjContInfo[] findWhereEMailEquals(String eMail) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'DESIGNATION = :designation'.
	 */
	public ProjContInfo[] findWhereDesignationEquals(String designation) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'CONT_TYPE = :contType'.
	 */
	public ProjContInfo[] findWhereContTypeEquals(String contType) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the criteria 'COMMENTS = :comments'.
	 */
	public ProjContInfo[] findWhereCommentsEquals(String comments) throws ProjContInfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the specified arbitrary SQL statement
	 */
	public ProjContInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjContInfoDaoException;

	/** 
	 * Returns all rows from the PROJ_CONT_INFO table that match the specified arbitrary SQL statement
	 */
	public ProjContInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjContInfoDaoException;

}
