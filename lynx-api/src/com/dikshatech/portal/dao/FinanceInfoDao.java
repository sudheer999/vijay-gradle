/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.dikshatech.portal.dao;

import com.dikshatech.portal.dto.FinanceInfo;
import com.dikshatech.portal.dto.FinanceInfoPk;
import com.dikshatech.portal.dto.SalaryReconciliation;
import com.dikshatech.portal.exceptions.FinanceInfoDaoException;

public interface FinanceInfoDao {

	/** 
	 * Inserts a new row in the FINANCE_INFO table.
	 */
	public FinanceInfoPk insert(FinanceInfo dto) throws FinanceInfoDaoException;

	/** 
	 * Updates a single row in the FINANCE_INFO table.
	 */
	public void update(FinanceInfoPk pk, FinanceInfo dto) throws FinanceInfoDaoException;

	/** 
	 * Deletes a single row in the FINANCE_INFO table.
	 */
	public void delete(FinanceInfoPk pk) throws FinanceInfoDaoException;

	/** 
	 * Returns the rows from the FINANCE_INFO table that matches the specified primary-key value.
	 */
	public FinanceInfo findByPrimaryKey(FinanceInfoPk pk) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'ID = :id'.
	 */
	public FinanceInfo findByPrimaryKey(int id) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria ''.
	 */
	public FinanceInfo[] findAll() throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'ID = :id'.
	 */
	public FinanceInfo[] findWhereIdEquals(int id) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'PF_ACC_NO = :pfAccNo'.
	 */
	public FinanceInfo[] findWherePfAccNoEquals(String pfAccNo) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'PAN_NO = :panNo'.
	 */
	public FinanceInfo[] findWherePanNoEquals(String panNo) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'CTC = :ctc'.
	 */
	public FinanceInfo[] findWhereCtcEquals(String ctc) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'PRIM_BANK_ACC_NO = :primBankAccNo'.
	 */
	public FinanceInfo[] findWherePrimBankAccNoEquals(String primBankAccNo) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'PRIM_BANK_NAME = :primBankName'.
	 */
	public FinanceInfo[] findWherePrimBankNameEquals(String primBankName) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'SEC_BANK_ACC_NO = :secBankAccNo'.
	 */
	public FinanceInfo[] findWhereSecBankAccNoEquals(String secBankAccNo) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'SEC_BANK_NAME = :secBankName'.
	 */
	public FinanceInfo[] findWhereSecBankNameEquals(String secBankName) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the criteria 'SALARY_DETAIL = :salaryDetail'.
	 */
	public FinanceInfo[] findWhereSalaryDetailEquals(String salaryDetail) throws FinanceInfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the specified arbitrary SQL statement
	 */
	public FinanceInfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws FinanceInfoDaoException;

	/** 
	 * Returns all rows from the FINANCE_INFO table that match the specified arbitrary SQL statement
	 */
	public FinanceInfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws FinanceInfoDaoException;

	public FinanceInfo findByUserId(int userId) throws FinanceInfoDaoException;

	public void updateSalaryInAdv(String[] values);
    public String[] getSalaryInAdv(int user_id);
    public void updateSalaryInAdvance(SalaryReconciliation reconciliation);	
    
    
    
    // Travel Advance code 
    public void updateTravelInAdv(String[] values);

	public String[] getTravelInAdv(int user_id);
	
    public void updateTravelInAdvance(SalaryReconciliation reconciliation);	


	
}
