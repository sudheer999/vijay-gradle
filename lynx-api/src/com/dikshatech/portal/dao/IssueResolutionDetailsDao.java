/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.dikshatech.portal.dao;

import java.util.ArrayList;
import java.util.Date;
import com.dikshatech.portal.dto.*;
import com.dikshatech.portal.exceptions.*;

public interface IssueResolutionDetailsDao
{
	/** 
	 * Inserts a new row in the ISSUE_RESOLUTION_DETAILS table.
	 */
	public IssueResolutionDetailsPk insert(IssueResolutionDetails dto) throws IssueResolutionDetailsDaoException;

	/** 
	 * Updates a single row in the ISSUE_RESOLUTION_DETAILS table.
	 */
	public void update(IssueResolutionDetailsPk pk, IssueResolutionDetails dto) throws IssueResolutionDetailsDaoException;

	/** 
	 * Deletes a single row in the ISSUE_RESOLUTION_DETAILS table.
	 */
	public void delete(IssueResolutionDetailsPk pk) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns the rows from the ISSUE_RESOLUTION_DETAILS table that matches the specified primary-key value.
	 */
	public IssueResolutionDetails findByPrimaryKey(IssueResolutionDetailsPk pk) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'ID = :id'.
	 */
	public IssueResolutionDetails findByPrimaryKey(int id) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria ''.
	 */
	public IssueResolutionDetails[] findAll() throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'ID = :id'.
	 */
	public IssueResolutionDetails[] findWhereIdEquals(int id) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'ESR_MAP_ID = :esrMapId'.
	 */
	public IssueResolutionDetails[] findWhereEsrMapIdEquals(int esrMapId) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'FIRST_STATUS = :firstStatus'.
	 */
	public IssueResolutionDetails[] findWhereFirstStatusEquals(String firstStatus) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'LAST_STATUS = :lastStatus'.
	 */
	public IssueResolutionDetails[] findWhereLastStatusEquals(String lastStatus) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'REQUESTER_COMMENTS = :requesterComments'.
	 */
	public IssueResolutionDetails[] findWhereRequesterCommentsEquals(String requesterComments) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'REQUESTED_ON = :requestedOn'.
	 */
	public IssueResolutionDetails[] findWhereRequestedOnEquals(Date requestedOn) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'RESOLVED_ON = :resolvedOn'.
	 */
	public IssueResolutionDetails[] findWhereResolvedOnEquals(Date resolvedOn) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'CLOSED_ON = :closedOn'.
	 */
	public IssueResolutionDetails[] findWhereClosedOnEquals(Date closedOn) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the criteria 'RESOLVED_BY = :resolvedBy'.
	 */
	public IssueResolutionDetails[] findWhereResolvedByEquals(int resolvedBy) throws IssueResolutionDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the specified arbitrary SQL statement
	 */
	public IssueResolutionDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws IssueResolutionDetailsDaoException;

	/** 
	 * Returns all rows from the ISSUE_RESOLUTION_DETAILS table that match the specified arbitrary SQL statement
	 */
	public IssueResolutionDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws IssueResolutionDetailsDaoException;
	
	public ArrayList<String> getRequesterComments(String sql) throws IssueCommentsDaoException;

}
